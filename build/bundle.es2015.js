(function () {
'use strict';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope = (self);
    }
    else {
        globalScope = (global);
    }
}
else {
    globalScope = (window);
}
/**
 * @param {?} fn
 * @return {?}
 */
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global = globalScope;
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj == null;
}
/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @param {?} obj
 * @return {?}
 */
function print(obj) {
    // tslint:disable-next-line:no-console
    console.log(obj);
}
/**
 * @param {?} obj
 * @return {?}
 */
function warn(obj) {
    console.warn(obj);
}
/**
 * @param {?} global
 * @param {?} path
 * @param {?} value
 * @return {?}
 */

var _symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (!_symbolIterator) {
        if (((globalScope)).Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    ((Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isPrimitive(obj) {
    return !isJsObject(obj);
}
/**
 * @param {?} s
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _nextClassId = 0;
var Reflect$1 = _global.Reflect;
/**
 * @param {?} annotation
 * @return {?}
 */
function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
        // it is a decorator, extract annotation
        annotation = annotation.annotation;
    }
    return annotation;
}
/**
 * @param {?} fnOrArray
 * @param {?} key
 * @return {?}
 */
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
        fnOrArray === Number || fnOrArray === Array) {
        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
        return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
        var /** @type {?} */ annotations = fnOrArray;
        var /** @type {?} */ annoLength = annotations.length - 1;
        var /** @type {?} */ fn = fnOrArray[annoLength];
        if (typeof fn !== 'function') {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
        }
        if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
        }
        var /** @type {?} */ paramsAnnotations = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
            var /** @type {?} */ paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var /** @type {?} */ annotation = annotations[i];
            if (Array.isArray(annotation)) {
                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            }
            else if (typeof annotation === 'function') {
                paramAnnotations.push(extractAnnotation(annotation));
            }
            else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
}
/**
 *  Provides a way for expressing ES6 classes with parameter annotations in ES5.
  * *
  * ## Basic Example
  * *
  * ```
  * var Greeter = ng.Class({
  * constructor: function(name) {
  * this.name = name;
  * },
  * *
  * greet: function() {
  * alert('Hello ' + this.name + '!');
  * }
  * });
  * ```
  * *
  * is equivalent to ES6:
  * *
  * ```
  * class Greeter {
  * constructor(name) {
  * this.name = name;
  * }
  * *
  * greet() {
  * alert('Hello ' + this.name + '!');
  * }
  * }
  * ```
  * *
  * or equivalent to ES5:
  * *
  * ```
  * var Greeter = function (name) {
  * this.name = name;
  * }
  * *
  * Greeter.prototype.greet = function () {
  * alert('Hello ' + this.name + '!');
  * }
  * ```
  * *
  * ### Example with parameter annotations
  * *
  * ```
  * var MyService = ng.Class({
  * constructor: [String, [new Optional(), Service], function(name, myService) {
  * ...
  * }]
  * });
  * ```
  * *
  * is equivalent to ES6:
  * *
  * ```
  * class MyService {
  * constructor(name: string, @Optional() myService: Service) {
  * ...
  * }
  * }
  * ```
  * *
  * ### Example with inheritance
  * *
  * ```
  * var Shape = ng.Class({
  * constructor: (color) {
  * this.color = color;
  * }
  * });
  * *
  * var Square = ng.Class({
  * extends: Shape,
  * constructor: function(color, size) {
  * Shape.call(this, color);
  * this.size = size;
  * }
  * });
  * ```
 * @param {?} clsDef
 * @return {?}
 */
function Class(clsDef) {
    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var /** @type {?} */ proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (typeof clsDef.extends === 'function') {
            ((constructor)).prototype = proto =
                Object.create(((clsDef.extends)).prototype);
        }
        else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
        }
    }
    for (var key in clsDef) {
        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect$1.defineMetadata('annotations', this.annotations, constructor);
    }
    var /** @type {?} */ constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
        ((constructor))['overriddenName'] = "class" + _nextClassId++;
    }
    return (constructor);
}
/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @param {?=} chainFn
 * @return {?}
 */
function makeDecorator(name, props, parentClass, chainFn) {
    if (chainFn === void 0) { chainFn = null; }
    var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
    /**
     * @param {?} objOrType
     * @return {?}
     */
    function DecoratorFactory(objOrType) {
        if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
        }
        if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
            var /** @type {?} */ annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];
            annotations.push(annotationInstance);
            Reflect$1.defineMetadata('annotations', annotations, cls);
            return cls;
        });
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
            chainFn(TypeDecorator);
        return TypeDecorator;
    }
    if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((DecoratorFactory)).annotationCls = DecoratorFactory;
    return DecoratorFactory;
}
/**
 * @param {?} props
 * @return {?}
 */
function makeMetadataCtor(props) {
    return function ctor() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        props.forEach(function (prop, i) {
            var /** @type {?} */ argVal = args[i];
            if (Array.isArray(prop)) {
                // plain parameter
                _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
            }
            else {
                for (var propName in prop) {
                    _this[propName] =
                        argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
                }
            }
        });
    };
}
/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */
function makeParamDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function ParamDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        ((ParamDecorator)).annotation = annotationInstance;
        return ParamDecorator;
        /**
         * @param {?} cls
         * @param {?} unusedKey
         * @param {?} index
         * @return {?}
         */
        function ParamDecorator(cls, unusedKey, index) {
            var /** @type {?} */ parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || [];
            parameters[index].push(annotationInstance);
            Reflect$1.defineMetadata('parameters', parameters, cls);
            return cls;
        }
        var _a;
    }
    if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
}
/**
 * @param {?} name
 * @param {?} props
 * @param {?=} parentClass
 * @return {?}
 */
function makePropDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function PropDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
        return function PropDecorator(target, name) {
            var /** @type {?} */ meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            Reflect$1.defineMetadata('propMetadata', meta, target.constructor);
        };
        var _a;
    }
    if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Inject decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Inject = makeParamDecorator('Inject', [['token', undefined]]);
/**
 * Optional decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Optional = makeParamDecorator('Optional', []);
/**
 * Injectable decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Injectable = (makeDecorator('Injectable', []));
/**
 * Self decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Self = makeParamDecorator('Self', []);
/**
 * SkipSelf decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var SkipSelf = makeParamDecorator('SkipSelf', []);
/**
 * Host decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Host = makeParamDecorator('Host', []);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   {provide: t, useValue: "bindingValue"}
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 * @stable
 */
// so that metadata is gathered for this class
var OpaqueToken = (function () {
    /**
     * @param {?} _desc
     */
    function OpaqueToken(_desc) {
        this._desc = _desc;
    }
    /**
     * @return {?}
     */
    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
    OpaqueToken.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    OpaqueToken.ctorParameters = function () { return [
        null,
    ]; };
    return OpaqueToken;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This token can be used to create a virtual provider that will populate the
 * `entryComponents` fields of components and ng modules based on its `useValue`.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) will be added to the `entryComponents` property.
 *
 * ### Example
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on the router configuration which refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * @NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * @experimental
 */
var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
/**
 * Attribute decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
/**
 *  Base class for query metadata.
  * *
  * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for
  * more information.
  * *
 * @abstract
 */
var Query = (function () {
    function Query() {
    }
    return Query;
}());
/**
 * ContentChildren decorator and metadata.
 *
 *  @stable
 *  @Annotation
 */
var ContentChildren = (makePropDecorator('ContentChildren', [
    ['selector', undefined], {
        first: false,
        isViewQuery: false,
        descendants: false,
        read: undefined,
    }
], Query));
/**
 * ContentChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var ContentChild = makePropDecorator('ContentChild', [
    ['selector', undefined], {
        first: true,
        isViewQuery: false,
        descendants: true,
        read: undefined,
    }
], Query);
/**
 * ViewChildren decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var ViewChildren = makePropDecorator('ViewChildren', [
    ['selector', undefined], {
        first: false,
        isViewQuery: true,
        descendants: true,
        read: undefined,
    }
], Query);
/**
 * ViewChild decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var ViewChild = makePropDecorator('ViewChild', [
    ['selector', undefined], {
        first: true,
        isViewQuery: true,
        descendants: true,
        read: undefined,
    }
], Query);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ChangeDetectionStrategy = {};
ChangeDetectionStrategy.OnPush = 0;
ChangeDetectionStrategy.Default = 1;
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
var ChangeDetectorStatus = {};
ChangeDetectorStatus.CheckOnce = 0;
ChangeDetectorStatus.Checked = 1;
ChangeDetectorStatus.CheckAlways = 2;
ChangeDetectorStatus.Detached = 3;
ChangeDetectorStatus.Errored = 4;
ChangeDetectorStatus.Destroyed = 5;
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
/**
 * @param {?} changeDetectionStrategy
 * @return {?}
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return isBlank(changeDetectionStrategy) ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Directive = (makeDecorator('Directive', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    providers: undefined,
    exportAs: undefined,
    queries: undefined
}));
/**
 * Component decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Component = (makeDecorator('Component', {
    selector: undefined,
    inputs: undefined,
    outputs: undefined,
    host: undefined,
    exportAs: undefined,
    moduleId: undefined,
    providers: undefined,
    viewProviders: undefined,
    changeDetection: ChangeDetectionStrategy.Default,
    queries: undefined,
    templateUrl: undefined,
    template: undefined,
    styleUrls: undefined,
    styles: undefined,
    animations: undefined,
    encapsulation: undefined,
    interpolation: undefined,
    entryComponents: undefined
}, Directive));
/**
 * Pipe decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Pipe = (makeDecorator('Pipe', {
    name: undefined,
    pure: true,
}));
/**
 * Input decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
/**
 * Output decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
/**
 * HostBinding decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
/**
 * HostListener decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LifecycleHooks = {};
LifecycleHooks.OnInit = 0;
LifecycleHooks.OnDestroy = 1;
LifecycleHooks.DoCheck = 2;
LifecycleHooks.OnChanges = 3;
LifecycleHooks.AfterContentInit = 4;
LifecycleHooks.AfterContentChecked = 5;
LifecycleHooks.AfterViewInit = 6;
LifecycleHooks.AfterViewChecked = 7;
LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
var LIFECYCLE_HOOKS_VALUES = [
    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
    LifecycleHooks.AfterViewChecked
];
/**
 *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
  * *
  * `ngOnChanges` is called right after the data-bound properties have been checked and before view
  * and content children are checked if at least one of them has changed.
  * The `changes` parameter contains the changed properties.
  * *
  * See {@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  initialized.
  * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
  * *
  * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
  * first time, and before any of its children have been checked. It is invoked only once when the
  * directive is instantiated.
  * *
  * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
  * *
  * `ngDoCheck` gets called to check the changes in the directives in addition to the default
  * algorithm. The default change detection algorithm looks for differences by comparing
  * bound-property values by reference across change detection runs.
  * *
  * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to
  * changes on the same input, as `ngOnChanges` will continue to be called when the default change
  * detector detects changes.
  * *
  * See {@link KeyValueDiffers} and {@link IterableDiffers} for implementing custom dirty checking
  * for collections.
  * *
  * See {@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
  * *
  * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
  * instance is destroyed.
  * *
  * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  *
  * initialized.
  * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
  * *
  * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
  * *
  * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  initialized.
  * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
  * *
  * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 *  {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
  * *
  * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
  * *
 * @abstract
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Defines a schema that will allow:
 * - any non-Angular elements with a `-` in their name,
 * - any properties on elements with a `-` in their name which is the common rule for custom
 * elements.
 *
 * @stable
 */

/**
 * Defines a schema that will allow any property on any element.
 *
 * @experimental
 */

/**
 * NgModule decorator and metadata.
 *
 * @stable
 * @Annotation
 */
var NgModule = (makeDecorator('NgModule', {
    providers: undefined,
    declarations: undefined,
    imports: undefined,
    exports: undefined,
    entryComponents: undefined,
    bootstrap: undefined,
    schemas: undefined,
    id: undefined,
}));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewEncapsulation = {};
ViewEncapsulation.Emulated = 0;
ViewEncapsulation.Native = 1;
ViewEncapsulation.None = 2;
ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
ViewEncapsulation[ViewEncapsulation.Native] = "Native";
ViewEncapsulation[ViewEncapsulation.None] = "None";
/**
 *  Metadata properties available for configuring Views.
  * *
  * For details on the `@Component` annotation, see {@link Component}.
  * *
  * ### Example
  * *
  * ```
  * selector: 'greet',
  * template: 'Hello {{name}}!',
  * })
  * class Greet {
  * name: string;
  * *
  * constructor() {
  * this.name = 'World';
  * }
  * }
  * ```
  * *
 * @deprecated Use Component instead.
  * *
  * {@link Component}
 */
var ViewMetadata = (function () {
    /**
     * @param {?=} __0
     */
    function ViewMetadata(_a) {
        var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
        this.templateUrl = templateUrl;
        this.template = template;
        this.styleUrls = styleUrls;
        this.styles = styles;
        this.encapsulation = encapsulation;
        this.animations = animations;
        this.interpolation = interpolation;
    }
    return ViewMetadata;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *  *
 */
var Version = (function () {
    /**
     * @param {?} full
     */
    function Version(full) {
        this.full = full;
    }
    Object.defineProperty(Version.prototype, "major", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.')[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.')[1]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "patch", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.').slice(2).join('.'); },
        enumerable: true,
        configurable: true
    });
    return Version;
}());
/**
 * @stable
 */
var VERSION = new Version('2.4.3');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for util

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Allows to refer to references which are not yet defined.
  * *
  * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
  * DI is declared,
  * but not yet defined. It is also used when the `token` which we use when creating a query is not
  * yet defined.
  * *
  * ### Example
  * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * @param {?} forwardRefFn
 * @return {?}
 */
function forwardRef(forwardRefFn) {
    ((forwardRefFn)).__forward_ref__ = forwardRef;
    ((forwardRefFn)).toString = function () { return stringify(this()); };
    return (((forwardRefFn)));
}
/**
 *  Lazily retrieves the reference value from a forwardRef.
  * *
  * Acts as the identity function when given a non-forward-ref value.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
  * *
  * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
  * *
  * See: {@link forwardRef}
 * @param {?} type
 * @return {?}
 */
function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
        type.__forward_ref__ === forwardRef) {
        return ((type))();
    }
    else {
        return type;
    }
}

var __extends = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */
function unimplemented() {
    throw new Error('unimplemented');
}
/**
 * @stable
 */
var BaseError = (function (_super) {
    __extends(BaseError, _super);
    /**
     * @param {?} message
     */
    function BaseError(message) {
        _super.call(this, message);
        // Errors don't use current this, instead they create a new instance.
        // We have to do forward all of our api to the nativeInstance.
        // TODO(bradfordcsmith): Remove this hack when
        //     google/closure-compiler/issues/2102 is fixed.
        var nativeError = new Error(message);
        this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
        /**
         * @return {?}
         */
        get: function () { return this._nativeError.message; },
        /**
         * @param {?} message
         * @return {?}
         */
        set: function (message) { this._nativeError.message = message; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
        /**
         * @return {?}
         */
        get: function () { return this._nativeError.name; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
        /**
         * @return {?}
         */
        get: function () { return ((this._nativeError)).stack; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) { ((this._nativeError)).stack = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseError.prototype.toString = function () { return this._nativeError.toString(); };
    return BaseError;
}(Error));
/**
 * @stable
 */
var WrappedError = (function (_super) {
    __extends(WrappedError, _super);
    /**
     * @param {?} message
     * @param {?} error
     */
    function WrappedError(message, error) {
        _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
        this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
        /**
         * @return {?}
         */
        get: function () {
            return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
                .stack;
        },
        enumerable: true,
        configurable: true
    });
    return WrappedError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = (function () {
    function _NullInjector() {
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    _NullInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
        if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("No provider for " + stringify(token) + "!");
        }
        return notFoundValue;
    };
    return _NullInjector;
}());
/**
 *  ```
  * const injector: Injector = ...;
  * injector.get(...);
  * ```
  * *
  * For more details, see the {@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
  * *
  * ### Example
  * *
  * {@example core/di/ts/injector_spec.ts region='Injector'}
  * *
  * `Injector` returns itself when given `Injector` as a token:
  * {@example core/di/ts/injector_spec.ts region='injectInjector'}
  * *
 * @abstract
 */
var Injector = (function () {
    function Injector() {
    }
    /**
     *  Retrieves an instance from the injector based on the provided token.
      * If not found:
      * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
      * Injector.THROW_IF_NOT_FOUND is given
      * - Returns the `notFoundValue` otherwise
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    return Injector;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$1 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @param {?} keys
 * @return {?}
 */
function findFirstClosedCycle(keys) {
    var /** @type {?} */ res = [];
    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
/**
 * @param {?} keys
 * @return {?}
 */
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
/**
 *  Base class for all errors arising from misconfigured providers.
 */
var AbstractProviderError = (function (_super) {
    __extends$1(AbstractProviderError, _super);
    /**
     * @param {?} injector
     * @param {?} key
     * @param {?} constructResolvingMessage
     */
    function AbstractProviderError(injector, key, constructResolvingMessage) {
        _super.call(this, 'DI Error');
        this.keys = [key];
        this.injectors = [injector];
        this.constructResolvingMessage = constructResolvingMessage;
        this.message = this.constructResolvingMessage(this.keys);
    }
    /**
     * @param {?} injector
     * @param {?} key
     * @return {?}
     */
    AbstractProviderError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        this.message = this.constructResolvingMessage(this.keys);
    };
    return AbstractProviderError;
}(BaseError));
/**
 *  Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
  * {@link Injector} does not have a {@link Provider} for the given key.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
  * *
  * ```typescript
  * class A {
  * constructor(b:B) {}
  * }
  * *
  * expect(() => Injector.resolveAndCreate([A])).toThrowError();
  * ```
 */
var NoProviderError = (function (_super) {
    __extends$1(NoProviderError, _super);
    /**
     * @param {?} injector
     * @param {?} key
     */
    function NoProviderError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            var first = stringify(keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(keys);
        });
    }
    return NoProviderError;
}(AbstractProviderError));
/**
 *  Thrown when dependencies form a cycle.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
  * *
  * ```typescript
  * var injector = Injector.resolveAndCreate([
  * {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
  * {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
  * ]);
  * *
  * expect(() => injector.get("one")).toThrowError();
  * ```
  * *
  * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 */
var CyclicDependencyError = (function (_super) {
    __extends$1(CyclicDependencyError, _super);
    /**
     * @param {?} injector
     * @param {?} key
     */
    function CyclicDependencyError(injector, key) {
        _super.call(this, injector, key, function (keys) {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
        });
    }
    return CyclicDependencyError;
}(AbstractProviderError));
/**
 *  Thrown when a constructing type returns with an Error.
  * *
  * The `InstantiationError` class contains the original error plus the dependency graph which caused
  * this object to be instantiated.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
  * *
  * ```typescript
  * class A {
  * constructor() {
  * throw new Error('message');
  * }
  * }
  * *
  * var injector = Injector.resolveAndCreate([A]);
  * try {
  * injector.get(A);
  * } catch (e) {
  * expect(e instanceof InstantiationError).toBe(true);
  * expect(e.originalException.message).toEqual("message");
  * expect(e.originalStack).toBeDefined();
  * }
  * ```
 */
var InstantiationError = (function (_super) {
    __extends$1(InstantiationError, _super);
    /**
     * @param {?} injector
     * @param {?} originalException
     * @param {?} originalStack
     * @param {?} key
     */
    function InstantiationError(injector, originalException, originalStack, key) {
        _super.call(this, 'DI Error', originalException);
        this.keys = [key];
        this.injectors = [injector];
    }
    /**
     * @param {?} injector
     * @param {?} key
     * @return {?}
     */
    InstantiationError.prototype.addKey = function (injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
    };
    Object.defineProperty(InstantiationError.prototype, "message", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ first = stringify(this.keys[0].token);
            return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InstantiationError.prototype, "causeKey", {
        /**
         * @return {?}
         */
        get: function () { return this.keys[0]; },
        enumerable: true,
        configurable: true
    });
    return InstantiationError;
}(WrappedError));
/**
 *  Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
  * creation.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
  * *
  * ```typescript
  * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
  * ```
 */
var InvalidProviderError = (function (_super) {
    __extends$1(InvalidProviderError, _super);
    /**
     * @param {?} provider
     */
    function InvalidProviderError(provider) {
        _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    return InvalidProviderError;
}(BaseError));
/**
 *  Thrown when the class has no annotation information.
  * *
  * Lack of annotation information prevents the {@link Injector} from determining which dependencies
  * need to be injected into the constructor.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
  * *
  * ```typescript
  * class A {
  * constructor(b) {}
  * }
  * *
  * expect(() => Injector.resolveAndCreate([A])).toThrowError();
  * ```
  * *
  * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
  * *
  * ```typescript
  * class B {}
  * *
  * class A {
  * constructor(b:B) {} // no information about the parameter types of A is available at runtime.
  * }
  * *
  * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
  * ```
 */
var NoAnnotationError = (function (_super) {
    __extends$1(NoAnnotationError, _super);
    /**
     * @param {?} typeOrFunc
     * @param {?} params
     */
    function NoAnnotationError(typeOrFunc, params) {
        _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
    }
    /**
     * @param {?} typeOrFunc
     * @param {?} params
     * @return {?}
     */
    NoAnnotationError._genMessage = function (typeOrFunc, params) {
        var /** @type {?} */ signature = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
            var /** @type {?} */ parameter = params[i];
            if (!parameter || parameter.length == 0) {
                signature.push('?');
            }
            else {
                signature.push(parameter.map(stringify).join(' '));
            }
        }
        return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
            signature.join(', ') + '). ' +
            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
            stringify(typeOrFunc) + '\' is decorated with Injectable.';
    };
    return NoAnnotationError;
}(BaseError));
/**
 *  Thrown when getting an object by index.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
  * *
  * ```typescript
  * class A {}
  * *
  * var injector = Injector.resolveAndCreate([A]);
  * *
  * expect(() => injector.getAt(100)).toThrowError();
  * ```
 */
var OutOfBoundsError = (function (_super) {
    __extends$1(OutOfBoundsError, _super);
    /**
     * @param {?} index
     */
    function OutOfBoundsError(index) {
        _super.call(this, "Index " + index + " is out-of-bounds.");
    }
    return OutOfBoundsError;
}(BaseError));
/**
 *  Thrown when a multi provider and a regular provider are bound to the same token.
  * *
  * ### Example
  * *
  * ```typescript
  * expect(() => Injector.resolveAndCreate([
  * { provide: "Strings", useValue: "string1", multi: true},
  * { provide: "Strings", useValue: "string2", multi: false}
  * ])).toThrowError();
  * ```
 */
var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
    __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
    /**
     * @param {?} provider1
     * @param {?} provider2
     */
    function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
            provider2.toString());
    }
    return MixingMultiProvidersWithRegularProvidersError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  A unique object used for retrieving items from the {@link ReflectiveInjector}.
  * *
  * Keys have:
  * - a system-wide unique `id`.
  * - a `token`.
  * *
  * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
  * the
  * injector to store created objects in a more efficient way.
  * *
  * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
  * resolving
  * providers.
 */
var ReflectiveKey = (function () {
    /**
     *  Private
     * @param {?} token
     * @param {?} id
     */
    function ReflectiveKey(token, id) {
        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
        /**
         *  Returns a stringified token.
         * @return {?}
         */
        get: function () { return stringify(this.token); },
        enumerable: true,
        configurable: true
    });
    /**
     *  Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */
    ReflectiveKey.get = function (token) {
        return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
        /**
         * @return {?} the number of keys registered in the system.
         */
        get: function () { return _globalKeyRegistry.numberOfKeys; },
        enumerable: true,
        configurable: true
    });
    return ReflectiveKey;
}());
/**
 * @internal
 */
var KeyRegistry = (function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    /**
     * @param {?} token
     * @return {?}
     */
    KeyRegistry.prototype.get = function (token) {
        if (token instanceof ReflectiveKey)
            return token;
        if (this._allKeys.has(token)) {
            return this._allKeys.get(token);
        }
        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        /**
         * @return {?}
         */
        get: function () { return this._allKeys.size; },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
}());
var _globalKeyRegistry = new KeyRegistry();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes Represents a type that a Component or other object is instances of.
 *
 * @description
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * @stable
 */
var Type = Function;
/**
 * @param {?} v
 * @return {?}
 */
function isType(v) {
    return typeof v === 'function';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Attention: This regex has to hold even if the code is minified!
 */
var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
var ReflectionCapabilities = (function () {
    /**
     * @param {?=} reflect
     */
    function ReflectionCapabilities(reflect) {
        this._reflect = reflect || _global.Reflect;
    }
    /**
     * @return {?}
     */
    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
    /**
     * @param {?} t
     * @return {?}
     */
    ReflectionCapabilities.prototype.factory = function (t) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i - 0] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
    }; };
    /**
     * @param {?} paramTypes
     * @param {?} paramAnnotations
     * @return {?}
     */
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
        var /** @type {?} */ result;
        if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
        }
        else {
            result = new Array(paramTypes.length);
        }
        for (var /** @type {?} */ i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (paramAnnotations && isPresent(paramAnnotations[i])) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    /**
     * @param {?} type
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
        // If we have no decorators, we only have function.length as metadata.
        // In that case, to detect whether a child class declared an own constructor or not,
        // we need to look inside of that constructor to check whether it is
        // just calling the parent.
        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
        // that sets 'design:paramtypes' to []
        // if a class inherits from another class but has no ctor declared itself.
        if (DELEGATE_CTOR.exec(type.toString())) {
            return null;
        }
        // Prefer the direct API.
        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
            return ((type)).parameters;
        }
        // API of tsickle for lowering decorators to properties on the class.
        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            // Newer tsickle uses a function closure
            // Retain the non-function case for compatibility with older tsickle
            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {
                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
            });
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        // API for metadata created by invoking the decorators.
        if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
            if (paramTypes || paramAnnotations) {
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
        }
        // If a class has no decorators, at least create metadata
        // based on function.length.
        // Note: We know that this is a real constructor as we checked
        // the content of the constructor above.
        return new Array(((type.length))).fill(undefined);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.parameters = function (type) {
        // Note: only report metadata if we have at least one class decorator
        // to stay in sync with the static reflector.
        if (!isType(type)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(type);
        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
        }
        return parameters || [];
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
        }
        // API for metadata created by invoking the decorators.
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
        }
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (((typeOrFunc)).propMetadata &&
            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (((typeOrFunc)).propDecorators &&
            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
            var /** @type {?} */ propMetadata_1 = ({});
            Object.keys(propDecorators_1).forEach(function (prop) {
                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
        }
        // API for metadata created by invoking the decorators.
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
        }
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ propMetadata = {};
        if (parentCtor !== Object) {
            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata_1).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata_1[propName];
            });
        }
        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach(function (propName) {
                var /** @type {?} */ decorators = [];
                if (propMetadata.hasOwnProperty(propName)) {
                    decorators.push.apply(decorators, propMetadata[propName]);
                }
                decorators.push.apply(decorators, ownPropMetadata[propName]);
                propMetadata[propName] = decorators;
            });
        }
        return propMetadata;
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.setter = function (name) {
        return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.method = function (name) {
        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return ((new Function('o', 'args', functionBody)));
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.importUri = function (type) {
        // StaticSymbol
        if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
        }
        // Runtime type
        return "./" + stringify(type);
    };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} runtime
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
    /**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
    return ReflectionCapabilities;
}());
/**
 * @param {?} decoratorInvocations
 * @return {?}
 */
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var /** @type {?} */ decoratorType = decoratorInvocation.type;
        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
}
/**
 * @param {?} ctor
 * @return {?}
 */
function getParentCtor(ctor) {
    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
    // Note: We always use `Object` as the null value
    // to simplify checking later on.
    return parentCtor || Object;
}

/**
 *  Provides read-only access to reflection data about symbols. Used internally by Angular
  * to power dependency injection and compilation.
 * @abstract
 */
var ReflectorReader = (function () {
    function ReflectorReader() {
    }
    /**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectorReader.prototype.parameters = function (typeOrFunc) { };
    /**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectorReader.prototype.annotations = function (typeOrFunc) { };
    /**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
    /**
     * @abstract
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectorReader.prototype.importUri = function (typeOrFunc) { };
    /**
     * @abstract
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} runtime
     * @return {?}
     */
    ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };
    /**
     * @abstract
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */
    ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
    return ReflectorReader;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$2 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Provides access to reflection data about symbols. Used internally by Angular
  * to power dependency injection and compilation.
 */
var Reflector = (function (_super) {
    __extends$2(Reflector, _super);
    /**
     * @param {?} reflectionCapabilities
     */
    function Reflector(reflectionCapabilities) {
        _super.call(this);
        this.reflectionCapabilities = reflectionCapabilities;
    }
    /**
     * @param {?} caps
     * @return {?}
     */
    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.parameters = function (typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.annotations = function (typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.propMetadata = function (typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} runtime
     * @return {?}
     */
    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
    };
    /**
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.resolveEnum = function (identifier, name) {
        return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
}(ReflectorReader));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */
var reflector = new Reflector(new ReflectionCapabilities());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  `Dependency` is used by the framework to extend DI.
  * This is internal to Angular and should not be used directly.
 */
var ReflectiveDependency = (function () {
    /**
     * @param {?} key
     * @param {?} optional
     * @param {?} lowerBoundVisibility
     * @param {?} upperBoundVisibility
     * @param {?} properties
     */
    function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
        this.key = key;
        this.optional = optional;
        this.lowerBoundVisibility = lowerBoundVisibility;
        this.upperBoundVisibility = upperBoundVisibility;
        this.properties = properties;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    ReflectiveDependency.fromKey = function (key) {
        return new ReflectiveDependency(key, false, null, null, []);
    };
    return ReflectiveDependency;
}());
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = (function () {
    /**
     * @param {?} key
     * @param {?} resolvedFactories
     * @param {?} multiProvider
     */
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
        /**
         * @return {?}
         */
        get: function () { return this.resolvedFactories[0]; },
        enumerable: true,
        configurable: true
    });
    return ResolvedReflectiveProvider_;
}());
/**
 *  An internal resolved representation of a factory function created by resolving {@link
  * Provider}.
 */
var ResolvedReflectiveFactory = (function () {
    /**
     * @param {?} factory
     * @param {?} dependencies
     */
    function ResolvedReflectiveFactory(factory, dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
}());
/**
 *  Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveFactory(provider) {
    var /** @type {?} */ factoryFn;
    var /** @type {?} */ resolvedDeps;
    if (provider.useClass) {
        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (provider.useExisting) {
        factoryFn = function (aliasInstance) { return aliasInstance; };
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    }
    else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    }
    else {
        factoryFn = function () { return provider.useValue; };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 *  Converts the {@link Provider} into {@link ResolvedProvider}.
  * *
  * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
  * convenience provider syntax.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
}
/**
 *  Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */
function resolveReflectiveProviders(providers) {
    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
/**
 *  Merges a list of ResolvedProviders into a list where
  * each key is contained exactly once and multi providers
  * have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            }
            else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        }
        else {
            var /** @type {?} */ resolvedProvider = void 0;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            }
            else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof Type) {
            res.push({ provide: b, useClass: b });
        }
        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
            res.push(/** @type {?} */ (b));
        }
        else if (b instanceof Array) {
            _normalizeProviders(b, res);
        }
        else {
            throw new InvalidProviderError(b);
        }
    });
    return res;
}
/**
 * @param {?} typeOrFunc
 * @param {?} dependencies
 * @return {?}
 */
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    }
    else {
        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
    }
}
/**
 * @param {?} typeOrFunc
 * @return {?}
 */
function _dependenciesFor(typeOrFunc) {
    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
    if (!params)
        return [];
    if (params.some(function (p) { return p == null; })) {
        throw new NoAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
}
/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */
function _extractToken(typeOrFunc, metadata, params) {
    var /** @type {?} */ depProps = [];
    var /** @type {?} */ token = null;
    var /** @type {?} */ optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null, null, depProps);
        }
        else {
            return _createDependency(metadata, optional, null, null, depProps);
        }
    }
    var /** @type {?} */ lowerBoundVisibility = null;
    var /** @type {?} */ upperBoundVisibility = null;
    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
        var /** @type {?} */ paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof Optional) {
            optional = true;
        }
        else if (paramMetadata instanceof Self) {
            upperBoundVisibility = paramMetadata;
        }
        else if (paramMetadata instanceof Host) {
            upperBoundVisibility = paramMetadata;
        }
        else if (paramMetadata instanceof SkipSelf) {
            lowerBoundVisibility = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
    }
    else {
        throw new NoAnnotationError(typeOrFunc, params);
    }
}
/**
 * @param {?} token
 * @param {?} optional
 * @param {?} lowerBoundVisibility
 * @param {?} upperBoundVisibility
 * @param {?} depProps
 * @return {?}
 */
function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Threshold for the dynamic version
var _MAX_CONSTRUCTION_COUNTER = 10;
var UNDEFINED = new Object();
var ReflectiveProtoInjectorInlineStrategy = (function () {
    /**
     * @param {?} protoEI
     * @param {?} providers
     */
    function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
        this.provider0 = null;
        this.provider1 = null;
        this.provider2 = null;
        this.provider3 = null;
        this.provider4 = null;
        this.provider5 = null;
        this.provider6 = null;
        this.provider7 = null;
        this.provider8 = null;
        this.provider9 = null;
        this.keyId0 = null;
        this.keyId1 = null;
        this.keyId2 = null;
        this.keyId3 = null;
        this.keyId4 = null;
        this.keyId5 = null;
        this.keyId6 = null;
        this.keyId7 = null;
        this.keyId8 = null;
        this.keyId9 = null;
        var length = providers.length;
        if (length > 0) {
            this.provider0 = providers[0];
            this.keyId0 = providers[0].key.id;
        }
        if (length > 1) {
            this.provider1 = providers[1];
            this.keyId1 = providers[1].key.id;
        }
        if (length > 2) {
            this.provider2 = providers[2];
            this.keyId2 = providers[2].key.id;
        }
        if (length > 3) {
            this.provider3 = providers[3];
            this.keyId3 = providers[3].key.id;
        }
        if (length > 4) {
            this.provider4 = providers[4];
            this.keyId4 = providers[4].key.id;
        }
        if (length > 5) {
            this.provider5 = providers[5];
            this.keyId5 = providers[5].key.id;
        }
        if (length > 6) {
            this.provider6 = providers[6];
            this.keyId6 = providers[6].key.id;
        }
        if (length > 7) {
            this.provider7 = providers[7];
            this.keyId7 = providers[7].key.id;
        }
        if (length > 8) {
            this.provider8 = providers[8];
            this.keyId8 = providers[8].key.id;
        }
        if (length > 9) {
            this.provider9 = providers[9];
            this.keyId9 = providers[9].key.id;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
        if (index == 0)
            return this.provider0;
        if (index == 1)
            return this.provider1;
        if (index == 2)
            return this.provider2;
        if (index == 3)
            return this.provider3;
        if (index == 4)
            return this.provider4;
        if (index == 5)
            return this.provider5;
        if (index == 6)
            return this.provider6;
        if (index == 7)
            return this.provider7;
        if (index == 8)
            return this.provider8;
        if (index == 9)
            return this.provider9;
        throw new OutOfBoundsError(index);
    };
    /**
     * @param {?} injector
     * @return {?}
     */
    ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
        return new ReflectiveInjectorInlineStrategy(injector, this);
    };
    return ReflectiveProtoInjectorInlineStrategy;
}());
var ReflectiveProtoInjectorDynamicStrategy = (function () {
    /**
     * @param {?} protoInj
     * @param {?} providers
     */
    function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
        this.providers = providers;
        var len = providers.length;
        this.keyIds = new Array(len);
        for (var i = 0; i < len; i++) {
            this.keyIds[i] = providers[i].key.id;
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
        if (index < 0 || index >= this.providers.length) {
            throw new OutOfBoundsError(index);
        }
        return this.providers[index];
    };
    /**
     * @param {?} ei
     * @return {?}
     */
    ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
        return new ReflectiveInjectorDynamicStrategy(this, ei);
    };
    return ReflectiveProtoInjectorDynamicStrategy;
}());
var ReflectiveProtoInjector = (function () {
    /**
     * @param {?} providers
     */
    function ReflectiveProtoInjector(providers) {
        this.numberOfProviders = providers.length;
        this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?
            new ReflectiveProtoInjectorDynamicStrategy(this, providers) :
            new ReflectiveProtoInjectorInlineStrategy(this, providers);
    }
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
        return new ReflectiveProtoInjector(providers);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
        return this._strategy.getProviderAtIndex(index);
    };
    return ReflectiveProtoInjector;
}());
var ReflectiveInjectorInlineStrategy = (function () {
    /**
     * @param {?} injector
     * @param {?} protoStrategy
     */
    function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
        this.injector = injector;
        this.protoStrategy = protoStrategy;
        this.obj0 = UNDEFINED;
        this.obj1 = UNDEFINED;
        this.obj2 = UNDEFINED;
        this.obj3 = UNDEFINED;
        this.obj4 = UNDEFINED;
        this.obj5 = UNDEFINED;
        this.obj6 = UNDEFINED;
        this.obj7 = UNDEFINED;
        this.obj8 = UNDEFINED;
        this.obj9 = UNDEFINED;
    }
    /**
     * @return {?}
     */
    ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
        return this.injector._new(provider);
    };
    /**
     * @param {?} keyId
     * @return {?}
     */
    ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
        var /** @type {?} */ p = this.protoStrategy;
        var /** @type {?} */ inj = this.injector;
        if (p.keyId0 === keyId) {
            if (this.obj0 === UNDEFINED) {
                this.obj0 = inj._new(p.provider0);
            }
            return this.obj0;
        }
        if (p.keyId1 === keyId) {
            if (this.obj1 === UNDEFINED) {
                this.obj1 = inj._new(p.provider1);
            }
            return this.obj1;
        }
        if (p.keyId2 === keyId) {
            if (this.obj2 === UNDEFINED) {
                this.obj2 = inj._new(p.provider2);
            }
            return this.obj2;
        }
        if (p.keyId3 === keyId) {
            if (this.obj3 === UNDEFINED) {
                this.obj3 = inj._new(p.provider3);
            }
            return this.obj3;
        }
        if (p.keyId4 === keyId) {
            if (this.obj4 === UNDEFINED) {
                this.obj4 = inj._new(p.provider4);
            }
            return this.obj4;
        }
        if (p.keyId5 === keyId) {
            if (this.obj5 === UNDEFINED) {
                this.obj5 = inj._new(p.provider5);
            }
            return this.obj5;
        }
        if (p.keyId6 === keyId) {
            if (this.obj6 === UNDEFINED) {
                this.obj6 = inj._new(p.provider6);
            }
            return this.obj6;
        }
        if (p.keyId7 === keyId) {
            if (this.obj7 === UNDEFINED) {
                this.obj7 = inj._new(p.provider7);
            }
            return this.obj7;
        }
        if (p.keyId8 === keyId) {
            if (this.obj8 === UNDEFINED) {
                this.obj8 = inj._new(p.provider8);
            }
            return this.obj8;
        }
        if (p.keyId9 === keyId) {
            if (this.obj9 === UNDEFINED) {
                this.obj9 = inj._new(p.provider9);
            }
            return this.obj9;
        }
        return UNDEFINED;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
        if (index == 0)
            return this.obj0;
        if (index == 1)
            return this.obj1;
        if (index == 2)
            return this.obj2;
        if (index == 3)
            return this.obj3;
        if (index == 4)
            return this.obj4;
        if (index == 5)
            return this.obj5;
        if (index == 6)
            return this.obj6;
        if (index == 7)
            return this.obj7;
        if (index == 8)
            return this.obj8;
        if (index == 9)
            return this.obj9;
        throw new OutOfBoundsError(index);
    };
    /**
     * @return {?}
     */
    ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
    return ReflectiveInjectorInlineStrategy;
}());
var ReflectiveInjectorDynamicStrategy = (function () {
    /**
     * @param {?} protoStrategy
     * @param {?} injector
     */
    function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
        this.protoStrategy = protoStrategy;
        this.injector = injector;
        this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
    }
    /**
     * @return {?}
     */
    ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
        return this.injector._new(provider);
    };
    /**
     * @param {?} keyId
     * @return {?}
     */
    ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
        var /** @type {?} */ p = this.protoStrategy;
        for (var /** @type {?} */ i = 0; i < p.keyIds.length; i++) {
            if (p.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this.injector._new(p.providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
        if (index < 0 || index >= this.objs.length) {
            throw new OutOfBoundsError(index);
        }
        return this.objs[index];
    };
    /**
     * @return {?}
     */
    ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
    return ReflectiveInjectorDynamicStrategy;
}());
/**
 *  A ReflectiveDependency injection container used for instantiating objects and resolving
  * dependencies.
  * *
  * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
  * constructor dependencies.
  * *
  * In typical use, application code asks for the dependencies in the constructor and they are
  * resolved by the `Injector`.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
  * *
  * The following example creates an `Injector` configured to create `Engine` and `Car`.
  * *
  * ```typescript
  * class Engine {
  * }
  * *
  * class Car {
  * constructor(public engine:Engine) {}
  * }
  * *
  * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
  * var car = injector.get(Car);
  * expect(car instanceof Car).toBe(true);
  * expect(car.engine instanceof Engine).toBe(true);
  * ```
  * *
  * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
  * resolve all of the object's dependencies automatically.
  * *
 * @abstract
 */
var ReflectiveInjector = (function () {
    function ReflectiveInjector() {
    }
    /**
     *  Turns an array of provider definitions into an array of resolved providers.
      * *
      * A resolution is a process of flattening multiple nested arrays and converting individual
      * providers into an array of {@link ResolvedReflectiveProvider}s.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
      * *
      * ```typescript
      * class Engine {
      * }
      * *
      * class Car {
      * constructor(public engine:Engine) {}
      * }
      * *
      * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
      * *
      * expect(providers.length).toEqual(2);
      * *
      * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
      * expect(providers[0].key.displayName).toBe("Car");
      * expect(providers[0].dependencies.length).toEqual(1);
      * expect(providers[0].factory).toBeDefined();
      * *
      * expect(providers[1].key.displayName).toBe("Engine");
      * });
      * ```
      * *
      * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.resolve = function (providers) {
        return resolveReflectiveProviders(providers);
    };
    /**
     *  Resolves an array of providers and creates an injector from those providers.
      * *
      * The passed-in providers can be an array of `Type`, {@link Provider},
      * or a recursive array of more providers.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
      * *
      * ```typescript
      * class Engine {
      * }
      * *
      * class Car {
      * constructor(public engine:Engine) {}
      * }
      * *
      * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
      * expect(injector.get(Car) instanceof Car).toBe(true);
      * ```
      * *
      * This function is slower than the corresponding `fromResolvedProviders`
      * because it needs to resolve the passed-in providers first.
      * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
        if (parent === void 0) { parent = null; }
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    /**
     *  Creates an injector from previously resolved providers.
      * *
      * This API is the recommended way to construct injectors in performance-sensitive parts.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
      * *
      * ```typescript
      * class Engine {
      * }
      * *
      * class Car {
      * constructor(public engine:Engine) {}
      * }
      * *
      * var providers = ReflectiveInjector.resolve([Car, Engine]);
      * var injector = ReflectiveInjector.fromResolvedProviders(providers);
      * expect(injector.get(Car) instanceof Car).toBe(true);
      * ```
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
        if (parent === void 0) { parent = null; }
        return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
    };
    Object.defineProperty(ReflectiveInjector.prototype, "parent", {
        /**
         *  Parent of this injector.
          * *
          * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
          * -->
          * *
          * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
          * *
          * ```typescript
          * var parent = ReflectiveInjector.resolveAndCreate([]);
          * var child = parent.resolveAndCreateChild([]);
          * expect(child.parent).toBe(parent);
          * ```
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    /**
     *  Resolves an array of providers and creates a child injector from those providers.
      * *
      * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
      * -->
      * *
      * The passed-in providers can be an array of `Type`, {@link Provider},
      * or a recursive array of more providers.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
      * *
      * ```typescript
      * class ParentProvider {}
      * class ChildProvider {}
      * *
      * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
      * var child = parent.resolveAndCreateChild([ChildProvider]);
      * *
      * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
      * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
      * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
      * ```
      * *
      * This function is slower than the corresponding `createChildFromResolved`
      * because it needs to resolve the passed-in providers first.
      * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };
    /**
     *  Creates a child injector from previously resolved providers.
      * *
      * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
      * -->
      * *
      * This API is the recommended way to construct injectors in performance-sensitive parts.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
      * *
      * ```typescript
      * class ParentProvider {}
      * class ChildProvider {}
      * *
      * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
      * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
      * *
      * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
      * var child = parent.createChildFromResolved(childProviders);
      * *
      * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
      * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
      * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
      * ```
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
        return unimplemented();
    };
    /**
     *  Resolves a provider and instantiates an object in the context of the injector.
      * *
      * The created object does not get cached by the injector.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
      * *
      * ```typescript
      * class Engine {
      * }
      * *
      * class Car {
      * constructor(public engine:Engine) {}
      * }
      * *
      * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
      * *
      * var car = injector.resolveAndInstantiate(Car);
      * expect(car.engine).toBe(injector.get(Engine));
      * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
      * ```
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };
    /**
     *  Instantiates an object using a resolved provider in the context of the injector.
      * *
      * The created object does not get cached by the injector.
      * *
      * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
      * *
      * ```typescript
      * class Engine {
      * }
      * *
      * class Car {
      * constructor(public engine:Engine) {}
      * }
      * *
      * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
      * var carProvider = ReflectiveInjector.resolve([Car])[0];
      * var car = injector.instantiateResolved(carProvider);
      * expect(car.engine).toBe(injector.get(Engine));
      * expect(car).not.toBe(injector.instantiateResolved(carProvider));
      * ```
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };
    /**
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
    return ReflectiveInjector;
}());
var ReflectiveInjector_ = (function () {
    /**
     *  Private
     * @param {?} _proto
     * @param {?=} _parent
     */
    function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {
        if (_parent === void 0) { _parent = null; }
        /** @internal */
        this._constructionCounter = 0;
        this._proto = _proto;
        this._parent = _parent;
        this._strategy = _proto._strategy.createInjectorStrategy(this);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
        /**
         * @return {?}
         */
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
        /**
         *  Internal. Do not use.
          * We return `any` not to export the InjectorStrategy type.
         * @return {?}
         */
        get: function () { return this._strategy; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
        var /** @type {?} */ proto = new ReflectiveProtoInjector(providers);
        var /** @type {?} */ inj = new ReflectiveInjector_(proto);
        inj._parent = this;
        return inj;
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
        return this._instantiateProvider(provider);
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._new = function (provider) {
        if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
            throw new CyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
        if (provider.multiProvider) {
            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    };
    /**
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
        var /** @type {?} */ deps = ResolvedReflectiveFactory$$1.dependencies;
        var /** @type {?} */ length = deps.length;
        var /** @type {?} */ d0;
        var /** @type {?} */ d1;
        var /** @type {?} */ d2;
        var /** @type {?} */ d3;
        var /** @type {?} */ d4;
        var /** @type {?} */ d5;
        var /** @type {?} */ d6;
        var /** @type {?} */ d7;
        var /** @type {?} */ d8;
        var /** @type {?} */ d9;
        var /** @type {?} */ d10;
        var /** @type {?} */ d11;
        var /** @type {?} */ d12;
        var /** @type {?} */ d13;
        var /** @type {?} */ d14;
        var /** @type {?} */ d15;
        var /** @type {?} */ d16;
        var /** @type {?} */ d17;
        var /** @type {?} */ d18;
        var /** @type {?} */ d19;
        try {
            d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
            d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
            d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
            d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
            d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
            d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
            d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
            d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
            d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
            d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
            d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
            d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
            d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
            d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
            d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
            d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
            d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
            d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
            d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
            d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
        }
        catch (e) {
            if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var /** @type {?} */ obj;
        try {
            switch (length) {
                case 0:
                    obj = factory();
                    break;
                case 1:
                    obj = factory(d0);
                    break;
                case 2:
                    obj = factory(d0, d1);
                    break;
                case 3:
                    obj = factory(d0, d1, d2);
                    break;
                case 4:
                    obj = factory(d0, d1, d2, d3);
                    break;
                case 5:
                    obj = factory(d0, d1, d2, d3, d4);
                    break;
                case 6:
                    obj = factory(d0, d1, d2, d3, d4, d5);
                    break;
                case 7:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6);
                    break;
                case 8:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
                    break;
                case 9:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
                    break;
                case 10:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
                    break;
                case 11:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
                    break;
                case 12:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
                    break;
                case 13:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
                    break;
                case 14:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
                    break;
                case 15:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
                    break;
                case 16:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
                    break;
                case 17:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
                    break;
                case 18:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
                    break;
                case 19:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
                    break;
                case 20:
                    obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
                    break;
                default:
                    throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
            }
        }
        catch (e) {
            throw new InstantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    /**
     * @param {?} provider
     * @param {?} dep
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
        return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    /**
     * @param {?} key
     * @param {?} lowerBoundVisibility
     * @param {?} upperBoundVisibility
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
        if (key === INJECTOR_KEY) {
            return this;
        }
        if (upperBoundVisibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
        }
        else {
            return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
        }
    };
    /**
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
        if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
        }
        else {
            throw new NoProviderError(this, key);
        }
    };
    /**
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
        var /** @type {?} */ obj = this._strategy.getObjByKeyId(key.id);
        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    /**
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} lowerBoundVisibility
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
        var /** @type {?} */ inj;
        if (lowerBoundVisibility instanceof SkipSelf) {
            inj = this._parent;
        }
        else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            var /** @type {?} */ inj_ = (inj);
            var /** @type {?} */ obj = inj_._strategy.getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
                return obj;
            inj = inj_._parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        }
        else {
            return this._throwOrNull(key, notFoundValue);
        }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                .join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
    return ReflectiveInjector_;
}());
var INJECTOR_KEY = ReflectiveKey.get(Injector);
/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */
function _mapProviders(injector, fn) {
    var /** @type {?} */ res = new Array(injector._proto.numberOfProviders);
    for (var /** @type {?} */ i = 0; i < injector._proto.numberOfProviders; ++i) {
        res[i] = fn(injector._proto.getProviderAtIndex(i));
    }
    return res;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * The default implementation of `ErrorHandler` prints error messages to the `console`. To
  * intercept error handling, write a custom exception handler that replaces this default as
  * appropriate for your app.
  * *
  * ### Example
  * *
  * ```
  * class MyErrorHandler implements ErrorHandler {
  * handleError(error) {
  * // do something with the exception
  * }
  * }
  * *
  * providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
  * })
  * class MyModule {}
  * ```
  * *
 */
var ErrorHandler = (function () {
    /**
     * @param {?=} rethrowError
     */
    function ErrorHandler(rethrowError) {
        if (rethrowError === void 0) { rethrowError = true; }
        /**
         * @internal
         */
        this._console = console;
        this.rethrowError = rethrowError;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype.handleError = function (error) {
        var /** @type {?} */ originalError = this._findOriginalError(error);
        var /** @type {?} */ originalStack = this._findOriginalStack(error);
        var /** @type {?} */ context = this._findContext(error);
        this._console.error("EXCEPTION: " + this._extractMessage(error));
        if (originalError) {
            this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
        }
        if (originalStack) {
            this._console.error('ORIGINAL STACKTRACE:');
            this._console.error(originalStack);
        }
        if (context) {
            this._console.error('ERROR CONTEXT:');
            this._console.error(context);
        }
        // We rethrow exceptions, so operations like 'bootstrap' will result in an error
        // when an error happens. If we do not rethrow, bootstrap will always succeed.
        if (this.rethrowError)
            throw error;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._extractMessage = function (error) {
        return error instanceof Error ? error.message : error.toString();
    };
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findContext = function (error) {
        if (error) {
            return error.context ? error.context :
                this._findContext(((error)).originalError);
        }
        return null;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findOriginalError = function (error) {
        var /** @type {?} */ e = ((error)).originalError;
        while (e && ((e)).originalError) {
            e = ((e)).originalError;
        }
        return e;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findOriginalStack = function (error) {
        if (!(error instanceof Error))
            return null;
        var /** @type {?} */ e = error;
        var /** @type {?} */ stack = e.stack;
        while (e instanceof Error && ((e)).originalError) {
            e = ((e)).originalError;
            if (e instanceof Error && e.stack) {
                stack = e.stack;
            }
        }
        return stack;
    };
    return ErrorHandler;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Wraps Javascript Objects
 */
var StringMapWrapper = (function () {
    function StringMapWrapper() {
    }
    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.merge = function (m1, m2) {
        var /** @type {?} */ m = {};
        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
        }
        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
        }
        return m;
    };
    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.equals = function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());
var ListWrapper = (function () {
    function ListWrapper() {
    }
    /**
     * @param {?} arr
     * @param {?} condition
     * @return {?}
     */
    ListWrapper.findLast = function (arr, condition) {
        for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
            if (condition(arr[i])) {
                return arr[i];
            }
        }
        return null;
    };
    /**
     * @param {?} list
     * @param {?} items
     * @return {?}
     */
    ListWrapper.removeAll = function (list, items) {
        for (var /** @type {?} */ i = 0; i < items.length; ++i) {
            var /** @type {?} */ index = list.indexOf(items[i]);
            if (index > -1) {
                list.splice(index, 1);
            }
        }
    };
    /**
     * @param {?} list
     * @param {?} el
     * @return {?}
     */
    ListWrapper.remove = function (list, el) {
        var /** @type {?} */ index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
            return true;
        }
        return false;
    };
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    ListWrapper.equals = function (a, b) {
        if (a.length != b.length)
            return false;
        for (var /** @type {?} */ i = 0; i < a.length; ++i) {
            if (a[i] !== b[i])
                return false;
        }
        return true;
    };
    /**
     * @param {?} list
     * @return {?}
     */
    ListWrapper.flatten = function (list) {
        return list.reduce(function (flat, item) {
            var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
            return ((flat)).concat(flatItem);
        }, []);
    };
    return ListWrapper;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) &&
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */ item1 = iterator1.next();
        var /** @type {?} */ item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
        var /** @type {?} */ item = void 0;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}

/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 * @param {?} obj
 * @return {?}
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return !!obj && typeof obj.then === 'function';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A function that will be executed when an application is initialized.
 * @experimental
 */
var APP_INITIALIZER = new OpaqueToken('Application Initializer');
/**
 *  A class that reflects the state of running {@link APP_INITIALIZER}s.
  * *
 */
var ApplicationInitStatus = (function () {
    /**
     * @param {?} appInits
     */
    function ApplicationInitStatus(appInits) {
        var _this = this;
        this._done = false;
        var asyncInitPromises = [];
        if (appInits) {
            for (var i = 0; i < appInits.length; i++) {
                var initResult = appInits[i]();
                if (isPromise(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
        if (asyncInitPromises.length === 0) {
            this._done = true;
        }
    }
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
        /**
         * @return {?}
         */
        get: function () { return this._done; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
        /**
         * @return {?}
         */
        get: function () { return this._donePromise; },
        enumerable: true,
        configurable: true
    });
    ApplicationInitStatus.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ApplicationInitStatus.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
    ]; };
    return ApplicationInitStatus;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
 * using this token.
 * @experimental
 */
var APP_ID = new OpaqueToken('AppId');
/**
 * @return {?}
 */
function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * @experimental
 */
var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: /** @type {?} */ ([]),
};
/**
 * @return {?}
 */
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * @experimental
 */
var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * @experimental
 */
var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
/**
 * A token which indicates the root directory of the application
 * @experimental
 */
var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Console = (function () {
    function Console() {
    }
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.log = function (message) { print(message); };
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.warn = function (message) { warn(message); };
    Console.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Console.ctorParameters = function () { return []; };
    return Console;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$4 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Indicates that a component is still being loaded in a synchronous compile.
  * *
 */
var ComponentStillLoadingError = (function (_super) {
    __extends$4(ComponentStillLoadingError, _super);
    /**
     * @param {?} compType
     */
    function ComponentStillLoadingError(compType) {
        _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
        this.compType = compType;
    }
    return ComponentStillLoadingError;
}(BaseError));
/**
 *  Combination of NgModuleFactory and ComponentFactorys.
  * *
 */

/**
 * @return {?}
 */
function _throwError() {
    throw new Error("Runtime compiler is not loaded");
}
/**
 *  Low-level service for running the angular compiler during runtime
  * to create {@link ComponentFactory}s, which
  * can later be used to create and render a Component instance.
  * *
  * Each `@NgModule` provides an own `Compiler` to its injector,
  * that will use the directives/pipes of the ng module for compilation
  * of components.
 */
var Compiler = (function () {
    function Compiler() {
    }
    /**
     *  Compiles the given NgModule and all of its components. All templates of the components listed
      * in `entryComponents`
      * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
    /**
     *  Compiles the given NgModule and all of its components
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
    /**
     *  Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
        throw _throwError();
    };
    /**
     *  Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
        throw _throwError();
    };
    /**
     *  Exposes the CSS-style selectors that have been used in `ngContent` directives within
      * the template of the given component.
      * This is used by the `upgrade` library to compile the appropriate transclude content
      * in the Angular 1 wrapper component.
     * @param {?} component
     * @return {?}
     */
    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
    /**
     *  Clears all caches.
     * @return {?}
     */
    Compiler.prototype.clearCache = function () { };
    /**
     *  Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */
    Compiler.prototype.clearCacheFor = function (type) { };
    Compiler.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Compiler.ctorParameters = function () { return []; };
    return Compiler;
}());
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * @experimental
 */
var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
/**
 *  A factory for creating a Compiler
  * *
 * @abstract
 */
var CompilerFactory = (function () {
    function CompilerFactory() {
    }
    /**
     * @abstract
     * @param {?=} options
     * @return {?}
     */
    CompilerFactory.prototype.createCompiler = function (options) { };
    return CompilerFactory;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 *
 * @security Permitting direct access to the DOM can make your application more vulnerable to
 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
 * [Security Guide](http://g.co/ng/security).
 *
 * @stable
 */
// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
// i.e. users have to ask for what they need. With that, we can build better analysis tools
// and could do better codegen in the future.
var ElementRef = (function () {
    /**
     * @param {?} nativeElement
     */
    function ElementRef(nativeElement) {
        this.nativeElement = nativeElement;
    }
    return ElementRef;
}());

let objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
};
let root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
let freeGlobal = objectTypes[typeof global] && global;
if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
}

function isFunction(x) {
    return typeof x === 'function';
}

const isArray = Array.isArray || ((x) => x && typeof x.length === 'number');

function isObject(x) {
    return x != null && typeof x === 'object';
}

// typeof any so that it we don't have to cast when comparing a result to the error object
var errorObject = { e: {} };

let tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.e = e;
        return errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}

/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
class UnsubscriptionError extends Error {
    constructor(errors) {
        super();
        this.errors = errors;
        const err = Error.call(this, errors ?
            `${errors.length} errors occurred during unsubscription:
  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\n  ')}` : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
}

/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
class Subscription {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    constructor(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    unsubscribe() {
        let hasErrors = false;
        let errors;
        if (this.closed) {
            return;
        }
        this.closed = true;
        const { _unsubscribe, _subscriptions } = this;
        this._subscriptions = null;
        if (isFunction(_unsubscribe)) {
            let trial = tryCatch(_unsubscribe).call(this);
            if (trial === errorObject) {
                hasErrors = true;
                (errors = errors || []).push(errorObject.e);
            }
        }
        if (isArray(_subscriptions)) {
            let index = -1;
            const len = _subscriptions.length;
            while (++index < len) {
                const sub = _subscriptions[index];
                if (isObject(sub)) {
                    let trial = tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        let err = errorObject.e;
                        if (err instanceof UnsubscriptionError) {
                            errors = errors.concat(err.errors);
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError(errors);
        }
    }
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    add(teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        let sub = teardown;
        switch (typeof teardown) {
            case 'function':
                sub = new Subscription(teardown);
            case 'object':
                if (sub.closed || typeof sub.unsubscribe !== 'function') {
                    break;
                }
                else if (this.closed) {
                    sub.unsubscribe();
                }
                else {
                    (this._subscriptions || (this._subscriptions = [])).push(sub);
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        return sub;
    }
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    remove(subscription) {
        // HACK: This might be redundant because of the logic in `add()`
        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
            return;
        }
        const subscriptions = this._subscriptions;
        if (subscriptions) {
            const subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    }
}
Subscription.EMPTY = (function (empty) {
    empty.closed = true;
    return empty;
}(new Subscription()));

const empty = {
    closed: true,
    next(value) { },
    error(err) { throw err; },
    complete() { }
};

const Symbol$1 = root.Symbol;
const $$rxSubscriber = (typeof Symbol$1 === 'function' && typeof Symbol$1.for === 'function') ?
    Symbol$1.for('rxSubscriber') : '@@rxSubscriber';

/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
class Subscriber extends Subscription {
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    constructor(destinationOrNext, error, complete) {
        super();
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    [$$rxSubscriber]() { return this; }
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    static create(next, error, complete) {
        const subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    }
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    next(value) {
        if (!this.isStopped) {
            this._next(value);
        }
    }
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    error(err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    }
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    complete() {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    }
    unsubscribe() {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        super.unsubscribe();
    }
    _next(value) {
        this.destination.next(value);
    }
    _error(err) {
        this.destination.error(err);
        this.unsubscribe();
    }
    _complete() {
        this.destination.complete();
        this.unsubscribe();
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class SafeSubscriber extends Subscriber {
    constructor(_parent, observerOrNext, error, complete) {
        super();
        this._parent = _parent;
        let next;
        let context = this;
        if (isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            context = observerOrNext;
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (isFunction(context.unsubscribe)) {
                this.add(context.unsubscribe.bind(context));
            }
            context.unsubscribe = this.unsubscribe.bind(this);
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    next(value) {
        if (!this.isStopped && this._next) {
            const { _parent } = this;
            if (!_parent.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parent, this._next, value)) {
                this.unsubscribe();
            }
        }
    }
    error(err) {
        if (!this.isStopped) {
            const { _parent } = this;
            if (this._error) {
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parent, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parent.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parent.syncErrorValue = err;
                _parent.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    }
    complete() {
        if (!this.isStopped) {
            const { _parent } = this;
            if (this._complete) {
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._complete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parent, this._complete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    }
    __tryOrUnsub(fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    }
    __tryOrSetError(parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    }
    _unsubscribe() {
        const { _parent } = this;
        this._context = null;
        this._parent = null;
        _parent.unsubscribe();
    }
}

function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[$$rxSubscriber]) {
            return nextOrObserver[$$rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber();
    }
    return new Subscriber(nextOrObserver, error, complete);
}

function getSymbolObservable(context) {
    let $$observable;
    let Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
const $$observable = getSymbolObservable(root);

/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
class Observable {
    /**
     * @constructor
     * @param {Function} subscribe the function that is  called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    constructor(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    lift(operator) {
        const observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    }
    /**
     * Registers handlers for handling emitted values, error and completions from the observable, and
     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
     * @method subscribe
     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled
     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     */
    subscribe(observerOrNext, error, complete) {
        const { operator } = this;
        const sink = toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this);
        }
        else {
            sink.add(this._subscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    }
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    forEach(next, PromiseCtor) {
        if (!PromiseCtor) {
            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {
                PromiseCtor = root.Rx.config.Promise;
            }
            else if (root.Promise) {
                PromiseCtor = root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor((resolve, reject) => {
            const subscription = this.subscribe((value) => {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    }
    _subscribe(subscriber) {
        return this.source.subscribe(subscriber);
    }
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    [$$observable]() {
        return this;
    }
}
// HACK: Since TypeScript inherits static properties too, we have to
// fight against TypeScript here so Subject can have a different static create signature
/**
 * Creates a new cold Observable by calling the Observable constructor
 * @static true
 * @owner Observable
 * @method create
 * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
 * @return {Observable} a new cold observable
 */
Observable.create = (subscribe) => {
    return new Observable(subscribe);
};

/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
class ObjectUnsubscribedError extends Error {
    constructor() {
        const err = super('object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class SubjectSubscription extends Subscription {
    constructor(subject, subscriber) {
        super();
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    unsubscribe() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        const subject = this.subject;
        const observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        const subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    }
}

/**
 * @class SubjectSubscriber<T>
 */
class SubjectSubscriber extends Subscriber {
    constructor(destination) {
        super(destination);
        this.destination = destination;
    }
}
/**
 * @class Subject<T>
 */
class Subject extends Observable {
    constructor() {
        super();
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    [$$rxSubscriber]() {
        return new SubjectSubscriber(this);
    }
    lift(operator) {
        const subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    }
    next(value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            const { observers } = this;
            const len = observers.length;
            const copy = observers.slice();
            for (let i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    }
    error(err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        const { observers } = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    }
    complete() {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        this.isStopped = true;
        const { observers } = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    }
    unsubscribe() {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    }
    _subscribe(subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription(this, subscriber);
        }
    }
    asObservable() {
        const observable = new Observable();
        observable.source = this;
        return observable;
    }
}
Subject.create = (destination, source) => {
    return new AnonymousSubject(destination, source);
};
/**
 * @class AnonymousSubject<T>
 */
class AnonymousSubject extends Subject {
    constructor(destination, source) {
        super();
        this.destination = destination;
        this.source = source;
    }
    next(value) {
        const { destination } = this;
        if (destination && destination.next) {
            destination.next(value);
        }
    }
    error(err) {
        const { destination } = this;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    }
    complete() {
        const { destination } = this;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    }
    _subscribe(subscriber) {
        const { source } = this;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription.EMPTY;
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$6 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Use by directives and components to emit custom Events.
  * *
  * ### Examples
  * *
  * In the following example, `Zippy` alternatively emits `open` and `close` events when its
  * title gets clicked:
  * *
  * ```
  * selector: 'zippy',
  * template: `
  * <div class="zippy">
  * <div (click)="toggle()">Toggle</div>
  * <div [hidden]="!visible">
  * <ng-content></ng-content>
  * </div>
  * </div>`})
  * export class Zippy {
  * visible: boolean = true;
  * @Output() open: EventEmitter<any> = new EventEmitter();
  * @Output() close: EventEmitter<any> = new EventEmitter();
  * *
  * toggle() {
  * this.visible = !this.visible;
  * if (this.visible) {
  * this.open.emit(null);
  * } else {
  * this.close.emit(null);
  * }
  * }
  * }
  * ```
  * *
  * The events payload can be accessed by the parameter `$event` on the components output event
  * handler:
  * *
  * ```
  * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
  * ```
  * *
  * Uses Rx.Observable but provides an adapter to make it work as specified here:
  * https://github.com/jhusain/observable-spec
  * *
  * Once a reference implementation of the spec is available, switch to it.
 */
var EventEmitter = (function (_super) {
    __extends$6(EventEmitter, _super);
    /**
     *  Creates an instance of [EventEmitter], which depending on [isAsync],
      * delivers events synchronously or asynchronously.
     * @param {?=} isAsync
     */
    function EventEmitter(isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        _super.call(this);
        this.__isAsync = isAsync;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
    /**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
        var /** @type {?} */ schedulerFn;
        var /** @type {?} */ errorFn = function (err) { return null; };
        var /** @type {?} */ completeFn = function () { return null; };
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () { return generatorOrNext.next(value); });
            } : function (value) { generatorOrNext.next(value); };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                    function (err) { generatorOrNext.error(err); };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                    function () { generatorOrNext.complete(); };
            }
        }
        else {
            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                function (value) { generatorOrNext(value); };
            if (error) {
                errorFn =
                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
            }
        }
        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
}(Subject));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  An injectable service for executing work inside or outside of the Angular zone.
  * *
  * The most common use of this service is to optimize performance when starting a work consisting of
  * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
  * Angular. Such tasks can be kicked off via {@link runOutsideAngular} and if needed, these tasks
  * can reenter the Angular zone via {@link run}.
  * *
  * <!-- TODO: add/fix links to:
  * - docs explaining zones and the use of zones in Angular and change-detection
  * - link to runOutsideAngular/run (throughout this file!)
  * -->
  * *
  * ### Example
  * ```
  * import {Component, NgZone} from '@angular/core';
  * import {NgIf} from '@angular/common';
  * *
  * selector: 'ng-zone-demo'.
  * template: `
  * <h2>Demo: NgZone</h2>
  * *
  * <p>Progress: {{progress}}%</p>
  * <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
  * *
  * <button (click)="processWithinAngularZone()">Process within Angular zone</button>
  * <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
  * `,
  * })
  * export class NgZoneDemo {
  * progress: number = 0;
  * label: string;
  * *
  * constructor(private _ngZone: NgZone) {}
  * *
  * // Loop inside the Angular zone
  * // so the UI DOES refresh after each setTimeout cycle
  * processWithinAngularZone() {
  * this.label = 'inside';
  * this.progress = 0;
  * this._increaseProgress(() => console.log('Inside Done!'));
  * }
  * *
  * // Loop outside of the Angular zone
  * // so the UI DOES NOT refresh after each setTimeout cycle
  * processOutsideOfAngularZone() {
  * this.label = 'outside';
  * this.progress = 0;
  * this._ngZone.runOutsideAngular(() => {
  * this._increaseProgress(() => {
  * // reenter the Angular zone and display done
  * this._ngZone.run(() => {console.log('Outside Done!') });
  * }}));
  * }
  * *
  * _increaseProgress(doneCallback: () => void) {
  * this.progress += 1;
  * console.log(`Current progress: ${this.progress}%`);
  * *
  * if (this.progress < 100) {
  * window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
  * } else {
  * doneCallback();
  * }
  * }
  * }
  * ```
 */
var NgZone = (function () {
    /**
     * @param {?} __0
     */
    function NgZone(_a) {
        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
        this._hasPendingMicrotasks = false;
        this._hasPendingMacrotasks = false;
        this._isStable = true;
        this._nesting = 0;
        this._onUnstable = new EventEmitter(false);
        this._onMicrotaskEmpty = new EventEmitter(false);
        this._onStable = new EventEmitter(false);
        this._onErrorEvents = new EventEmitter(false);
        if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
        }
        Zone.assertZonePatched();
        this.outer = this.inner = Zone.current;
        if (Zone['wtfZoneSpec']) {
            this.inner = this.inner.fork(Zone['wtfZoneSpec']);
        }
        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
        }
        this.forkInnerZoneWithAngularBehavior();
    }
    /**
     * @return {?}
     */
    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
    /**
     * @return {?}
     */
    NgZone.assertInAngularZone = function () {
        if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
        }
    };
    /**
     * @return {?}
     */
    NgZone.assertNotInAngularZone = function () {
        if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
        }
    };
    /**
     *  Executes the `fn` function synchronously within the Angular zone and returns value returned by
      * the function.
      * *
      * Running functions via `run` allows you to reenter Angular zone from a task that was executed
      * outside of the Angular zone (typically started via {@link runOutsideAngular}).
      * *
      * Any future tasks or microtasks scheduled from within this function will continue executing from
      * within the Angular zone.
      * *
      * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
    /**
     *  Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
      * rethrown.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
    /**
     *  Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
      * the function.
      * *
      * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
      * doesn't trigger Angular change-detection or is subject to Angular's error handling.
      * *
      * Any future tasks or microtasks scheduled from within this function will continue executing from
      * outside of the Angular zone.
      * *
      * Use {@link run} to reenter the Angular zone and do work that updates the application model.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
    Object.defineProperty(NgZone.prototype, "onUnstable", {
        /**
         *  Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         * @return {?}
         */
        get: function () { return this._onUnstable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
        /**
         *  Notifies when there is no more microtasks enqueue in the current VM Turn.
          * This is a hint for Angular to do change detection, which may enqueue more microtasks.
          * For this reason this event can fire multiple times per VM Turn.
         * @return {?}
         */
        get: function () { return this._onMicrotaskEmpty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onStable", {
        /**
         *  Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
          * implies we are about to relinquish VM turn.
          * This event gets called just once.
         * @return {?}
         */
        get: function () { return this._onStable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "onError", {
        /**
         *  Notify that an error has been delivered.
         * @return {?}
         */
        get: function () { return this._onErrorEvents; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "isStable", {
        /**
         *  Whether there are no outstanding microtasks or macrotasks.
         * @return {?}
         */
        get: function () { return this._isStable; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
        /**
         * @return {?}
         */
        get: function () { return this._hasPendingMicrotasks; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
        /**
         * @return {?}
         */
        get: function () { return this._hasPendingMacrotasks; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgZone.prototype.checkStable = function () {
        var _this = this;
        if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
            try {
                this._nesting++;
                this._onMicrotaskEmpty.emit(null);
            }
            finally {
                this._nesting--;
                if (!this._hasPendingMicrotasks) {
                    try {
                        this.runOutsideAngular(function () { return _this._onStable.emit(null); });
                    }
                    finally {
                        this._isStable = true;
                    }
                }
            }
        }
    };
    /**
     * @return {?}
     */
    NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
        var _this = this;
        this.inner = this.inner.fork({
            name: 'angular',
            properties: /** @type {?} */ ({ 'isAngularZone': true }),
            onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                try {
                    _this.onEnter();
                    return delegate.invokeTask(target, task, applyThis, applyArgs);
                }
                finally {
                    _this.onLeave();
                }
            },
            onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                try {
                    _this.onEnter();
                    return delegate.invoke(target, callback, applyThis, applyArgs, source);
                }
                finally {
                    _this.onLeave();
                }
            },
            onHasTask: function (delegate, current, target, hasTaskState) {
                delegate.hasTask(target, hasTaskState);
                if (current === target) {
                    // We are only interested in hasTask events which originate from our zone
                    // (A child hasTask event is not interesting to us)
                    if (hasTaskState.change == 'microTask') {
                        _this.setHasMicrotask(hasTaskState.microTask);
                    }
                    else if (hasTaskState.change == 'macroTask') {
                        _this.setHasMacrotask(hasTaskState.macroTask);
                    }
                }
            },
            onHandleError: function (delegate, current, target, error) {
                delegate.handleError(target, error);
                _this.triggerError(error);
                return false;
            }
        });
    };
    /**
     * @return {?}
     */
    NgZone.prototype.onEnter = function () {
        this._nesting++;
        if (this._isStable) {
            this._isStable = false;
            this._onUnstable.emit(null);
        }
    };
    /**
     * @return {?}
     */
    NgZone.prototype.onLeave = function () {
        this._nesting--;
        this.checkStable();
    };
    /**
     * @param {?} hasMicrotasks
     * @return {?}
     */
    NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
        this._hasPendingMicrotasks = hasMicrotasks;
        this.checkStable();
    };
    /**
     * @param {?} hasMacrotasks
     * @return {?}
     */
    NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
    /**
     * @param {?} error
     * @return {?}
     */
    NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
    return NgZone;
}());

var AnimationQueue = (function () {
    /**
     * @param {?} _zone
     */
    function AnimationQueue(_zone) {
        this._zone = _zone;
        this.entries = [];
    }
    /**
     * @param {?} player
     * @return {?}
     */
    AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };
    /**
     * @return {?}
     */
    AnimationQueue.prototype.flush = function () {
        var _this = this;
        // given that each animation player may set aside
        // microtasks and rely on DOM-based events, this
        // will cause Angular to run change detection after
        // each request. This sidesteps the issue. If a user
        // hooks into an animation via (@anim.start) or (@anim.done)
        // then those methods will automatically trigger change
        // detection by wrapping themselves inside of a zone
        if (this.entries.length) {
            this._zone.runOutsideAngular(function () {
                // this code is wrapped into a single promise such that the
                // onStart and onDone player callbacks are triggered outside
                // of the digest cycle of animations
                Promise.resolve(null).then(function () { return _this._triggerAnimations(); });
            });
        }
    };
    /**
     * @return {?}
     */
    AnimationQueue.prototype._triggerAnimations = function () {
        NgZone.assertNotInAngularZone();
        while (this.entries.length) {
            var /** @type {?} */ player = this.entries.shift();
            // in the event that an animation throws an error then we do
            // not want to re-run animations on any previous animations
            // if they have already been kicked off beforehand
            if (!player.hasStarted()) {
                player.play();
            }
        }
    };
    AnimationQueue.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AnimationQueue.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    return AnimationQueue;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultIterableDifferFactory = (function () {
    function DefaultIterableDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
    /**
     * @param {?} cdRef
     * @param {?=} trackByFn
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
    };
    return DefaultIterableDifferFactory;
}());
var trackByIdentity = function (index, item) { return item; };
/**
 * @stable
 */
var DefaultIterableDiffer = (function () {
    /**
     * @param {?=} _trackByFn
     */
    function DefaultIterableDiffer(_trackByFn) {
        this._trackByFn = _trackByFn;
        this._length = null;
        this._collection = null;
        this._linkedRecords = null;
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = this._trackByFn || trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
        /**
         * @return {?}
         */
        get: function () { return this._collection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._length; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
        var /** @type {?} */ nextIt = this._itHead;
        var /** @type {?} */ nextRemove = this._removalsHead;
        var /** @type {?} */ addRemoveOffset = 0;
        var /** @type {?} */ moveOffsets = null;
        while (nextIt || nextRemove) {
            // Figure out which is the next record to process
            // Order: remove, add, move
            var /** @type {?} */ record = !nextRemove ||
                nextIt &&
                    nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
                nextIt :
                nextRemove;
            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var /** @type {?} */ currentIndex = record.currentIndex;
            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
            if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
            }
            else {
                nextIt = nextIt._next;
                if (record.previousIndex == null) {
                    addRemoveOffset++;
                }
                else {
                    // INVARIANT:  currentIndex < previousIndex
                    if (!moveOffsets)
                        moveOffsets = [];
                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                    var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
                    if (localMovePreviousIndex != localCurrentIndex) {
                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                            var /** @type {?} */ index = offset + i;
                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                moveOffsets[i] = offset + 1;
                            }
                        }
                        var /** @type {?} */ previousIndex = record.previousIndex;
                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                    }
                }
            }
            if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
        var /** @type {?} */ record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.diff = function (collection) {
        if (isBlank(collection))
            collection = [];
        if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + collection + "'");
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    };
    /**
     * @return {?}
     */
    DefaultIterableDiffer.prototype.onDestroy = function () { };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.check = function (collection) {
        var _this = this;
        this._reset();
        var /** @type {?} */ record = this._itHead;
        var /** @type {?} */ mayBeDirty = false;
        var /** @type {?} */ index;
        var /** @type {?} */ item;
        var /** @type {?} */ itemTrackBy;
        if (Array.isArray(collection)) {
            var /** @type {?} */ list = collection;
            this._length = collection.length;
            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
                item = list[index_1];
                itemTrackBy = this._trackByFn(index_1, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index_1);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            iterateListLike(collection, function (item /** TODO #9100 */) {
                itemTrackBy = _this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = _this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        _this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            });
            this._length = index;
        }
        this._truncate(record);
        this._collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        /**
         * @return {?}
         */
        get: function () {
            return this._additionsHead !== null || this._movesHead !== null ||
                this._removalsHead !== null || this._identityChangesHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  Reset the state of the change objects to show no changes. This means set previousKey to
      * currentKey, and clear all of the queues (additions, moves, removals).
      * Set the previousIndexes of moved and added items to their currentIndexes
      * Reset the list of additions, moves and removals
      * *
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            var /** @type {?} */ nextRecord = void 0;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
        }
    };
    /**
     *  This is the core function which handles differences between collections.
      * *
      * - `record` is the record which we saw at this position last time. If null then it is a new
      * item.
      * - `item` is the current item in the collection
      * - `index` is the position of the item in the collection
      * *
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
        // The previous record after which we will append the current one.
        var /** @type {?} */ previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        }
        else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                // It is a new item: add it.
                record =
                    this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    };
    /**
     *  This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
      * *
      * Use case: `[a, a]` => `[b, a, a]`
      * *
      * If we did not have this check then the insertion of `b` would:
      * 1) evict first `a`
      * 2) insert `b` at `0` index.
      * 3) leave `a` at index `1` as is. <-- this is wrong!
      * 3) reinsert `a` at index 2. <-- this is wrong!
      * *
      * The correct behavior is:
      * 1) evict first `a`
      * 2) insert `b` at `0` index.
      * 3) reinsert `a` at index 1.
      * 3) move `a` at from `1` to `2`.
      * *
      * *
      * Double check that we have not evicted a duplicate item. We need to check if the item type may
      * have already been removed:
      * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
      * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
      * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
      * at the end.
      * *
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, record._prev, index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    /**
     *  Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
      * *
      * - `record` The first excess {@link CollectionChangeRecord}.
      * *
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._truncate = function (record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    };
    /**
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /**
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /**
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // todo(vicb)
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        }
        else {
            // todo(vicb)
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    /**
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
        // todo(vicb)
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
        // todo(vicb)
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._remove = function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._unlink = function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prev;
        var /** @type {?} */ next = record._next;
        // todo(vicb)
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    };
    /**
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
        // todo(vicb)
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // todo(vicb)
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        }
        else {
            // todo(vicb)
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // todo(vicb)
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            // todo(vicb)
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    /**
     * @param {?} record
     * @param {?} item
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        }
        else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    };
    /**
     * @return {?}
     */
    DefaultIterableDiffer.prototype.toString = function () {
        var /** @type {?} */ list = [];
        this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
        var /** @type {?} */ previous = [];
        this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
        var /** @type {?} */ additions = [];
        this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
        var /** @type {?} */ moves = [];
        this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
        var /** @type {?} */ removals = [];
        this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
        var /** @type {?} */ identityChanges = [];
        this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
        return 'collection: ' + list.join(', ') + '\n' +
            'previous: ' + previous.join(', ') + '\n' +
            'additions: ' + additions.join(', ') + '\n' +
            'moves: ' + moves.join(', ') + '\n' +
            'removals: ' + removals.join(', ') + '\n' +
            'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
}());
/**
 * @stable
 */
var CollectionChangeRecord = (function () {
    /**
     * @param {?} item
     * @param {?} trackById
     */
    function CollectionChangeRecord(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._prev = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._prevDup = null;
        /** @internal */
        this._nextDup = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextMoved = null;
        /** @internal */
        this._nextIdentityChange = null;
    }
    /**
     * @return {?}
     */
    CollectionChangeRecord.prototype.toString = function () {
        return this.previousIndex === this.currentIndex ? stringify(this.item) :
            stringify(this.item) + '[' +
                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return CollectionChangeRecord;
}());
// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
var _DuplicateItemRecordList = (function () {
    function _DuplicateItemRecordList() {
        /** @internal */
        this._head = null;
        /** @internal */
        this._tail = null;
    }
    /**
     *  Append the record to the list of duplicates.
      * *
      * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.add = function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            // todo(vicb)
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    /**
     * @param {?} trackById
     * @param {?} afterIndex
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
        var /** @type {?} */ record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((afterIndex === null || afterIndex < record.currentIndex) &&
                looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    };
    /**
     *  Remove one {@link CollectionChangeRecord} from the list of duplicates.
      * *
      * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.remove = function (record) {
        // todo(vicb)
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        var /** @type {?} */ prev = record._prevDup;
        var /** @type {?} */ next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
}());
var _DuplicateMap = (function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    /**
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.put = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ duplicates = this.map.get(key);
        if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    /**
     *  Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
      * have already iterated over, we use the afterIndex to pretend it is not there.
      * *
      * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
      * have any more `a`s needs to return the last `a` not the first or second.
     * @param {?} trackById
     * @param {?=} afterIndex
     * @return {?}
     */
    _DuplicateMap.prototype.get = function (trackById, afterIndex) {
        if (afterIndex === void 0) { afterIndex = null; }
        var /** @type {?} */ key = trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, afterIndex) : null;
    };
    /**
     *  Removes a {@link CollectionChangeRecord} from the list of duplicates.
      * *
      * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.remove = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        /**
         * @return {?}
         */
        get: function () { return this.map.size === 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
    /**
     * @return {?}
     */
    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
    return _DuplicateMap;
}());
/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var /** @type {?} */ previousIndex = item.previousIndex;
    if (previousIndex === null)
        return previousIndex;
    var /** @type {?} */ moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultKeyValueDifferFactory = (function () {
    function DefaultKeyValueDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
    /**
     * @param {?} cdRef
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
    return DefaultKeyValueDifferFactory;
}());
var DefaultKeyValueDiffer = (function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        /**
         * @return {?}
         */
        get: function () {
            return this._additionsHead !== null || this._changesHead !== null ||
                this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.diff = function (map) {
        if (!map) {
            map = new Map();
        }
        else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + map + "'");
        }
        return this.check(map) ? this : null;
    };
    /**
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
    /**
     * @param {?} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.check = function (map) {
        var _this = this;
        this._reset();
        var /** @type {?} */ records = this._records;
        var /** @type {?} */ oldSeqRecord = this._mapHead;
        var /** @type {?} */ lastOldSeqRecord = null;
        var /** @type {?} */ lastNewSeqRecord = null;
        var /** @type {?} */ seqChanged = false;
        this._forEach(map, function (value, key) {
            var /** @type {?} */ newSeqRecord;
            if (oldSeqRecord && key === oldSeqRecord.key) {
                newSeqRecord = oldSeqRecord;
                _this._maybeAddToChanges(newSeqRecord, value);
            }
            else {
                seqChanged = true;
                if (oldSeqRecord !== null) {
                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
                    _this._addToRemovals(oldSeqRecord);
                }
                if (records.has(key)) {
                    newSeqRecord = records.get(key);
                    _this._maybeAddToChanges(newSeqRecord, value);
                }
                else {
                    newSeqRecord = new KeyValueChangeRecord(key);
                    records.set(key, newSeqRecord);
                    newSeqRecord.currentValue = value;
                    _this._addToAdditions(newSeqRecord);
                }
            }
            if (seqChanged) {
                if (_this._isInRemovals(newSeqRecord)) {
                    _this._removeFromRemovals(newSeqRecord);
                }
                if (lastNewSeqRecord == null) {
                    _this._mapHead = newSeqRecord;
                }
                else {
                    lastNewSeqRecord._next = newSeqRecord;
                }
            }
            lastOldSeqRecord = oldSeqRecord;
            lastNewSeqRecord = newSeqRecord;
            oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
        });
        this._truncate(lastOldSeqRecord, oldSeqRecord);
        return this.isDirty;
    };
    /**
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            // Record the state of the mapping
            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = this._removalsTail = null;
        }
    };
    /**
     * @param {?} lastRecord
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
        while (record !== null) {
            if (lastRecord === null) {
                this._mapHead = null;
            }
            else {
                lastRecord._next = null;
            }
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(record);
            lastRecord = record;
            record = nextRecord;
        }
        for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
            rec.previousValue = rec.currentValue;
            rec.currentValue = null;
            this._records.delete(rec.key);
        }
    };
    /**
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
        if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
        return record === this._removalsHead || record._nextRemoved !== null ||
            record._prevRemoved !== null;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
        if (this._removalsHead === null) {
            this._removalsHead = this._removalsTail = record;
        }
        else {
            this._removalsTail._nextRemoved = record;
            record._prevRemoved = this._removalsTail;
            this._removalsTail = record;
        }
    };
    /**
     * @param {?} prev
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
        var /** @type {?} */ next = record._next;
        if (prev === null) {
            this._mapHead = next;
        }
        else {
            prev._next = next;
        }
        record._next = null;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        record._prevRemoved = record._nextRemoved = null;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            this._additionsTail._nextAdded = record;
            this._additionsTail = record;
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            this._changesTail._nextChanged = record;
            this._changesTail = record;
        }
    };
    /**
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.toString = function () {
        var /** @type {?} */ items = [];
        var /** @type {?} */ previous = [];
        var /** @type {?} */ changes = [];
        var /** @type {?} */ additions = [];
        var /** @type {?} */ removals = [];
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            items.push(stringify(record));
        }
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            previous.push(stringify(record));
        }
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            changes.push(stringify(record));
        }
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            additions.push(stringify(record));
        }
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            removals.push(stringify(record));
        }
        return 'map: ' + items.join(', ') + '\n' +
            'previous: ' + previous.join(', ') + '\n' +
            'additions: ' + additions.join(', ') + '\n' +
            'changes: ' + changes.join(', ') + '\n' +
            'removals: ' + removals.join(', ') + '\n';
    };
    /**
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
        }
    };
    return DefaultKeyValueDiffer;
}());
/**
 * @stable
 */
var KeyValueChangeRecord = (function () {
    /**
     * @param {?} key
     */
    function KeyValueChangeRecord(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /** @internal */
        this._nextPrevious = null;
        /** @internal */
        this._next = null;
        /** @internal */
        this._nextAdded = null;
        /** @internal */
        this._nextRemoved = null;
        /** @internal */
        this._prevRemoved = null;
        /** @internal */
        this._nextChanged = null;
    }
    /**
     * @return {?}
     */
    KeyValueChangeRecord.prototype.toString = function () {
        return looseIdentical(this.previousValue, this.currentValue) ?
            stringify(this.key) :
            (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
                stringify(this.currentValue) + ']');
    };
    return KeyValueChangeRecord;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 */
var IterableDiffers = (function () {
    /**
     * @param {?} factories
     */
    function IterableDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    IterableDiffers.create = function (factories, parent) {
        if (isPresent(parent)) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
        }
        else {
            return new IterableDiffers(factories);
        }
    };
    /**
     *  Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
      * inherited {@link IterableDiffers} instance with the provided factories and return a new
      * {@link IterableDiffers} instance.
      * *
      * The following example shows how to extend an existing list of factories,
      * which will only be applied to the injector for this component and its children.
      * This step is all that's required to make a new {@link IterableDiffer} available.
      * *
      * ### Example
      * *
      * ```
      * viewProviders: [
      * IterableDiffers.extend([new ImmutableListDiffer()])
      * ]
      * })
      * ```
     * @param {?} factories
     * @return {?}
     */
    IterableDiffers.extend = function (factories) {
        return {
            provide: IterableDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} iterable
     * @return {?}
     */
    IterableDiffers.prototype.find = function (iterable) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
        if (isPresent(factory)) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }
    };
    return IterableDiffers;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 */
var KeyValueDiffers = (function () {
    /**
     * @param {?} factories
     */
    function KeyValueDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    KeyValueDiffers.create = function (factories, parent) {
        if (isPresent(parent)) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new KeyValueDiffers(factories);
        }
        else {
            return new KeyValueDiffers(factories);
        }
    };
    /**
     *  Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
      * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
      * {@link KeyValueDiffers} instance.
      * *
      * The following example shows how to extend an existing list of factories,
      * which will only be applied to the injector for this component and its children.
      * This step is all that's required to make a new {@link KeyValueDiffer} available.
      * *
      * ### Example
      * *
      * ```
      * viewProviders: [
      * KeyValueDiffers.extend([new ImmutableMapDiffer()])
      * ]
      * })
      * ```
     * @param {?} factories
     * @return {?}
     */
    KeyValueDiffers.extend = function (factories) {
        return {
            provide: KeyValueDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} kv
     * @return {?}
     */
    KeyValueDiffers.prototype.find = function (kv) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
        if (isPresent(factory)) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
        }
    };
    return KeyValueDiffers;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var UNINITIALIZED = {
    toString: function () { return 'CD_INIT_VALUE'; }
};
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function devModeEqual(a, b) {
    if (isListLikeIterable(a) && isListLikeIterable(b)) {
        return areIterablesEqual(a, b, devModeEqual);
    }
    else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
        return true;
    }
    else {
        return looseIdentical(a, b);
    }
}
/**
 *  Indicates that the result of a {@link Pipe} transformation has changed even though the
  * reference
  * has not changed.
  * *
  * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
  * *
  * Example:
  * *
  * ```
  * if (this._latestValue === this._latestReturnedValue) {
  * return this._latestReturnedValue;
  * } else {
  * this._latestReturnedValue = this._latestValue;
  * return WrappedValue.wrap(this._latestValue); // this will force update
  * }
  * ```
 */
var WrappedValue = (function () {
    /**
     * @param {?} wrapped
     */
    function WrappedValue(wrapped) {
        this.wrapped = wrapped;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
    return WrappedValue;
}());
/**
 *  Helper class for unwrapping WrappedValue s
 */
var ValueUnwrapper = (function () {
    function ValueUnwrapper() {
        this.hasWrappedValue = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ValueUnwrapper.prototype.unwrap = function (value) {
        if (value instanceof WrappedValue) {
            this.hasWrappedValue = true;
            return value.wrapped;
        }
        return value;
    };
    /**
     * @return {?}
     */
    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
    return ValueUnwrapper;
}());
/**
 *  Represents a basic change from a previous to a new value.
 */
var SimpleChange = (function () {
    /**
     * @param {?} previousValue
     * @param {?} currentValue
     */
    function SimpleChange(previousValue, currentValue) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
    }
    /**
     *  Check whether the new value is the first value assigned.
     * @return {?}
     */
    SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
    return SimpleChange;
}());

/**
 * @abstract
 */
var ChangeDetectorRef = (function () {
    function ChangeDetectorRef() {
    }
    /**
     *  Marks all {@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
      * *
      * <!-- TODO: Add a link to a chapter on OnPush components -->
      * *
      * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
      * *
      * ```typescript
      * selector: 'cmp',
      * changeDetection: ChangeDetectionStrategy.OnPush,
      * template: `Number of ticks: {{numberOfTicks}}`
      * })
      * class Cmp {
      * numberOfTicks = 0;
      * *
      * constructor(ref: ChangeDetectorRef) {
      * setInterval(() => {
      * this.numberOfTicks ++
      * // the following is required, otherwise the view will not be updated
      * this.ref.markForCheck();
      * }, 1000);
      * }
      * }
      * *
      * selector: 'app',
      * changeDetection: ChangeDetectionStrategy.OnPush,
      * template: `
      * <cmp><cmp>
      * `,
      * })
      * class App {
      * }
      * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.markForCheck = function () { };
    /**
     *  Detaches the change detector from the change detector tree.
      * *
      * The detached change detector will not be checked until it is reattached.
      * *
      * This can also be used in combination with {@link ChangeDetectorRef#detectChanges} to implement
      * local change
      * detection checks.
      * *
      * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
      * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
      * *
      * ### Example
      * *
      * The following example defines a component with a large list of readonly data.
      * Imagine the data changes constantly, many times per second. For performance reasons,
      * we want to check and update the list every five seconds. We can do that by detaching
      * the component's change detector and doing a local check every five seconds.
      * *
      * ```typescript
      * class DataProvider {
      * // in a real application the returned data will be different every time
      * get data() {
      * return [1,2,3,4,5];
      * }
      * }
      * *
      * selector: 'giant-list',
      * template: `
      * <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
      * `,
      * })
      * class GiantList {
      * constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
      * ref.detach();
      * setInterval(() => {
      * this.ref.detectChanges();
      * }, 5000);
      * }
      * }
      * *
      * selector: 'app',
      * providers: [DataProvider],
      * template: `
      * <giant-list><giant-list>
      * `,
      * })
      * class App {
      * }
      * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.detach = function () { };
    /**
     *  Checks the change detector and its children.
      * *
      * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement local
      * change detection
      * checks.
      * *
      * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
      * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
      * *
      * ### Example
      * *
      * The following example defines a component with a large list of readonly data.
      * Imagine, the data changes constantly, many times per second. For performance reasons,
      * we want to check and update the list every five seconds.
      * *
      * We can do that by detaching the component's change detector and doing a local change detection
      * check
      * every five seconds.
      * *
      * See {@link ChangeDetectorRef#detach} for more information.
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.detectChanges = function () { };
    /**
     *  Checks the change detector and its children, and throws if any changes are detected.
      * *
      * This is used in development mode to verify that running change detection doesn't introduce
      * other changes.
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.checkNoChanges = function () { };
    /**
     *  Reattach the change detector to the change detector tree.
      * *
      * This also marks OnPush ancestors as to be checked. This reattached change detector will be
      * checked during the next change detection run.
      * *
      * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
      * *
      * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
      * *
      * The following example creates a component displaying `live` data. The component will detach
      * its change detector from the main change detector tree when the component's live property
      * is set to false.
      * *
      * ```typescript
      * class DataProvider {
      * data = 1;
      * *
      * constructor() {
      * setInterval(() => {
      * this.data = this.data * 2;
      * }, 500);
      * }
      * }
      * *
      * selector: 'live-data',
      * inputs: ['live'],
      * template: 'Data: {{dataProvider.data}}'
      * })
      * class LiveData {
      * constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
      * *
      * set live(value) {
      * if (value)
      * this.ref.reattach();
      * else
      * this.ref.detach();
      * }
      * }
      * *
      * selector: 'app',
      * providers: [DataProvider],
      * template: `
      * Live Update: <input type="checkbox" [(ngModel)]="live">
      * <live-data [live]="live"><live-data>
      * `,
      * })
      * class App {
      * live = true;
      * }
      * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.reattach = function () { };
    return ChangeDetectorRef;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Structural diffing for `Object`s and `Map`s.
 */
var keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental
 */
// TODO (matsko): add typing for the animation function
var RenderComponentType = (function () {
    /**
     * @param {?} id
     * @param {?} templateUrl
     * @param {?} slotCount
     * @param {?} encapsulation
     * @param {?} styles
     * @param {?} animations
     */
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
        this.id = id;
        this.templateUrl = templateUrl;
        this.slotCount = slotCount;
        this.encapsulation = encapsulation;
        this.styles = styles;
        this.animations = animations;
    }
    return RenderComponentType;
}());
/**
 * @abstract
 */
var RenderDebugInfo = (function () {
    function RenderDebugInfo() {
    }
    Object.defineProperty(RenderDebugInfo.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "component", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "references", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderDebugInfo.prototype, "source", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    return RenderDebugInfo;
}());
/**
 * @abstract
 */
var Renderer = (function () {
    function Renderer() {
    }
    /**
     * @abstract
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} name
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
    /**
     * @abstract
     * @param {?} hostElement
     * @return {?}
     */
    Renderer.prototype.createViewRoot = function (hostElement) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    Renderer.prototype.projectNodes = function (parentElement, nodes) { };
    /**
     * @abstract
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
    /**
     * @abstract
     * @param {?} viewRootNodes
     * @return {?}
     */
    Renderer.prototype.detachView = function (viewRootNodes) { };
    /**
     * @abstract
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    Renderer.prototype.listen = function (renderElement, name, callback) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    Renderer.prototype.listenGlobal = function (target, name, callback) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */
    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
    /**
     *  Used only in debug mode to serialize property changes to dom nodes as attributes.
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
    /**
     * @abstract
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    Renderer.prototype.setText = function (renderNode, text) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
    return Renderer;
}());
/**
 *  Injectable service that provides a low-level interface for modifying the UI.
  * *
  * Use this service to bypass Angular's templating and make custom UI changes that can't be
  * expressed declaratively. For example if you need to set a property or an attribute whose name is
  * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
  * respectively.
  * *
  * If you are implementing a custom renderer, you must implement this interface.
  * *
  * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 * @abstract
 */
var RootRenderer = (function () {
    function RootRenderer() {
    }
    /**
     * @abstract
     * @param {?} componentType
     * @return {?}
     */
    RootRenderer.prototype.renderComponent = function (componentType) { };
    return RootRenderer;
}());

var SecurityContext = {};
SecurityContext.NONE = 0;
SecurityContext.HTML = 1;
SecurityContext.STYLE = 2;
SecurityContext.SCRIPT = 3;
SecurityContext.URL = 4;
SecurityContext.RESOURCE_URL = 5;
SecurityContext[SecurityContext.NONE] = "NONE";
SecurityContext[SecurityContext.HTML] = "HTML";
SecurityContext[SecurityContext.STYLE] = "STYLE";
SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
SecurityContext[SecurityContext.URL] = "URL";
SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
/**
 *  Sanitizer is used by the views to sanitize potentially dangerous values.
  * *
 * @abstract
 */
var Sanitizer = (function () {
    function Sanitizer() {
    }
    /**
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    Sanitizer.prototype.sanitize = function (context, value) { };
    return Sanitizer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$7 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  An error thrown if application changes model breaking the top-down data flow.
  * *
  * This exception is only thrown in dev mode.
  * *
  * <!-- TODO: Add a link once the dev mode option is configurable -->
  * *
  * ### Example
  * *
  * ```typescript
  * selector: 'parent',
  * template: '<child [prop]="parentProp"></child>',
  * })
  * class Parent {
  * parentProp = 'init';
  * }
  * *
  * class Child {
  * constructor(public parent: Parent) {}
  * *
  * set prop(v) {
  * // this updates the parent property, which is disallowed during change detection
  * // this will result in ExpressionChangedAfterItHasBeenCheckedError
  * this.parent.parentProp = 'updated';
  * }
  * }
  * ```
 */
var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
    __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);
    /**
     * @param {?} oldValue
     * @param {?} currValue
     */
    function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
        var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
        if (oldValue === UNINITIALIZED) {
            msg +=
                " It seems like the view has been created after its parent and its children have been dirty checked." +
                    " Has it been created in a change detection hook ?";
        }
        _super.call(this, msg);
    }
    return ExpressionChangedAfterItHasBeenCheckedError;
}(BaseError));
/**
 *  Thrown when an exception was raised during view creation, change detection or destruction.
  * *
  * This error wraps the original exception to attach additional contextual information that can
  * be useful for debugging.
 */
var ViewWrappedError = (function (_super) {
    __extends$7(ViewWrappedError, _super);
    /**
     * @param {?} originalError
     * @param {?} context
     */
    function ViewWrappedError(originalError, context) {
        _super.call(this, "Error in " + context.source, originalError);
        this.context = context;
    }
    return ViewWrappedError;
}(WrappedError));
/**
 *  Thrown when a destroyed view is used.
  * *
  * This error indicates a bug in the framework.
  * *
  * This is an internal Angular error.
 */
var ViewDestroyedError = (function (_super) {
    __extends$7(ViewDestroyedError, _super);
    /**
     * @param {?} details
     */
    function ViewDestroyedError(details) {
        _super.call(this, "Attempt to use a destroyed view: " + details);
    }
    return ViewDestroyedError;
}(BaseError));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewUtils = (function () {
    /**
     * @param {?} _renderer
     * @param {?} sanitizer
     * @param {?} animationQueue
     */
    function ViewUtils(_renderer, sanitizer, animationQueue) {
        this._renderer = _renderer;
        this.animationQueue = animationQueue;
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} renderComponentType
     * @return {?}
     */
    ViewUtils.prototype.renderComponent = function (renderComponentType) {
        return this._renderer.renderComponent(renderComponentType);
    };
    ViewUtils.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ViewUtils.ctorParameters = function () { return [
        { type: RootRenderer, },
        { type: Sanitizer, },
        { type: AnimationQueue, },
    ]; };
    return ViewUtils;
}());
var nextRenderComponentTypeId = 0;
/**
 * @param {?} templateUrl
 * @param {?} slotCount
 * @param {?} encapsulation
 * @param {?} styles
 * @param {?} animations
 * @return {?}
 */
function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
    return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
}
/**
 * @param {?} e
 * @param {?} array
 * @return {?}
 */
function addToArray(e, array) {
    array.push(e);
}
/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */
function interpolate(valueCount, constAndInterp) {
    var /** @type {?} */ result = '';
    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error("Does not support more than 9 expressions");
    }
}
/**
 * @param {?} v
 * @return {?}
 */
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
/**
 * @param {?} throwOnChange
 * @param {?} oldValue
 * @param {?} newValue
 * @return {?}
 */
function checkBinding(throwOnChange, oldValue, newValue) {
    if (throwOnChange) {
        if (!devModeEqual(oldValue, newValue)) {
            throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
        }
        return false;
    }
    else {
        return !looseIdentical(oldValue, newValue);
    }
}
/**
 * @param {?} input
 * @param {?} value
 * @return {?}
 */
function castByValue(input, value) {
    return (input);
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy1(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    return function (p0) {
        if (!looseIdentical(v0, p0)) {
            v0 = p0;
            result = fn(p0);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy2(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    var /** @type {?} */ v1 = UNINITIALIZED;
    return function (p0, p1) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
            v0 = p0;
            v1 = p1;
            result = fn(p0, p1);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy3(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0 = UNINITIALIZED;
    var /** @type {?} */ v1 = UNINITIALIZED;
    var /** @type {?} */ v2 = UNINITIALIZED;
    return function (p0, p1, p2) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            result = fn(p0, p1, p2);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy4(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;
    v0 = v1 = v2 = v3 = UNINITIALIZED;
    return function (p0, p1, p2, p3) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            result = fn(p0, p1, p2, p3);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy5(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;
    v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            result = fn(p0, p1, p2, p3, p4);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy6(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;
    v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            result = fn(p0, p1, p2, p3, p4, p5);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy7(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            result = fn(p0, p1, p2, p3, p4, p5, p6);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy8(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy9(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
        }
        return result;
    };
}
/**
 * @param {?} fn
 * @return {?}
 */
function pureProxy10(fn) {
    var /** @type {?} */ result;
    var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;
    v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
    return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
        if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
            !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
            !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
            !looseIdentical(v9, p9)) {
            v0 = p0;
            v1 = p1;
            v2 = p2;
            v3 = p3;
            v4 = p4;
            v5 = p5;
            v6 = p6;
            v7 = p7;
            v8 = p8;
            v9 = p9;
            result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
        }
        return result;
    };
}
/**
 * @param {?} renderer
 * @param {?} el
 * @param {?} changes
 * @return {?}
 */
function setBindingDebugInfoForChanges(renderer, el, changes) {
    Object.keys(changes).forEach(function (propName) {
        setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
    });
}
/**
 * @param {?} renderer
 * @param {?} el
 * @param {?} propName
 * @param {?} value
 * @return {?}
 */
function setBindingDebugInfo(renderer, el, propName, value) {
    try {
        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
    }
    catch (e) {
        renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
    }
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i - 0] = arguments[_i];
        }
        return '-' + m[1].toLowerCase();
    });
}
/**
 * @param {?} renderer
 * @param {?} parentElement
 * @param {?} name
 * @param {?} attrs
 * @param {?=} debugInfo
 * @return {?}
 */
function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
    var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);
    for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
        renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
    }
    return el;
}
/**
 * @param {?} renderer
 * @param {?} elementName
 * @param {?} attrs
 * @param {?} rootSelectorOrNode
 * @param {?=} debugInfo
 * @return {?}
 */
function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
    var /** @type {?} */ hostElement;
    if (isPresent(rootSelectorOrNode)) {
        hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
            renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
        }
        renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
    }
    else {
        hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
    }
    return hostElement;
}
/**
 * @param {?} view
 * @param {?} element
 * @param {?} eventNamesAndTargets
 * @param {?} listener
 * @return {?}
 */
function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
    var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
    for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {
        var /** @type {?} */ eventName = eventNamesAndTargets.get(i);
        var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);
        var /** @type {?} */ disposable = void 0;
        if (eventTarget) {
            disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
        }
        else {
            disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
        }
        disposables.set(i / 2, disposable);
    }
    return disposeInlineArray.bind(null, disposables);
}
/**
 * @param {?} disposables
 * @return {?}
 */
function disposeInlineArray(disposables) {
    for (var /** @type {?} */ i = 0; i < disposables.length; i++) {
        disposables.get(i)();
    }
}
/**
 * @return {?}
 */
function noop() { }
/**
 * @param {?} length
 * @return {?}
 */
function createEmptyInlineArray(length) {
    var /** @type {?} */ ctor;
    if (length <= 2) {
        ctor = InlineArray2;
    }
    else if (length <= 4) {
        ctor = InlineArray4;
    }
    else if (length <= 8) {
        ctor = InlineArray8;
    }
    else if (length <= 16) {
        ctor = InlineArray16;
    }
    else {
        ctor = InlineArrayDynamic;
    }
    return new ctor(length);
}
var InlineArray0 = (function () {
    function InlineArray0() {
        this.length = 0;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArray0.prototype.get = function (index) { return undefined; };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArray0.prototype.set = function (index, value) { };
    return InlineArray0;
}());
var InlineArray2 = (function () {
    /**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     */
    function InlineArray2(length, _v0, _v1) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArray2.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            default:
                return undefined;
        }
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArray2.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
        }
    };
    return InlineArray2;
}());
var InlineArray4 = (function () {
    /**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     */
    function InlineArray4(length, _v0, _v1, _v2, _v3) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArray4.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            default:
                return undefined;
        }
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArray4.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
        }
    };
    return InlineArray4;
}());
var InlineArray8 = (function () {
    /**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     * @param {?=} _v4
     * @param {?=} _v5
     * @param {?=} _v6
     * @param {?=} _v7
     */
    function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
        this._v4 = _v4;
        this._v5 = _v5;
        this._v6 = _v6;
        this._v7 = _v7;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArray8.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            case 4:
                return this._v4;
            case 5:
                return this._v5;
            case 6:
                return this._v6;
            case 7:
                return this._v7;
            default:
                return undefined;
        }
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArray8.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
            case 4:
                this._v4 = value;
                break;
            case 5:
                this._v5 = value;
                break;
            case 6:
                this._v6 = value;
                break;
            case 7:
                this._v7 = value;
                break;
        }
    };
    return InlineArray8;
}());
var InlineArray16 = (function () {
    /**
     * @param {?} length
     * @param {?=} _v0
     * @param {?=} _v1
     * @param {?=} _v2
     * @param {?=} _v3
     * @param {?=} _v4
     * @param {?=} _v5
     * @param {?=} _v6
     * @param {?=} _v7
     * @param {?=} _v8
     * @param {?=} _v9
     * @param {?=} _v10
     * @param {?=} _v11
     * @param {?=} _v12
     * @param {?=} _v13
     * @param {?=} _v14
     * @param {?=} _v15
     */
    function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
        this.length = length;
        this._v0 = _v0;
        this._v1 = _v1;
        this._v2 = _v2;
        this._v3 = _v3;
        this._v4 = _v4;
        this._v5 = _v5;
        this._v6 = _v6;
        this._v7 = _v7;
        this._v8 = _v8;
        this._v9 = _v9;
        this._v10 = _v10;
        this._v11 = _v11;
        this._v12 = _v12;
        this._v13 = _v13;
        this._v14 = _v14;
        this._v15 = _v15;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArray16.prototype.get = function (index) {
        switch (index) {
            case 0:
                return this._v0;
            case 1:
                return this._v1;
            case 2:
                return this._v2;
            case 3:
                return this._v3;
            case 4:
                return this._v4;
            case 5:
                return this._v5;
            case 6:
                return this._v6;
            case 7:
                return this._v7;
            case 8:
                return this._v8;
            case 9:
                return this._v9;
            case 10:
                return this._v10;
            case 11:
                return this._v11;
            case 12:
                return this._v12;
            case 13:
                return this._v13;
            case 14:
                return this._v14;
            case 15:
                return this._v15;
            default:
                return undefined;
        }
    };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArray16.prototype.set = function (index, value) {
        switch (index) {
            case 0:
                this._v0 = value;
                break;
            case 1:
                this._v1 = value;
                break;
            case 2:
                this._v2 = value;
                break;
            case 3:
                this._v3 = value;
                break;
            case 4:
                this._v4 = value;
                break;
            case 5:
                this._v5 = value;
                break;
            case 6:
                this._v6 = value;
                break;
            case 7:
                this._v7 = value;
                break;
            case 8:
                this._v8 = value;
                break;
            case 9:
                this._v9 = value;
                break;
            case 10:
                this._v10 = value;
                break;
            case 11:
                this._v11 = value;
                break;
            case 12:
                this._v12 = value;
                break;
            case 13:
                this._v13 = value;
                break;
            case 14:
                this._v14 = value;
                break;
            case 15:
                this._v15 = value;
                break;
        }
    };
    return InlineArray16;
}());
var InlineArrayDynamic = (function () {
    /**
     * @param {?} length
     * @param {...?} values
     */
    function InlineArrayDynamic(length) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        this.length = length;
        this._values = values;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
    /**
     * @param {?} index
     * @param {?} value
     * @return {?}
     */
    InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
    return InlineArrayDynamic;
}());
var EMPTY_INLINE_ARRAY = new InlineArray0();


var view_utils = Object.freeze({
	ViewUtils: ViewUtils,
	createRenderComponentType: createRenderComponentType,
	addToArray: addToArray,
	interpolate: interpolate,
	inlineInterpolate: inlineInterpolate,
	checkBinding: checkBinding,
	castByValue: castByValue,
	EMPTY_ARRAY: EMPTY_ARRAY,
	EMPTY_MAP: EMPTY_MAP,
	pureProxy1: pureProxy1,
	pureProxy2: pureProxy2,
	pureProxy3: pureProxy3,
	pureProxy4: pureProxy4,
	pureProxy5: pureProxy5,
	pureProxy6: pureProxy6,
	pureProxy7: pureProxy7,
	pureProxy8: pureProxy8,
	pureProxy9: pureProxy9,
	pureProxy10: pureProxy10,
	setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	setBindingDebugInfo: setBindingDebugInfo,
	createRenderElement: createRenderElement,
	selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	subscribeToRenderElement: subscribeToRenderElement,
	noop: noop,
	InlineArray2: InlineArray2,
	InlineArray4: InlineArray4,
	InlineArray8: InlineArray8,
	InlineArray16: InlineArray16,
	InlineArrayDynamic: InlineArrayDynamic,
	EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
});

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$5 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Represents an instance of a Component created via a {@link ComponentFactory}.
  * *
  * `ComponentRef` provides access to the Component Instance as well other objects related to this
  * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
  * method.
 * @abstract
 */
var ComponentRef = (function () {
    function ComponentRef() {
    }
    Object.defineProperty(ComponentRef.prototype, "location", {
        /**
         *  Location of the Host Element of this Component Instance.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "injector", {
        /**
         *  The injector on which the component instance exists.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "instance", {
        /**
         *  The instance of the Component.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef.prototype, "hostView", {
        /**
         *  The {@link ViewRef} of the Host View of this Component instance.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
        /**
         *  The {@link ChangeDetectorRef} of the Component instance.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef.prototype, "componentType", {
        /**
         *  The component type.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    /**
     *  Destroys the component instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.destroy = function () { };
    /**
     *  Allows to register a callback that will be called when the component is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    ComponentRef.prototype.onDestroy = function (callback) { };
    return ComponentRef;
}());
var ComponentRef_ = (function (_super) {
    __extends$5(ComponentRef_, _super);
    /**
     * @param {?} _index
     * @param {?} _parentView
     * @param {?} _nativeElement
     * @param {?} _component
     */
    function ComponentRef_(_index, _parentView, _nativeElement, _component) {
        _super.call(this);
        this._index = _index;
        this._parentView = _parentView;
        this._nativeElement = _nativeElement;
        this._component = _component;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
        /**
         * @return {?}
         */
        get: function () { return new ElementRef(this._nativeElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._parentView.injector(this._index); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
        /**
         * @return {?}
         */
        get: function () { return this._component; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
        /**
         * @return {?}
         */
        get: function () { return this._parentView.ref; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
        /**
         * @return {?}
         */
        get: function () { return this._parentView.ref; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
        /**
         * @return {?}
         */
        get: function () { return (this._component.constructor); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
    /**
     * @param {?} callback
     * @return {?}
     */
    ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
    return ComponentRef_;
}(ComponentRef));
/**
 * @stable
 */
var ComponentFactory = (function () {
    /**
     * @param {?} selector
     * @param {?} _viewClass
     * @param {?} _componentType
     */
    function ComponentFactory(selector, _viewClass, _componentType) {
        this.selector = selector;
        this._viewClass = _viewClass;
        this._componentType = _componentType;
    }
    Object.defineProperty(ComponentFactory.prototype, "componentType", {
        /**
         * @return {?}
         */
        get: function () { return this._componentType; },
        enumerable: true,
        configurable: true
    });
    /**
     *  Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
        if (projectableNodes === void 0) { projectableNodes = null; }
        if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
        var /** @type {?} */ vu = injector.get(ViewUtils);
        if (!projectableNodes) {
            projectableNodes = [];
        }
        var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);
        return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
    };
    return ComponentFactory;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$8 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @stable
 */
var NoComponentFactoryError = (function (_super) {
    __extends$8(NoComponentFactoryError, _super);
    /**
     * @param {?} component
     */
    function NoComponentFactoryError(component) {
        _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
        this.component = component;
    }
    return NoComponentFactoryError;
}(BaseError));
var _NullComponentFactoryResolver = (function () {
    function _NullComponentFactoryResolver() {
    }
    /**
     * @param {?} component
     * @return {?}
     */
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        throw new NoComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
}());
/**
 * @abstract
 */
var ComponentFactoryResolver = (function () {
    function ComponentFactoryResolver() {
    }
    /**
     * @abstract
     * @param {?} component
     * @return {?}
     */
    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    return ComponentFactoryResolver;
}());
var CodegenComponentFactoryResolver = (function () {
    /**
     * @param {?} factories
     * @param {?} _parent
     */
    function CodegenComponentFactoryResolver(factories, _parent) {
        this._parent = _parent;
        this._factories = new Map();
        for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    /**
     * @param {?} component
     * @return {?}
     */
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        var /** @type {?} */ result = this._factories.get(component);
        if (!result) {
            result = this._parent.resolveComponentFactory(component);
        }
        return result;
    };
    return CodegenComponentFactoryResolver;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var trace;
var events;
/**
 * @return {?}
 */
function detectWTF() {
    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
/**
 * @param {?} signature
 * @param {?=} flags
 * @return {?}
 */
function createScope$1(signature, flags) {
    if (flags === void 0) { flags = null; }
    return events.createScope(signature, flags);
}
/**
 * @param {?} scope
 * @param {?=} returnValue
 * @return {?}
 */
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
/**
 * @param {?} rangeType
 * @param {?} action
 * @return {?}
 */

/**
 * @param {?} range
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * True if WTF is enabled.
 */
var wtfEnabled = detectWTF();
/**
 * @param {?=} arg0
 * @param {?=} arg1
 * @return {?}
 */
function noopScope(arg0, arg1) {
    return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * @experimental
 */
var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * @experimental
 */
var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * @experimental
 */

/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * @experimental
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  The Testability service provides testing hooks that can be accessed from
  * the browser and by services such as Protractor. Each bootstrapped Angular
  * application on the page will have an instance of Testability.
 */
var Testability = (function () {
    /**
     * @param {?} _ngZone
     */
    function Testability(_ngZone) {
        this._ngZone = _ngZone;
        /** @internal */
        this._pendingCount = 0;
        /** @internal */
        this._isZoneStable = true;
        /**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * @internal
         */
        this._didWork = false;
        /** @internal */
        this._callbacks = [];
        this._watchAngularEvents();
    }
    /**
     * @return {?}
     */
    Testability.prototype._watchAngularEvents = function () {
        var _this = this;
        this._ngZone.onUnstable.subscribe({
            next: function () {
                _this._didWork = true;
                _this._isZoneStable = false;
            }
        });
        this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.subscribe({
                next: function () {
                    NgZone.assertNotInAngularZone();
                    scheduleMicroTask(function () {
                        _this._isZoneStable = true;
                        _this._runCallbacksIfReady();
                    });
                }
            });
        });
    };
    /**
     * @return {?}
     */
    Testability.prototype.increasePendingRequestCount = function () {
        this._pendingCount += 1;
        this._didWork = true;
        return this._pendingCount;
    };
    /**
     * @return {?}
     */
    Testability.prototype.decreasePendingRequestCount = function () {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    };
    /**
     * @return {?}
     */
    Testability.prototype.isStable = function () {
        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    /**
     * @return {?}
     */
    Testability.prototype._runCallbacksIfReady = function () {
        var _this = this;
        if (this.isStable()) {
            // Schedules the call backs in a new frame so that it is always async.
            scheduleMicroTask(function () {
                while (_this._callbacks.length !== 0) {
                    (_this._callbacks.pop())(_this._didWork);
                }
                _this._didWork = false;
            });
        }
        else {
            // Not Ready
            this._didWork = true;
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    Testability.prototype.whenStable = function (callback) {
        this._callbacks.push(callback);
        this._runCallbacksIfReady();
    };
    /**
     * @return {?}
     */
    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
    /**
     * @deprecated use findProviders
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */
    Testability.prototype.findBindings = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    /**
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */
    Testability.prototype.findProviders = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    Testability.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Testability.ctorParameters = function () { return [
        { type: NgZone, },
    ]; };
    return Testability;
}());
/**
 *  A global registry of {@link Testability} instances for specific elements.
 */
var TestabilityRegistry = (function () {
    function TestabilityRegistry() {
        /** @internal */
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    /**
     * @param {?} token
     * @param {?} testability
     * @return {?}
     */
    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
        this._applications.set(token, testability);
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
    /**
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
    /**
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
    /**
     * @param {?} elem
     * @param {?=} findInAncestors
     * @return {?}
     */
    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
        if (findInAncestors === void 0) { findInAncestors = true; }
        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    TestabilityRegistry.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    TestabilityRegistry.ctorParameters = function () { return []; };
    return TestabilityRegistry;
}());
var _NoopGetTestability = (function () {
    function _NoopGetTestability() {
    }
    /**
     * @param {?} registry
     * @return {?}
     */
    _NoopGetTestability.prototype.addToWindow = function (registry) { };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        return null;
    };
    return _NoopGetTestability;
}());
/**
 *  Set the {@link GetTestability} implementation used by the Angular testing framework.
 * @param {?} getter
 * @return {?}
 */
function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$3 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _devMode = true;
var _runModeLocked = false;
var _platform;
/**
 *  Disable Angular's development mode, which turns off assertions and other
  * checks within the framework.
  * *
  * One important assertion this disables verifies that a change detection pass
  * does not result in additional changes to any bindings (also known as
  * unidirectional data flow).
  * *
 * @return {?}
 */
function enableProdMode() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}
/**
 *  Returns whether Angular is in development mode. After called once,
  * the value is locked and won't change any more.
  * *
  * By default, this is true, unless a user calls `enableProdMode` before calling this.
  * *
 * @return {?}
 */
function isDevMode() {
    _runModeLocked = true;
    return _devMode;
}
/**
 *  A token for third-party components that can register themselves with NgProbe.
  * *
 */
var NgProbeToken = (function () {
    /**
     * @param {?} name
     * @param {?} token
     */
    function NgProbeToken(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken;
}());
/**
 *  Creates a platform.
  * Platforms have to be eagerly created via this function.
  * *
 * @param {?} injector
 * @return {?}
 */
function createPlatform(injector) {
    if (_platform && !_platform.destroyed) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));
    if (inits)
        inits.forEach(function (init) { return init(); });
    return _platform;
}
/**
 *  Creates a factory for a platform
  * *
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */
function createPlatformFactory(parentPlatformFactory, name, providers) {
    if (providers === void 0) { providers = []; }
    var /** @type {?} */ marker = new OpaqueToken("Platform: " + name);
    return function (extraProviders) {
        if (extraProviders === void 0) { extraProviders = []; }
        if (!getPlatform()) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            }
            else {
                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
            }
        }
        return assertPlatform(marker);
    };
}
/**
 *  Checks that there currently is a platform
  * which contains the given token as a provider.
  * *
 * @param {?} requiredToken
 * @return {?}
 */
function assertPlatform(requiredToken) {
    var /** @type {?} */ platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
/**
 *  Destroy the existing platform.
  * *
 * @return {?}
 */

/**
 *  Returns the current platform.
  * *
 * @return {?}
 */
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
/**
 *  The Angular platform is the entry point for Angular on a web page. Each page
  * has exactly one platform, and services (such as reflection) which are common
  * to every Angular application running on the page are bound in its scope.
  * *
  * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
  * explicitly by calling {@link createPlatform}().
  * *
 * @abstract
 */
var PlatformRef = (function () {
    function PlatformRef() {
    }
    /**
     *  Creates an instance of an `@NgModule` for the given platform
      * for offline compilation.
      * *
      * ## Simple Example
      * *
      * ```typescript
      * my_module.ts:
      * *
      * imports: [BrowserModule]
      * })
      * class MyModule {}
      * *
      * main.ts:
      * import {MyModuleNgFactory} from './my_module.ngfactory';
      * import {platformBrowser} from '@angular/platform-browser';
      * *
      * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
      * ```
      * *
     * @param {?} moduleFactory
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
        throw unimplemented();
    };
    /**
     *  Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
      * *
      * ## Simple Example
      * *
      * ```typescript
      * imports: [BrowserModule]
      * })
      * class MyModule {}
      * *
      * let moduleRef = platformBrowser().bootstrapModule(MyModule);
      * ```
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        throw unimplemented();
    };
    /**
     *  Register a listener to be called when the platform is disposed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    PlatformRef.prototype.onDestroy = function (callback) { };
    Object.defineProperty(PlatformRef.prototype, "injector", {
        /**
         *  Retrieve the platform {@link Injector}, which is the parent injector for
          * every Angular application on the page and provides singleton providers.
         * @return {?}
         */
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    
    /**
     *  Destroy the Angular platform and all Angular applications on the page.
     * @abstract
     * @return {?}
     */
    PlatformRef.prototype.destroy = function () { };
    Object.defineProperty(PlatformRef.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { throw unimplemented(); },
        enumerable: true,
        configurable: true
    });
    return PlatformRef;
}());
/**
 * @param {?} errorHandler
 * @param {?} callback
 * @return {?}
 */
function _callAndReportToErrorHandler(errorHandler, callback) {
    try {
        var /** @type {?} */ result = callback();
        if (isPromise(result)) {
            return result.catch(function (e) {
                errorHandler.handleError(e);
                // rethrow as the exception handler might not do it
                throw e;
            });
        }
        return result;
    }
    catch (e) {
        errorHandler.handleError(e);
        // rethrow as the exception handler might not do it
        throw e;
    }
}
var PlatformRef_ = (function (_super) {
    __extends$3(PlatformRef_, _super);
    /**
     * @param {?} _injector
     */
    function PlatformRef_(_injector) {
        _super.call(this);
        this._injector = _injector;
        this._modules = [];
        this._destroyListeners = [];
        this._destroyed = false;
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return this._destroyed; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PlatformRef_.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
        }
        this._modules.slice().forEach(function (module) { return module.destroy(); });
        this._destroyListeners.forEach(function (listener) { return listener(); });
        this._destroyed = true;
    };
    /**
     * @param {?} moduleFactory
     * @return {?}
     */
    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
        return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
    };
    /**
     * @param {?} moduleFactory
     * @param {?} ngZone
     * @return {?}
     */
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
        var _this = this;
        // Note: We need to create the NgZone _before_ we instantiate the module,
        // as instantiating the module creates some providers eagerly.
        // So we create a mini parent injector that just contains the new NgZone and
        // pass that as parent to the NgModuleFactory.
        if (!ngZone)
            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
        // Attention: Don't use ApplicationRef.run here,
        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
        return ngZone.run(function () {
            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
            ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
            return _callAndReportToErrorHandler(exceptionHandler, function () {
                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
                return initStatus.donePromise.then(function () {
                    _this._moduleDoBootstrap(moduleRef);
                    return moduleRef;
                });
            });
        });
    };
    /**
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
    };
    /**
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @param {?} ngZone
     * @param {?=} componentFactoryCallback
     * @return {?}
     */
    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
        var _this = this;
        if (compilerOptions === void 0) { compilerOptions = []; }
        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
        // ugly internal api hack: generate host component factories for all declared components and
        // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
        // factories.
        if (componentFactoryCallback) {
            return compiler.compileModuleAndAllComponentsAsync(moduleType)
                .then(function (_a) {
                var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
                componentFactoryCallback(componentFactories);
                return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
            });
        }
        return compiler.compileModuleAsync(moduleType)
            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
    };
    /**
     * @param {?} moduleRef
     * @return {?}
     */
    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
        var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
        if (moduleRef.bootstrapFactories.length > 0) {
            moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
        }
        else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
        }
        else {
            throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
                "Please define one of these.");
        }
    };
    PlatformRef_.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PlatformRef_.ctorParameters = function () { return [
        { type: Injector, },
    ]; };
    return PlatformRef_;
}(PlatformRef));
/**
 *  A reference to an Angular application running on a page.
  * *
  * For more about Angular applications, see the documentation for {@link bootstrap}.
  * *
 * @abstract
 */
var ApplicationRef = (function () {
    function ApplicationRef() {
    }
    /**
     *  Bootstrap a new component at the root level of the application.
      * *
      * ### Bootstrap process
      * *
      * When bootstrapping a new root component into an application, Angular mounts the
      * specified application component onto DOM elements identified by the [componentType]'s
      * selector and kicks off automatic change detection to finish initializing the component.
      * *
      * ### Example
      * {@example core/ts/platform/platform.ts region='longform'}
     * @abstract
     * @param {?} componentFactory
     * @return {?}
     */
    ApplicationRef.prototype.bootstrap = function (componentFactory) { };
    /**
     *  Invoke this method to explicitly process change detection and its side-effects.
      * *
      * In development mode, `tick()` also performs a second change detection cycle to ensure that no
      * further changes are detected. If additional changes are picked up during this second cycle,
      * bindings in the app have side-effects that cannot be resolved in a single change detection
      * pass.
      * In this case, Angular throws an error, since an Angular application can only have one change
      * detection pass during which all change detection must complete.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.tick = function () { };
    Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
        /**
         *  Get a list of component types registered to this application.
          * This list is populated even before the component is created.
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ApplicationRef.prototype, "components", {
        /**
         *  Get a list of components registered to this application.
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    
    /**
     *  Attaches a view so that it will be dirty checked.
      * The view will be automatically detached when it is destroyed.
      * This will throw if the view is already attached to a ViewContainer.
     * @param {?} view
     * @return {?}
     */
    ApplicationRef.prototype.attachView = function (view) { unimplemented(); };
    /**
     *  Detaches a view from dirty checking again.
     * @param {?} view
     * @return {?}
     */
    ApplicationRef.prototype.detachView = function (view) { unimplemented(); };
    Object.defineProperty(ApplicationRef.prototype, "viewCount", {
        /**
         *  Returns the number of attached views.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    return ApplicationRef;
}());
var ApplicationRef_ = (function (_super) {
    __extends$3(ApplicationRef_, _super);
    /**
     * @param {?} _zone
     * @param {?} _console
     * @param {?} _injector
     * @param {?} _exceptionHandler
     * @param {?} _componentFactoryResolver
     * @param {?} _initStatus
     * @param {?} _testabilityRegistry
     * @param {?} _testability
     */
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
        var _this = this;
        _super.call(this);
        this._zone = _zone;
        this._console = _console;
        this._injector = _injector;
        this._exceptionHandler = _exceptionHandler;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._initStatus = _initStatus;
        this._testabilityRegistry = _testabilityRegistry;
        this._testability = _testability;
        this._bootstrapListeners = [];
        this._rootComponents = [];
        this._rootComponentTypes = [];
        this._views = [];
        this._runningTick = false;
        this._enforceNoNewChanges = false;
        this._enforceNoNewChanges = isDevMode();
        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
    }
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef_.prototype.attachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef)).internalView;
        this._views.push(view);
        view.attachToAppRef(this);
    };
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef_.prototype.detachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef)).internalView;
        ListWrapper.remove(this._views, view);
        view.detach();
    };
    /**
     * @param {?} componentOrFactory
     * @return {?}
     */
    ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
        var _this = this;
        if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
        }
        var /** @type {?} */ componentFactory;
        if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
        }
        else {
            componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
        }
        this._rootComponentTypes.push(componentFactory.componentType);
        var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);
        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
        if (testability) {
            compRef.injector.get(TestabilityRegistry)
                .registerApplication(compRef.location.nativeElement, testability);
        }
        this._loadComponent(compRef);
        if (isDevMode()) {
            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
        }
        return compRef;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef_.prototype._loadComponent = function (componentRef) {
        this.attachView(componentRef.hostView);
        this.tick();
        this._rootComponents.push(componentRef);
        // Get the listeners lazily to prevent DI cycles.
        var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])
            .concat(this._bootstrapListeners));
        listeners.forEach(function (listener) { return listener(componentRef); });
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
        this.detachView(componentRef.hostView);
        ListWrapper.remove(this._rootComponents, componentRef);
    };
    /**
     * @return {?}
     */
    ApplicationRef_.prototype.tick = function () {
        if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
        }
        var /** @type {?} */ scope = ApplicationRef_._tickScope();
        try {
            this._runningTick = true;
            this._views.forEach(function (view) { return view.ref.detectChanges(); });
            if (this._enforceNoNewChanges) {
                this._views.forEach(function (view) { return view.ref.checkNoChanges(); });
            }
        }
        finally {
            this._runningTick = false;
            wtfLeave(scope);
        }
    };
    /**
     * @return {?}
     */
    ApplicationRef_.prototype.ngOnDestroy = function () {
        // TODO(alxhub): Dispose of the NgZone.
        this._views.slice().forEach(function (view) { return view.destroy(); });
    };
    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
        /**
         * @return {?}
         */
        get: function () { return this._views.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
        /**
         * @return {?}
         */
        get: function () { return this._rootComponentTypes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
        /**
         * @return {?}
         */
        get: function () { return this._rootComponents; },
        enumerable: true,
        configurable: true
    });
    /** @internal */
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ApplicationRef_.ctorParameters = function () { return [
        { type: NgZone, },
        { type: Console, },
        { type: Injector, },
        { type: ErrorHandler, },
        { type: ComponentFactoryResolver, },
        { type: ApplicationInitStatus, },
        { type: TestabilityRegistry, decorators: [{ type: Optional },] },
        { type: Testability, decorators: [{ type: Optional },] },
    ]; };
    return ApplicationRef_;
}(ApplicationRef));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for Zone

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for render

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$9 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Represents an instance of an NgModule created via a {@link NgModuleFactory}.
  * *
  * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
  * NgModule Instance.
  * *
 * @abstract
 */
var NgModuleRef = (function () {
    function NgModuleRef() {
    }
    Object.defineProperty(NgModuleRef.prototype, "injector", {
        /**
         *  The injector that contains all of the providers of the NgModule.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
        /**
         *  The ComponentFactoryResolver to get hold of the ComponentFactories
          * declared in the `entryComponents` property of the module.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleRef.prototype, "instance", {
        /**
         *  The NgModule instance.
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    /**
     *  Destroys the module instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    NgModuleRef.prototype.destroy = function () { };
    /**
     *  Allows to register a callback that will be called when the module is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    NgModuleRef.prototype.onDestroy = function (callback) { };
    return NgModuleRef;
}());
/**
 * @experimental
 */
var NgModuleFactory = (function () {
    /**
     * @param {?} _injectorClass
     * @param {?} _moduleType
     */
    function NgModuleFactory(_injectorClass, _moduleType) {
        this._injectorClass = _injectorClass;
        this._moduleType = _moduleType;
    }
    Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
        /**
         * @return {?}
         */
        get: function () { return this._moduleType; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} parentInjector
     * @return {?}
     */
    NgModuleFactory.prototype.create = function (parentInjector) {
        if (!parentInjector) {
            parentInjector = Injector.NULL;
        }
        var /** @type {?} */ instance = new this._injectorClass(parentInjector);
        instance.create();
        return instance;
    };
    return NgModuleFactory;
}());
var _UNDEFINED = new Object();
/**
 * @abstract
 */
var NgModuleInjector = (function (_super) {
    __extends$9(NgModuleInjector, _super);
    /**
     * @param {?} parent
     * @param {?} factories
     * @param {?} bootstrapFactories
     */
    function NgModuleInjector(parent, factories, bootstrapFactories) {
        _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
        this.parent = parent;
        this.bootstrapFactories = bootstrapFactories;
        this._destroyListeners = [];
        this._destroyed = false;
    }
    /**
     * @return {?}
     */
    NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
    /**
     * @abstract
     * @return {?}
     */
    NgModuleInjector.prototype.createInternal = function () { };
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    NgModuleInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        if (token === Injector || token === ComponentFactoryResolver) {
            return this;
        }
        var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
        return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
    };
    /**
     * @abstract
     * @param {?} token
     * @param {?} notFoundValue
     * @return {?}
     */
    NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
    Object.defineProperty(NgModuleInjector.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
        /**
         * @return {?}
         */
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgModuleInjector.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
        }
        this._destroyed = true;
        this.destroyInternal();
        this._destroyListeners.forEach(function (listener) { return listener(); });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    /**
     * @abstract
     * @return {?}
     */
    NgModuleInjector.prototype.destroyInternal = function () { };
    return NgModuleInjector;
}(CodegenComponentFactoryResolver));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Used to load ng module factories.
 * @abstract
 */
var NgModuleFactoryLoader = (function () {
    function NgModuleFactoryLoader() {
    }
    /**
     * @abstract
     * @param {?} path
     * @return {?}
     */
    NgModuleFactoryLoader.prototype.load = function (path) { };
    return NgModuleFactoryLoader;
}());
var moduleFactories = new Map();
/**
 *  Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */
function registerModuleFactory(id, factory) {
    var /** @type {?} */ existing = moduleFactories.get(id);
    if (existing) {
        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
}
/**
 * @return {?}
 */

/**
 *  Returns the NgModuleFactory with the given id, if it exists and has been loaded.
  * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
  * cannot be found.
 * @param {?} id
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  An unmodifiable list of items that Angular keeps up to date when the state
  * of the application changes.
  * *
  * The type of object that {@link Query} and {@link ViewQueryMetadata} provide.
  * *
  * Implements an iterable interface, therefore it can be used in both ES6
  * javascript `for (var i of items)` loops as well as in Angular templates with
  * `*ngFor="let i of myList"`.
  * *
  * Changes can be observed by subscribing to the changes `Observable`.
  * *
  * NOTE: In the future this class will implement an `Observable` interface.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
  * ```typescript
  * class Container {
  * @ViewChildren(Item) items:QueryList<Item>;
  * }
  * ```
 */
var QueryList = (function () {
    function QueryList() {
        this._dirty = true;
        this._results = [];
        this._emitter = new EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
        /**
         * @return {?}
         */
        get: function () { return this._emitter; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._results.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
        /**
         * @return {?}
         */
        get: function () { return this._results[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
        /**
         * @return {?}
         */
        get: function () { return this._results[this.length - 1]; },
        enumerable: true,
        configurable: true
    });
    /**
     *  See
      * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
    /**
     *  See
      * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.filter = function (fn) {
        return this._results.filter(fn);
    };
    /**
     *  See
      * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.find = function (fn) { return this._results.find(fn); };
    /**
     *  See
      * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    QueryList.prototype.reduce = function (fn, init) {
        return this._results.reduce(fn, init);
    };
    /**
     *  See
      * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
    /**
     *  See
      * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.some = function (fn) {
        return this._results.some(fn);
    };
    /**
     * @return {?}
     */
    QueryList.prototype.toArray = function () { return this._results.slice(); };
    /**
     * @return {?}
     */
    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
    /**
     * @return {?}
     */
    QueryList.prototype.toString = function () { return this._results.toString(); };
    /**
     * @param {?} res
     * @return {?}
     */
    QueryList.prototype.reset = function (res) {
        this._results = ListWrapper.flatten(res);
        this._dirty = false;
    };
    /**
     * @return {?}
     */
    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
    /**
     *  internal
     * @return {?}
     */
    QueryList.prototype.setDirty = function () { this._dirty = true; };
    Object.defineProperty(QueryList.prototype, "dirty", {
        /**
         *  internal
         * @return {?}
         */
        get: function () { return this._dirty; },
        enumerable: true,
        configurable: true
    });
    return QueryList;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _SEPARATOR = '#';
var FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 *  Configuration for SystemJsNgModuleLoader.
  * token.
  * *
 * @abstract
 */
var SystemJsNgModuleLoaderConfig = (function () {
    function SystemJsNgModuleLoaderConfig() {
    }
    return SystemJsNgModuleLoaderConfig;
}());
var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory',
};
/**
 *  NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 */
var SystemJsNgModuleLoader = (function () {
    /**
     * @param {?} _compiler
     * @param {?=} config
     */
    function SystemJsNgModuleLoader(_compiler, config) {
        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.load = function (path) {
        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
        var _this = this;
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        if (exportName === undefined) {
            exportName = 'default';
        }
        return System.import(module)
            .then(function (module) { return module[exportName]; })
            .then(function (type) { return checkNotEmpty(type, module, exportName); })
            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
        if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
        }
        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
            .then(function (module) { return module[exportName + factoryClassSuffix]; })
            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
    };
    SystemJsNgModuleLoader.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SystemJsNgModuleLoader.ctorParameters = function () { return [
        { type: Compiler, },
        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
    ]; };
    return SystemJsNgModuleLoader;
}());
/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$10 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Represents an Embedded Template that can be used to instantiate Embedded Views.
  * *
  * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
  * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
  * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
  * `TemplateRef` from a Component or a Directive via {@link Query}.
  * *
  * To instantiate Embedded Views based on a Template, use
  * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
  * View Container.
 * @abstract
 */
var TemplateRef = (function () {
    function TemplateRef() {
    }
    Object.defineProperty(TemplateRef.prototype, "elementRef", {
        /**
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    /**
     * @abstract
     * @param {?} context
     * @return {?}
     */
    TemplateRef.prototype.createEmbeddedView = function (context) { };
    return TemplateRef;
}());
var TemplateRef_ = (function (_super) {
    __extends$10(TemplateRef_, _super);
    /**
     * @param {?} _parentView
     * @param {?} _nodeIndex
     * @param {?} _nativeElement
     */
    function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
        _super.call(this);
        this._parentView = _parentView;
        this._nodeIndex = _nodeIndex;
        this._nativeElement = _nativeElement;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    TemplateRef_.prototype.createEmbeddedView = function (context) {
        var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
        view.create(context || ({}));
        return view.ref;
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
        /**
         * @return {?}
         */
        get: function () { return new ElementRef(this._nativeElement); },
        enumerable: true,
        configurable: true
    });
    return TemplateRef_;
}(TemplateRef));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Represents a container where one or more Views can be attached.
  * *
  * The container can contain two kinds of Views. Host Views, created by instantiating a
  * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
  * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
  * *
  * The location of the View Container within the containing View is specified by the Anchor
  * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
  * have a single View Container.
  * *
  * Root elements of Views attached to this container become siblings of the Anchor Element in
  * the Rendered View.
  * *
  * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
  * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
 * @abstract
 */
var ViewContainerRef = (function () {
    function ViewContainerRef() {
    }
    Object.defineProperty(ViewContainerRef.prototype, "element", {
        /**
         *  Anchor element that specifies the location of this container in the containing View.
          * <!-- TODO: rename to anchorElement -->
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    /**
     *  Destroys all Views in this container.
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.clear = function () { };
    /**
     *  Returns the {@link ViewRef} for the View located in this container at the specified index.
     * @abstract
     * @param {?} index
     * @return {?}
     */
    ViewContainerRef.prototype.get = function (index) { };
    Object.defineProperty(ViewContainerRef.prototype, "length", {
        /**
         *  Returns the number of Views currently attached to this container.
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    
    /**
     *  Instantiates an Embedded View based on the {@link TemplateRef `templateRef`} and inserts it
      * into this container at the specified `index`.
      * *
      * If `index` is not specified, the new View will be inserted as the last View in the container.
      * *
      * Returns the {@link ViewRef} for the newly created View.
     * @abstract
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
    /**
     *  Instantiates a single {@link Component} and inserts its Host View into this container at the
      * specified `index`.
      * *
      * The component is instantiated using its {@link ComponentFactory} which can be
      * obtained via {@link ComponentFactoryResolver#resolveComponentFactory}.
      * *
      * If `index` is not specified, the new View will be inserted as the last View in the container.
      * *
      * You can optionally specify the {@link Injector} that will be used as parent for the Component.
      * *
      * Returns the {@link ComponentRef} of the Host View created for the newly instantiated Component.
     * @abstract
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @return {?}
     */
    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };
    /**
     *  Inserts a View identified by a {@link ViewRef} into the container at the specified `index`.
      * *
      * If `index` is not specified, the new View will be inserted as the last View in the container.
      * *
      * Returns the inserted {@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.insert = function (viewRef, index) { };
    /**
     *  Moves a View identified by a {@link ViewRef} into the container at the specified `index`.
      * *
      * Returns the inserted {@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
    /**
     *  Returns the index of the View, specified via {@link ViewRef}, within the current container or
      * `-1` if this container doesn't contain the View.
     * @abstract
     * @param {?} viewRef
     * @return {?}
     */
    ViewContainerRef.prototype.indexOf = function (viewRef) { };
    /**
     *  Destroys a View attached to this container at the specified `index`.
      * *
      * If `index` is not specified, the last View in the container will be removed.
     * @abstract
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.remove = function (index) { };
    /**
     *  Use along with {@link #insert} to move a View within the current container.
      * *
      * If the `index` param is omitted, the last {@link ViewRef} is detached.
     * @abstract
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.detach = function (index) { };
    return ViewContainerRef;
}());
var ViewContainerRef_ = (function () {
    /**
     * @param {?} _element
     */
    function ViewContainerRef_(_element) {
        this._element = _element;
        /** @internal */
        this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
        /** @internal */
        this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
        /** @internal */
        this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
        /** @internal */
        this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
    }
    /**
     * @param {?} index
     * @return {?}
     */
    ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ views = this._element.nestedViews;
            return isPresent(views) ? views.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
        /**
         * @return {?}
         */
        get: function () { return this._element.elementRef; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._element.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
        /**
         * @return {?}
         */
        get: function () { return this._element.parentInjector; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
        if (context === void 0) { context = null; }
        if (index === void 0) { index = -1; }
        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);
        this.insert(viewRef, index);
        return viewRef;
    };
    /**
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @return {?}
     */
    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
        if (index === void 0) { index = -1; }
        if (injector === void 0) { injector = null; }
        if (projectableNodes === void 0) { projectableNodes = null; }
        var /** @type {?} */ s = this._createComponentInContainerScope();
        var /** @type {?} */ contextInjector = injector || this._element.parentInjector;
        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);
        this.insert(componentRef.hostView, index);
        return wtfLeave(s, componentRef);
    };
    /**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.insert = function (viewRef, index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._insertScope();
        if (index == -1)
            index = this.length;
        var /** @type {?} */ viewRef_ = (viewRef);
        this._element.attachView(viewRef_.internalView, index);
        return wtfLeave(s, viewRef_);
    };
    /**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
        var /** @type {?} */ s = this._insertScope();
        if (currentIndex == -1)
            return;
        var /** @type {?} */ viewRef_ = (viewRef);
        this._element.moveView(viewRef_.internalView, currentIndex);
        return wtfLeave(s, viewRef_);
    };
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ViewContainerRef_.prototype.indexOf = function (viewRef) {
        return this._element.nestedViews.indexOf(((viewRef)).internalView);
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.remove = function (index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._removeScope();
        if (index == -1)
            index = this.length - 1;
        var /** @type {?} */ view = this._element.detachView(index);
        view.destroy();
        // view is intentionally not returned to the client.
        wtfLeave(s);
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.detach = function (index) {
        if (index === void 0) { index = -1; }
        var /** @type {?} */ s = this._detachScope();
        if (index == -1)
            index = this.length - 1;
        var /** @type {?} */ view = this._element.detachView(index);
        return wtfLeave(s, view.ref);
    };
    /**
     * @return {?}
     */
    ViewContainerRef_.prototype.clear = function () {
        for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {
            this.remove(i);
        }
    };
    return ViewContainerRef_;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$11 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @abstract
 */
var ViewRef = (function (_super) {
    __extends$11(ViewRef, _super);
    function ViewRef() {
        _super.apply(this, arguments);
    }
    /**
     *  Destroys the view and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    ViewRef.prototype.destroy = function () { };
    Object.defineProperty(ViewRef.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    /**
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    ViewRef.prototype.onDestroy = function (callback) { };
    return ViewRef;
}(ChangeDetectorRef));
/**
 *  Represents an Angular View.
  * *
  * <!-- TODO: move the next two paragraphs to the dev guide -->
  * A View is a fundamental building block of the application UI. It is the smallest grouping of
  * Elements which are created and destroyed together.
  * *
  * Properties of elements in a View can change, but the structure (number and order) of elements in
  * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
  * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
  * <!-- /TODO -->
  * *
  * ### Example
  * *
  * Given this template...
  * *
  * ```
  * Count: {{items.length}}
  * <ul>
  * <li *ngFor="let  item of items">{{item}}</li>
  * </ul>
  * ```
  * *
  * We have two {@link TemplateRef}s:
  * *
  * Outer {@link TemplateRef}:
  * ```
  * Count: {{items.length}}
  * <ul>
  * <template ngFor let-item [ngForOf]="items"></template>
  * </ul>
  * ```
  * *
  * Inner {@link TemplateRef}:
  * ```
  * <li>{{item}}</li>
  * ```
  * *
  * Notice that the original template is broken down into two separate {@link TemplateRef}s.
  * *
  * The outer/inner {@link TemplateRef}s are then assembled into views like so:
  * *
  * ```
  * <!-- ViewRef: outer-0 -->
  * Count: 2
  * <ul>
  * <template view-container-ref></template>
  * <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
  * <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
  * </ul>
  * <!-- /ViewRef: outer-0 -->
  * ```
 * @abstract
 */
var EmbeddedViewRef = (function (_super) {
    __extends$11(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(EmbeddedViewRef.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return unimplemented(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    
    return EmbeddedViewRef;
}(ViewRef));
var ViewRef_ = (function () {
    /**
     * @param {?} _view
     * @param {?} animationQueue
     */
    function ViewRef_(_view, animationQueue) {
        this._view = _view;
        this.animationQueue = animationQueue;
        this._view = _view;
        this._originalMode = this._view.cdMode;
    }
    Object.defineProperty(ViewRef_.prototype, "internalView", {
        /**
         * @return {?}
         */
        get: function () { return this._view; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
        /**
         * @return {?}
         */
        get: function () { return this._view.flatRootNodes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return this._view.destroyed; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detectChanges = function () {
        this._view.detectChanges(false);
        this.animationQueue.flush();
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.reattach = function () {
        this._view.cdMode = this._originalMode;
        this.markForCheck();
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    ViewRef_.prototype.onDestroy = function (callback) {
        if (!this._view.disposables) {
            this._view.disposables = [];
        }
        this._view.disposables.push(callback);
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
    return ViewRef_;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for compiler

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$12 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EventListener = (function () {
    /**
     * @param {?} name
     * @param {?} callback
     */
    function EventListener(name, callback) {
        this.name = name;
        this.callback = callback;
    }
    
    return EventListener;
}());
/**
 * @experimental All debugging apis are currently experimental.
 */
var DebugNode = (function () {
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */
    function DebugNode(nativeNode, parent, _debugInfo) {
        this._debugInfo = _debugInfo;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
        }
        else {
            this.parent = null;
        }
        this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
        /**
         * @return {?}
         */
        get: function () { return this._debugInfo ? this._debugInfo.component : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this._debugInfo ? this._debugInfo.context : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
        /**
         * @return {?}
         */
        get: function () {
            return this._debugInfo ? this._debugInfo.references : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
        /**
         * @return {?}
         */
        get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
        /**
         * @return {?}
         */
        get: function () { return this._debugInfo ? this._debugInfo.source : null; },
        enumerable: true,
        configurable: true
    });
    return DebugNode;
}());
/**
 * @experimental All debugging apis are currently experimental.
 */
var DebugElement = (function (_super) {
    __extends$12(DebugElement, _super);
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugInfo
     */
    function DebugElement(nativeNode, parent, _debugInfo) {
        _super.call(this, nativeNode, parent, _debugInfo);
        this.properties = {};
        this.attributes = {};
        this.classes = {};
        this.styles = {};
        this.childNodes = [];
        this.nativeElement = nativeNode;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.addChild = function (child) {
        if (child) {
            this.childNodes.push(child);
            child.parent = this;
        }
    };
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.removeChild = function (child) {
        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
        if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
        }
    };
    /**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */
    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
        if (siblingIndex !== -1) {
            var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);
            var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);
            this.childNodes = previousChildren.concat(newChildren, nextChildren);
            for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {
                var /** @type {?} */ newChild = newChildren[i];
                if (newChild.parent) {
                    newChild.parent.removeChild(newChild);
                }
                newChild.parent = this;
            }
        }
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.query = function (predicate) {
        var /** @type {?} */ results = this.queryAll(predicate);
        return results[0] || null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAll = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryElementChildren(this, predicate, matches);
        return matches;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAllNodes = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryNodeChildren(this, predicate, matches);
        return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
        /**
         * @return {?}
         */
        get: function () {
            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
        this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
                listener.callback(eventObj);
            }
        });
    };
    return DebugElement;
}(DebugNode));
/**
 * @param {?} debugEls
 * @return {?}
 */

/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    });
}
/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
        parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement) {
                _queryNodeChildren(node, predicate, matches);
            }
        });
    }
}
// Need to keep the nodes in a global Map so that multiple angular apps are supported.
var _nativeNodeToDebugNode = new Map();
/**
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode);
}
/**
 * @return {?}
 */

/**
 * @param {?} node
 * @return {?}
 */
function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
/**
 * @param {?} node
 * @return {?}
 */
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Change detection enables data binding in Angular.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function _reflector() {
    return reflector;
}
var _CORE_PLATFORM_PROVIDERS = [
    PlatformRef_,
    { provide: PlatformRef, useExisting: PlatformRef_ },
    { provide: Reflector, useFactory: _reflector, deps: [] },
    { provide: ReflectorReader, useExisting: Reflector },
    TestabilityRegistry,
    Console,
];
/**
 * This platform has to be included in any other platform
 *
 * @experimental
 */
var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental i18n support is experimental.
 */
var LOCALE_ID = new OpaqueToken('LocaleId');
/**
 * @experimental i18n support is experimental.
 */
var TRANSLATIONS = new OpaqueToken('Translations');
/**
 * @experimental i18n support is experimental.
 */
var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
/**
 * @return {?}
 */
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
/**
 * @param {?=} locale
 * @return {?}
 */
function _localeFactory(locale) {
    return locale || 'en-US';
}
/**
 *  This module includes the providers of @angular/core that are needed
  * to bootstrap components via `ApplicationRef`.
  * *
 */
var ApplicationModule = (function () {
    function ApplicationModule() {
    }
    ApplicationModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ApplicationRef_,
                        { provide: ApplicationRef, useExisting: ApplicationRef_ },
                        ApplicationInitStatus,
                        Compiler,
                        APP_ID_RANDOM_PROVIDER,
                        ViewUtils,
                        AnimationQueue,
                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                        {
                            provide: LOCALE_ID,
                            useFactory: _localeFactory,
                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                        },
                    ]
                },] },
    ];
    /** @nocollapse */
    ApplicationModule.ctorParameters = function () { return []; };
    return ApplicationModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
var ANY_STATE = '*';
var DEFAULT_STATE = '*';
var EMPTY_STATE = 'void';

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationGroupPlayer = (function () {
    /**
     * @param {?} _players
     */
    function AnimationGroupPlayer(_players) {
        var _this = this;
        this._players = _players;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        var count = 0;
        var total = this._players.length;
        if (total == 0) {
            scheduleMicroTask(function () { return _this._onFinish(); });
        }
        else {
            this._players.forEach(function (player) {
                player.parentPlayer = _this;
                player.onDone(function () {
                    if (++count >= total) {
                        _this._onFinish();
                    }
                });
            });
        }
    }
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.play = function () {
        if (!isPresent(this.parentPlayer)) {
            this.init();
        }
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._players.forEach(function (player) { return player.play(); });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.finish = function () {
        this._onFinish();
        this._players.forEach(function (player) { return player.finish(); });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) { return player.destroy(); });
            this._destroyed = true;
        }
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.reset = function () {
        this._players.forEach(function (player) { return player.reset(); });
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    /**
     * @param {?} p
     * @return {?}
     */
    AnimationGroupPlayer.prototype.setPosition = function (p) {
        this._players.forEach(function (player) { player.setPosition(p); });
    };
    /**
     * @return {?}
     */
    AnimationGroupPlayer.prototype.getPosition = function () {
        var /** @type {?} */ min = 0;
        this._players.forEach(function (player) {
            var /** @type {?} */ p = player.getPosition();
            min = Math.min(p, min);
        });
        return min;
    };
    Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
        /**
         * @return {?}
         */
        get: function () { return this._players; },
        enumerable: true,
        configurable: true
    });
    return AnimationGroupPlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationKeyframe = (function () {
    /**
     * @param {?} offset
     * @param {?} styles
     */
    function AnimationKeyframe(offset, styles) {
        this.offset = offset;
        this.styles = styles;
    }
    return AnimationKeyframe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @abstract
 */
var AnimationPlayer = (function () {
    function AnimationPlayer() {
    }
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    AnimationPlayer.prototype.onDone = function (fn) { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    AnimationPlayer.prototype.onStart = function (fn) { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.init = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.hasStarted = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.play = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.pause = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.restart = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.finish = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.destroy = function () { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.reset = function () { };
    /**
     * @abstract
     * @param {?} p
     * @return {?}
     */
    AnimationPlayer.prototype.setPosition = function (p) { };
    /**
     * @abstract
     * @return {?}
     */
    AnimationPlayer.prototype.getPosition = function () { };
    Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
        /**
         * @return {?}
         */
        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
        /**
         * @param {?} player
         * @return {?}
         */
        set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
        enumerable: true,
        configurable: true
    });
    return AnimationPlayer;
}());
var NoOpAnimationPlayer = (function () {
    function NoOpAnimationPlayer() {
        var _this = this;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._started = false;
        this.parentPlayer = null;
        scheduleMicroTask(function () { return _this._onFinish(); });
    }
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype._onFinish = function () {
        this._onDoneFns.forEach(function (fn) { return fn(); });
        this._onDoneFns = [];
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.init = function () { };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.play = function () {
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
        }
        this._started = true;
    };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.pause = function () { };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.restart = function () { };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.destroy = function () { };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.reset = function () { };
    /**
     * @param {?} p
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.setPosition = function (p) { };
    /**
     * @return {?}
     */
    NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
    return NoOpAnimationPlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AnimationSequencePlayer = (function () {
    /**
     * @param {?} _players
     */
    function AnimationSequencePlayer(_players) {
        var _this = this;
        this._players = _players;
        this._currentIndex = 0;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        this._players.forEach(function (player) { player.parentPlayer = _this; });
        this._onNext(false);
    }
    /**
     * @param {?} start
     * @return {?}
     */
    AnimationSequencePlayer.prototype._onNext = function (start) {
        var _this = this;
        if (this._finished)
            return;
        if (this._players.length == 0) {
            this._activePlayer = new NoOpAnimationPlayer();
            scheduleMicroTask(function () { return _this._onFinish(); });
        }
        else if (this._currentIndex >= this._players.length) {
            this._activePlayer = new NoOpAnimationPlayer();
            this._onFinish();
        }
        else {
            var /** @type {?} */ player = this._players[this._currentIndex++];
            player.onDone(function () { return _this._onNext(true); });
            this._activePlayer = player;
            if (start) {
                player.play();
            }
        }
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.play = function () {
        if (!isPresent(this.parentPlayer)) {
            this.init();
        }
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._activePlayer.play();
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.restart = function () {
        this.reset();
        if (this._players.length > 0) {
            this._players[0].restart();
        }
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.reset = function () {
        this._players.forEach(function (player) { return player.reset(); });
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.finish = function () {
        this._onFinish();
        this._players.forEach(function (player) { return player.finish(); });
    };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._onFinish();
            this._players.forEach(function (player) { return player.destroy(); });
            this._destroyed = true;
            this._activePlayer = new NoOpAnimationPlayer();
        }
    };
    /**
     * @param {?} p
     * @return {?}
     */
    AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
    /**
     * @return {?}
     */
    AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
    Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
        /**
         * @return {?}
         */
        get: function () { return this._players; },
        enumerable: true,
        configurable: true
    });
    return AnimationSequencePlayer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$13 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @experimental Animation support is experimental.
 */
var AUTO_STYLE = '*';
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link trigger trigger
  * animation function} is called.
  * *
 */

/**
 * @abstract
 */
var AnimationStateMetadata = (function () {
    function AnimationStateMetadata() {
    }
    return AnimationStateMetadata;
}());
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link state state animation
  * function} is called.
  * *
 */
var AnimationStateDeclarationMetadata = (function (_super) {
    __extends$13(AnimationStateDeclarationMetadata, _super);
    /**
     * @param {?} stateNameExpr
     * @param {?} styles
     */
    function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
        _super.call(this);
        this.stateNameExpr = stateNameExpr;
        this.styles = styles;
    }
    return AnimationStateDeclarationMetadata;
}(AnimationStateMetadata));
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the
  * {@link transition transition animation function} is called.
  * *
 */
var AnimationStateTransitionMetadata = (function (_super) {
    __extends$13(AnimationStateTransitionMetadata, _super);
    /**
     * @param {?} stateChangeExpr
     * @param {?} steps
     */
    function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
        _super.call(this);
        this.stateChangeExpr = stateChangeExpr;
        this.steps = steps;
    }
    return AnimationStateTransitionMetadata;
}(AnimationStateMetadata));
/**
 * @abstract
 */
var AnimationMetadata = (function () {
    function AnimationMetadata() {
    }
    return AnimationMetadata;
}());
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes
  * animation function} is called.
  * *
 */
var AnimationKeyframesSequenceMetadata = (function (_super) {
    __extends$13(AnimationKeyframesSequenceMetadata, _super);
    /**
     * @param {?} steps
     */
    function AnimationKeyframesSequenceMetadata(steps) {
        _super.call(this);
        this.steps = steps;
    }
    return AnimationKeyframesSequenceMetadata;
}(AnimationMetadata));
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link style style animation
  * function} is called.
  * *
 */
var AnimationStyleMetadata = (function (_super) {
    __extends$13(AnimationStyleMetadata, _super);
    /**
     * @param {?} styles
     * @param {?=} offset
     */
    function AnimationStyleMetadata(styles, offset) {
        if (offset === void 0) { offset = null; }
        _super.call(this);
        this.styles = styles;
        this.offset = offset;
    }
    return AnimationStyleMetadata;
}(AnimationMetadata));
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link animate animate
  * animation function} is called.
  * *
 */
var AnimationAnimateMetadata = (function (_super) {
    __extends$13(AnimationAnimateMetadata, _super);
    /**
     * @param {?} timings
     * @param {?} styles
     */
    function AnimationAnimateMetadata(timings, styles) {
        _super.call(this);
        this.timings = timings;
        this.styles = styles;
    }
    return AnimationAnimateMetadata;
}(AnimationMetadata));
/**
 * @abstract
 */
var AnimationWithStepsMetadata = (function (_super) {
    __extends$13(AnimationWithStepsMetadata, _super);
    function AnimationWithStepsMetadata() {
        _super.call(this);
    }
    Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
        /**
         * @return {?}
         */
        get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
        enumerable: true,
        configurable: true
    });
    return AnimationWithStepsMetadata;
}(AnimationMetadata));
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link sequence sequence
  * animation function} is called.
  * *
 */
var AnimationSequenceMetadata = (function (_super) {
    __extends$13(AnimationSequenceMetadata, _super);
    /**
     * @param {?} _steps
     */
    function AnimationSequenceMetadata(_steps) {
        _super.call(this);
        this._steps = _steps;
    }
    Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
        /**
         * @return {?}
         */
        get: function () { return this._steps; },
        enumerable: true,
        configurable: true
    });
    return AnimationSequenceMetadata;
}(AnimationWithStepsMetadata));
/**
 *  Metadata representing the entry of animations.
  * Instances of this class are provided via the animation DSL when the {@link group group animation
  * function} is called.
  * *
 */
var AnimationGroupMetadata = (function (_super) {
    __extends$13(AnimationGroupMetadata, _super);
    /**
     * @param {?} _steps
     */
    function AnimationGroupMetadata(_steps) {
        _super.call(this);
        this._steps = _steps;
    }
    Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
        /**
         * @return {?}
         */
        get: function () { return this._steps; },
        enumerable: true,
        configurable: true
    });
    return AnimationGroupMetadata;
}(AnimationWithStepsMetadata));
/**
 *  `animate` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `animate` specifies an animation step that will apply the provided `styles` data for a given
  * amount of
  * time based on the provided `timing` expression value. Calls to `animate` are expected to be
  * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition
  * transition}.
  * *
  * ### Usage
  * *
  * The `animate` function accepts two input parameters: `timing` and `styles`:
  * *
  * - `timing` is a string based value that can be a combination of a duration with optional
  * delay and easing values. The format for the expression breaks down to `duration delay easing`
  * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
  * delay=100, easing=ease-out`.
  * If a numeric value is provided then that will be used as the `duration` value in millisecond
  * form.
  * - `styles` is the style input data which can either be a call to {@link style style} or {@link
  * keyframes keyframes}.
  * If left empty then the styles from the destination state will be collected and used (this is
  * useful when
  * describing an animation step that will complete an animation by {@link
  * transition#the-final-animate-call animating to the final state}).
  * *
  * ```typescript
  * // various functions for specifying timing data
  * animate(500, style(...))
  * animate("1s", style(...))
  * animate("100ms 0.5s", style(...))
  * animate("5s ease", style(...))
  * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
  * *
  * // either style() of keyframes() can be used
  * animate(500, style({ background: "red" }))
  * animate(500, keyframes([
  * style({ background: "blue" })),
  * style({ background: "red" }))
  * ])
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} timing
 * @param {?=} styles
 * @return {?}
 */

/**
 *  `group` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
  * are useful when a series of styles must be animated/closed off
  * at different statrting/ending times.
  * *
  * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
  * transition}
  * and it will only continue to the next instruction once all of the inner animation steps
  * have completed.
  * *
  * ### Usage
  * *
  * The `steps` data that is passed into the `group` animation function can either consist
  * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or
  * `animate()`
  * within a group will be executed instantly (use {@link keyframes keyframes} or a
  * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later
  * time).
  * *
  * ```typescript
  * group([
  * animate("1s", { background: "black" }))
  * animate("2s", { color: "white" }))
  * ])
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} steps
 * @return {?}
 */

/**
 *  `sequence` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
  * by default when an array is passed as animation data into {@link transition transition}.)
  * *
  * The `sequence` function can either be used within a {@link group group} or a {@link transition
  * transition}
  * and it will only continue to the next instruction once each of the inner animation steps
  * have completed.
  * *
  * To perform animation styling in parallel with other animation steps then
  * have a look at the {@link group group} animation function.
  * *
  * ### Usage
  * *
  * The `steps` data that is passed into the `sequence` animation function can either consist
  * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply
  * the
  * provided styling data immediately while a call to `animate()` will apply its styling
  * data over a given time depending on its timing data.
  * *
  * ```typescript
  * sequence([
  * style({ opacity: 0 })),
  * animate("1s", { opacity: 1 }))
  * ])
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} steps
 * @return {?}
 */

/**
 *  `style` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `style` declares a key/value object containing CSS properties/styles that can then
  * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as
  * styling data for both {@link animate animate} and {@link keyframes keyframes}.
  * *
  * ### Usage
  * *
  * `style` takes in a key/value string map as data and expects one or more CSS property/value
  * pairs to be defined.
  * *
  * ```typescript
  * // string values are used for css properties
  * style({ background: "red", color: "blue" })
  * *
  * // numerical (pixel) values are also supported
  * style({ width: 100, height: 0 })
  * ```
  * *
  * #### Auto-styles (using `*`)
  * *
  * When an asterix (`*`) character is used as a value then it will be detected from the element
  * being animated
  * and applied as animation data when the animation starts.
  * *
  * This feature proves useful for a state depending on layout and/or environment factors; in such
  * cases
  * the styles are calculated just before the animation starts.
  * *
  * ```typescript
  * // the steps below will animate from 0 to the
  * // actual height of the element
  * style({ height: 0 }),
  * animate("1s", style({ height: "*" }))
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} tokens
 * @return {?}
 */

/**
 *  `state` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `state` declares an animation state within the given trigger. When a state is
  * active within a component then its associated styles will persist on
  * the element that the trigger is attached to (even when the animation ends).
  * *
  * To animate between states, have a look at the animation {@link transition transition}
  * DSL function. To register states to an animation trigger please have a look
  * at the {@link trigger trigger} function.
  * *
  * #### The `void` state
  * *
  * The `void` state value is a reserved word that angular uses to determine when the element is not
  * apart
  * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
  * associated element
  * is void).
  * *
  * #### The `*` (default) state
  * *
  * The `*` state (when styled) is a fallback state that will be used if
  * the state that is being animated is not declared within the trigger.
  * *
  * ### Usage
  * *
  * `state` will declare an animation state with its associated styles
  * within the given trigger.
  * *
  * - `stateNameExpr` can be one or more state names separated by commas.
  * - `styles` refers to the {@link style styling data} that will be persisted on the element once
  * the state
  * has been reached.
  * *
  * ```typescript
  * // "void" is a reserved name for a state and is used to represent
  * // the state in which an element is detached from from the application.
  * state("void", style({ height: 0 }))
  * *
  * // user-defined states
  * state("closed", style({ height: 0 }))
  * state("open, visible", style({ height: "*" }))
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} stateNameExpr
 * @param {?} styles
 * @return {?}
 */

/**
 *  `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
  * by an `offset` value.
  * *
  * ### Usage
  * *
  * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
  * animation function. Instead of applying animations from where they are
  * currently to their destination, keyframes can describe how each style entry is applied
  * and at what point within the animation arc (much like CSS Keyframe Animations do).
  * *
  * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
  * what percentage of the animate time the styles will be applied.
  * *
  * ```typescript
  * // the provided offset values describe when each backgroundColor value is applied.
  * animate("5s", keyframes([
  * style({ backgroundColor: "red", offset: 0 }),
  * style({ backgroundColor: "blue", offset: 0.2 }),
  * style({ backgroundColor: "orange", offset: 0.3 }),
  * style({ backgroundColor: "black", offset: 1 })
  * ]))
  * ```
  * *
  * Alternatively, if there are no `offset` values used within the style entries then the offsets
  * will
  * be calculated automatically.
  * *
  * ```typescript
  * animate("5s", keyframes([
  * style({ backgroundColor: "red" }) // offset = 0
  * style({ backgroundColor: "blue" }) // offset = 0.33
  * style({ backgroundColor: "orange" }) // offset = 0.66
  * style({ backgroundColor: "black" }) // offset = 1
  * ]))
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} steps
 * @return {?}
 */

/**
 *  `transition` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
  * provided
  * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
  * which consists
  * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
  * *
  * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
  * to animate to
  * a state value and persist its styles then one or more {@link state animation states} is expected
  * to be defined.
  * *
  * ### Usage
  * *
  * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
  * what the
  * previous state is and what the current state has become. In other words, if a transition is
  * defined that
  * matches the old/current state criteria then the associated animation will be triggered.
  * *
  * ```typescript
  * // all transition/state changes are defined within an animation trigger
  * trigger("myAnimationTrigger", [
  * // if a state is defined then its styles will be persisted when the
  * // animation has fully completed itself
  * state("on", style({ background: "green" })),
  * state("off", style({ background: "grey" })),
  * *
  * // a transition animation that will be kicked off when the state value
  * // bound to "myAnimationTrigger" changes from "on" to "off"
  * transition("on => off", animate(500)),
  * *
  * // it is also possible to do run the same animation for both directions
  * transition("on <=> off", animate(500)),
  * *
  * // or to define multiple states pairs separated by commas
  * transition("on => off, off => void", animate(500)),
  * *
  * // this is a catch-all state change for when an element is inserted into
  * // the page and the destination state is unknown
  * transition("void => *", [
  * style({ opacity: 0 }),
  * animate(500)
  * ]),
  * *
  * // this will capture a state change between any states
  * transition("* => *", animate("1s 0s")),
  * ])
  * ```
  * *
  * The template associated with this component will make use of the `myAnimationTrigger`
  * animation trigger by binding to an element within its template code.
  * *
  * ```html
  * <!-- somewhere inside of my-component-tpl.html -->
  * <div [@myAnimationTrigger]="myStatusExp">...</div>
  * ```
  * *
  * #### The final `animate` call
  * *
  * If the final step within the transition steps is a call to `animate()` that **only**
  * uses a timing value with **no style data** then it will be automatically used as the final
  * animation
  * arc for the element to animate itself to the final state. This involves an automatic mix of
  * adding/removing CSS styles so that the element will be in the exact state it should be for the
  * applied state to be presented correctly.
  * *
  * ```
  * // start off by hiding the element, but make sure that it animates properly to whatever state
  * // is currently active for "myAnimationTrigger"
  * transition("void => *", [
  * style({ opacity: 0 }),
  * animate(500)
  * ])
  * ```
  * *
  * ### Transition Aliases (`:enter` and `:leave`)
  * *
  * Given that enter (insertion) and leave (removal) animations are so common,
  * the `transition` function accepts both `:enter` and `:leave` values which
  * are aliases for the `void => *` and `* => void` state changes.
  * *
  * ```
  * transition(":enter", [
  * style({ opacity: 0 }),
  * animate(500, style({ opacity: 1 }))
  * ])
  * transition(":leave", [
  * animate(500, style({ opacity: 0 }))
  * ])
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */

/**
 *  `trigger` is an animation-specific function that is designed to be used inside of Angular2's
  * animation
  * DSL language. If this information is new, please navigate to the
  * {@link Component#animations-anchor component animations metadata
  * page} to gain a better understanding of how animations in Angular2 are used.
  * *
  * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
  * transition transition}
  * entries that will be evaluated when the expression bound to the trigger changes.
  * *
  * Triggers are registered within the component annotation data under the
  * {@link Component#animations-anchor animations section}. An animation trigger can
  * be placed on an element within a template by referencing the name of the
  * trigger followed by the expression value that the trigger is bound to
  * (in the form of `[@triggerName]="expression"`.
  * *
  * ### Usage
  * *
  * `trigger` will create an animation trigger reference based on the provided `name` value.
  * The provided `animation` value is expected to be an array consisting of {@link state state} and
  * {@link transition transition}
  * declarations.
  * *
  * ```typescript
  * selector: 'my-component',
  * templateUrl: 'my-component-tpl.html',
  * animations: [
  * trigger("myAnimationTrigger", [
  * state(...),
  * state(...),
  * transition(...),
  * transition(...)
  * ])
  * ]
  * })
  * class MyComponent {
  * myStatusExp = "something";
  * }
  * ```
  * *
  * The template associated with this component will make use of the `myAnimationTrigger`
  * animation trigger by binding to an element within its template code.
  * *
  * ```html
  * <!-- somewhere inside of my-component-tpl.html -->
  * <div [@myAnimationTrigger]="myStatusExp">...</div>
  * ```
  * *
  * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
  * *
  * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
  * *
 * @param {?} name
 * @param {?} animation
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} previousStyles
 * @param {?} newStyles
 * @param {?=} nullValue
 * @return {?}
 */
function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
    if (nullValue === void 0) { nullValue = null; }
    var /** @type {?} */ finalStyles = {};
    Object.keys(newStyles).forEach(function (prop) {
        var /** @type {?} */ value = newStyles[prop];
        finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
    });
    Object.keys(previousStyles).forEach(function (prop) {
        if (!isPresent(finalStyles[prop])) {
            finalStyles[prop] = nullValue;
        }
    });
    return finalStyles;
}
/**
 * @param {?} collectedStyles
 * @param {?} finalStateStyles
 * @param {?} keyframes
 * @return {?}
 */
function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes$$1) {
    var /** @type {?} */ limit = keyframes$$1.length - 1;
    var /** @type {?} */ firstKeyframe = keyframes$$1[0];
    // phase 1: copy all the styles from the first keyframe into the lookup map
    var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
    var /** @type {?} */ extraFirstKeyframeStyles = {};
    var /** @type {?} */ hasExtraFirstStyles = false;
    Object.keys(collectedStyles).forEach(function (prop) {
        var /** @type {?} */ value = (collectedStyles[prop]);
        // if the style is already defined in the first keyframe then
        // we do not replace it.
        if (!flatenedFirstKeyframeStyles[prop]) {
            flatenedFirstKeyframeStyles[prop] = value;
            extraFirstKeyframeStyles[prop] = value;
            hasExtraFirstStyles = true;
        }
    });
    var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
    // phase 2: normalize the final keyframe
    var /** @type {?} */ finalKeyframe = keyframes$$1[limit];
    finalKeyframe.styles.styles.unshift(finalStateStyles);
    var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
    var /** @type {?} */ extraFinalKeyframeStyles = {};
    var /** @type {?} */ hasExtraFinalStyles = false;
    Object.keys(keyframeCollectedStyles).forEach(function (prop) {
        if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
            extraFinalKeyframeStyles[prop] = AUTO_STYLE;
            hasExtraFinalStyles = true;
        }
    });
    if (hasExtraFinalStyles) {
        finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
    }
    Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
        if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
            extraFirstKeyframeStyles[prop] = AUTO_STYLE;
            hasExtraFirstStyles = true;
        }
    });
    if (hasExtraFirstStyles) {
        firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
    }
    collectAndResolveStyles(collectedStyles, [finalStateStyles]);
    return keyframes$$1;
}
/**
 * @param {?} styles
 * @return {?}
 */
function clearStyles(styles) {
    var /** @type {?} */ finalStyles = {};
    Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
    return finalStyles;
}
/**
 * @param {?} collection
 * @param {?} styles
 * @return {?}
 */
function collectAndResolveStyles(collection, styles) {
    return styles.map(function (entry) {
        var /** @type {?} */ stylesObj = {};
        Object.keys(entry).forEach(function (prop) {
            var /** @type {?} */ value = entry[prop];
            if (value == FILL_STYLE_FLAG) {
                value = collection[prop];
                if (!isPresent(value)) {
                    value = AUTO_STYLE;
                }
            }
            collection[prop] = value;
            stylesObj[prop] = value;
        });
        return stylesObj;
    });
}
/**
 * @param {?} element
 * @param {?} renderer
 * @param {?} styles
 * @return {?}
 */
function renderStyles(element, renderer, styles) {
    Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
}
/**
 * @param {?} styles
 * @return {?}
 */
function flattenStyles(styles) {
    var /** @type {?} */ finalStyles = {};
    styles.forEach(function (entry) {
        Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });
    });
    return finalStyles;
}

/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 */
var AnimationStyles = (function () {
    /**
     * @param {?} styles
     */
    function AnimationStyles(styles) {
        this.styles = styles;
    }
    return AnimationStyles;
}());

/**
 *  An instance of this class is returned as an event parameter when an animation
  * callback is captured for an animation either during the start or done phase.
  * *
  * ```typescript
  * host: {
  * '[@myAnimationTrigger]': 'someExpression',
  * '(@myAnimationTrigger.start)': 'captureStartEvent($event)',
  * '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',
  * },
  * animations: [
  * trigger("myAnimationTrigger", [
  * // ...
  * ])
  * ]
  * })
  * class MyComponent {
  * someExpression: any = false;
  * captureStartEvent(event: AnimationTransitionEvent) {
  * // the toState, fromState and totalTime data is accessible from the event variable
  * }
  * *
  * captureDoneEvent(event: AnimationTransitionEvent) {
  * // the toState, fromState and totalTime data is accessible from the event variable
  * }
  * }
  * ```
  * *
 */
var AnimationTransitionEvent = (function () {
    /**
     * @param {?} __0
     */
    function AnimationTransitionEvent(_a) {
        var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
        this.fromState = fromState;
        this.toState = toState;
        this.totalTime = totalTime;
        this.phaseName = phaseName;
    }
    return AnimationTransitionEvent;
}());

var AnimationTransition = (function () {
    /**
     * @param {?} _player
     * @param {?} _fromState
     * @param {?} _toState
     * @param {?} _totalTime
     */
    function AnimationTransition(_player, _fromState, _toState, _totalTime) {
        this._player = _player;
        this._fromState = _fromState;
        this._toState = _toState;
        this._totalTime = _totalTime;
    }
    /**
     * @param {?} phaseName
     * @return {?}
     */
    AnimationTransition.prototype._createEvent = function (phaseName) {
        return new AnimationTransitionEvent({
            fromState: this._fromState,
            toState: this._toState,
            totalTime: this._totalTime,
            phaseName: phaseName
        });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    AnimationTransition.prototype.onStart = function (callback) {
        var _this = this;
        var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));
        this._player.onStart(fn);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    AnimationTransition.prototype.onDone = function (callback) {
        var _this = this;
        var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));
        this._player.onDone(fn);
    };
    return AnimationTransition;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DebugDomRootRenderer = (function () {
    /**
     * @param {?} _delegate
     */
    function DebugDomRootRenderer(_delegate) {
        this._delegate = _delegate;
    }
    /**
     * @param {?} componentProto
     * @return {?}
     */
    DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
        return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
    };
    return DebugDomRootRenderer;
}());
var DebugDomRenderer = (function () {
    /**
     * @param {?} _delegate
     */
    function DebugDomRenderer(_delegate) {
        this._delegate = _delegate;
    }
    /**
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */
    DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
        var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
        var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);
        indexDebugNode(debugEl);
        return nativeEl;
    };
    /**
     * @param {?} parentElement
     * @param {?} name
     * @param {?=} debugInfo
     * @return {?}
     */
    DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
        var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
        var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
        debugEl.name = name;
        indexDebugNode(debugEl);
        return nativeEl;
    };
    /**
     * @param {?} hostElement
     * @return {?}
     */
    DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
    /**
     * @param {?} parentElement
     * @param {?=} debugInfo
     * @return {?}
     */
    DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
        var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
        var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
        indexDebugNode(debugEl);
        return comment;
    };
    /**
     * @param {?} parentElement
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
        var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);
        var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
        indexDebugNode(debugEl);
        return text;
    };
    /**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
        var /** @type {?} */ debugParent = getDebugNode(parentElement);
        if (isPresent(debugParent) && debugParent instanceof DebugElement) {
            var /** @type {?} */ debugElement_1 = debugParent;
            nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
        }
        this._delegate.projectNodes(parentElement, nodes);
    };
    /**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
        var /** @type {?} */ debugNode = getDebugNode(node);
        if (isPresent(debugNode)) {
            var /** @type {?} */ debugParent = debugNode.parent;
            if (viewRootNodes.length > 0 && isPresent(debugParent)) {
                var /** @type {?} */ debugViewRootNodes_1 = [];
                viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });
                debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
            }
        }
        this._delegate.attachViewAfter(node, viewRootNodes);
    };
    /**
     * @param {?} viewRootNodes
     * @return {?}
     */
    DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
        viewRootNodes.forEach(function (node) {
            var /** @type {?} */ debugNode = getDebugNode(node);
            if (isPresent(debugNode) && isPresent(debugNode.parent)) {
                debugNode.parent.removeChild(debugNode);
            }
        });
        this._delegate.detachView(viewRootNodes);
    };
    /**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
        viewAllNodes = viewAllNodes || [];
        viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
        this._delegate.destroyView(hostElement, viewAllNodes);
    };
    /**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
        var /** @type {?} */ debugEl = getDebugNode(renderElement);
        if (isPresent(debugEl)) {
            debugEl.listeners.push(new EventListener(name, callback));
        }
        return this._delegate.listen(renderElement, name, callback);
    };
    /**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
        return this._delegate.listenGlobal(target, name, callback);
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
        var /** @type {?} */ debugEl = getDebugNode(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.properties[propertyName] = propertyValue;
        }
        this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */
    DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
        var /** @type {?} */ debugEl = getDebugNode(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.attributes[attributeName] = attributeValue;
        }
        this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
        this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
        var /** @type {?} */ debugEl = getDebugNode(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.classes[className] = isAdd;
        }
        this._delegate.setElementClass(renderElement, className, isAdd);
    };
    /**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
        var /** @type {?} */ debugEl = getDebugNode(renderElement);
        if (isPresent(debugEl) && debugEl instanceof DebugElement) {
            debugEl.styles[styleName] = styleValue;
        }
        this._delegate.setElementStyle(renderElement, styleName, styleValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
        this._delegate.invokeElementMethod(renderElement, methodName, args);
    };
    /**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
    };
    return DebugDomRenderer;
}());

var ViewType = {};
ViewType.HOST = 0;
ViewType.COMPONENT = 1;
ViewType.EMBEDDED = 2;
ViewType[ViewType.HOST] = "HOST";
ViewType[ViewType.COMPONENT] = "COMPONENT";
ViewType[ViewType.EMBEDDED] = "EMBEDDED";

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var StaticNodeDebugInfo = (function () {
    /**
     * @param {?} providerTokens
     * @param {?} componentToken
     * @param {?} refTokens
     */
    function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
        this.providerTokens = providerTokens;
        this.componentToken = componentToken;
        this.refTokens = refTokens;
    }
    return StaticNodeDebugInfo;
}());
var DebugContext = (function () {
    /**
     * @param {?} _view
     * @param {?} _nodeIndex
     * @param {?} _tplRow
     * @param {?} _tplCol
     */
    function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
        this._view = _view;
        this._nodeIndex = _nodeIndex;
        this._tplRow = _tplRow;
        this._tplCol = _tplCol;
    }
    Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
        /**
         * @return {?}
         */
        get: function () {
            return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "component", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
                return this.injector.get(staticNodeInfo.componentToken);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ componentView = this._view;
            while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
                componentView = (componentView.parentView);
            }
            return componentView.parentElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._view.injector(this._nodeIndex); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "renderNode", {
        /**
         * @return {?}
         */
        get: function () {
            if (isPresent(this._nodeIndex) && this._view.allNodes) {
                return this._view.allNodes[this._nodeIndex];
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "providerTokens", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "source", {
        /**
         * @return {?}
         */
        get: function () {
            return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext.prototype, "references", {
        /**
         * @return {?}
         */
        get: function () {
            var _this = this;
            var /** @type {?} */ varValues = {};
            var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
            if (isPresent(staticNodeInfo)) {
                var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;
                Object.keys(refs_1).forEach(function (refName) {
                    var /** @type {?} */ refToken = refs_1[refName];
                    var /** @type {?} */ varValue;
                    if (isBlank(refToken)) {
                        varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
                    }
                    else {
                        varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
                    }
                    varValues[refName] = varValue;
                });
            }
            return varValues;
        },
        enumerable: true,
        configurable: true
    });
    return DebugContext;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ViewAnimationMap = (function () {
    function ViewAnimationMap() {
        this._map = new Map();
        this._allPlayers = [];
    }
    /**
     * @param {?} element
     * @param {?} animationName
     * @return {?}
     */
    ViewAnimationMap.prototype.find = function (element, animationName) {
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (isPresent(playersByAnimation)) {
            return playersByAnimation[animationName];
        }
    };
    /**
     * @param {?} element
     * @return {?}
     */
    ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
        var /** @type {?} */ el = this._map.get(element);
        return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
    };
    /**
     * @param {?} element
     * @param {?} animationName
     * @param {?} player
     * @return {?}
     */
    ViewAnimationMap.prototype.set = function (element, animationName, player) {
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (!isPresent(playersByAnimation)) {
            playersByAnimation = {};
        }
        var /** @type {?} */ existingEntry = playersByAnimation[animationName];
        if (isPresent(existingEntry)) {
            this.remove(element, animationName);
        }
        playersByAnimation[animationName] = player;
        this._allPlayers.push(player);
        this._map.set(element, playersByAnimation);
    };
    /**
     * @return {?}
     */
    ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
    /**
     * @param {?} element
     * @param {?} animationName
     * @param {?=} targetPlayer
     * @return {?}
     */
    ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {
        if (targetPlayer === void 0) { targetPlayer = null; }
        var /** @type {?} */ playersByAnimation = this._map.get(element);
        if (playersByAnimation) {
            var /** @type {?} */ player = playersByAnimation[animationName];
            if (!targetPlayer || player === targetPlayer) {
                delete playersByAnimation[animationName];
                var /** @type {?} */ index = this._allPlayers.indexOf(player);
                this._allPlayers.splice(index, 1);
                if (Object.keys(playersByAnimation).length === 0) {
                    this._map.delete(element);
                }
            }
        }
    };
    return ViewAnimationMap;
}());

var AnimationViewContext = (function () {
    /**
     * @param {?} _animationQueue
     */
    function AnimationViewContext(_animationQueue) {
        this._animationQueue = _animationQueue;
        this._players = new ViewAnimationMap();
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
        var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();
        // we check for the length to avoid having GroupAnimationPlayer
        // issue an unnecessary microtask when zero players are passed in
        if (activeAnimationPlayers.length) {
            new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
        }
        else {
            callback();
        }
    };
    /**
     * @param {?} element
     * @param {?} animationName
     * @param {?} player
     * @return {?}
     */
    AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
        var _this = this;
        this._animationQueue.enqueue(player);
        this._players.set(element, animationName, player);
        player.onDone(function () { return _this._players.remove(element, animationName, player); });
    };
    /**
     * @param {?} element
     * @param {?=} animationName
     * @return {?}
     */
    AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {
        if (animationName === void 0) { animationName = null; }
        var /** @type {?} */ players = [];
        if (animationName) {
            var /** @type {?} */ currentPlayer = this._players.find(element, animationName);
            if (currentPlayer) {
                _recursePlayers(currentPlayer, players);
            }
        }
        else {
            this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });
        }
        return players;
    };
    return AnimationViewContext;
}());
/**
 * @param {?} player
 * @param {?} collectedPlayers
 * @return {?}
 */
function _recursePlayers(player, collectedPlayers) {
    if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
        player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
    }
    else {
        collectedPlayers.push(player);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$15 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ElementInjector = (function (_super) {
    __extends$15(ElementInjector, _super);
    /**
     * @param {?} _view
     * @param {?} _nodeIndex
     */
    function ElementInjector(_view, _nodeIndex) {
        _super.call(this);
        this._view = _view;
        this._nodeIndex = _nodeIndex;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ElementInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
    };
    return ElementInjector;
}(Injector));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$14 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _scope_check = wtfCreateScope("AppView#check(ascii id)");
/**
 * @experimental
 */
var EMPTY_CONTEXT = new Object();
var UNDEFINED$1 = new Object();
/**
 *  Cost of making objects: http://jsperf.com/instantiate-size-of-object
  * *
 * @abstract
 */
var AppView = (function () {
    /**
     * @param {?} clazz
     * @param {?} componentType
     * @param {?} type
     * @param {?} viewUtils
     * @param {?} parentView
     * @param {?} parentIndex
     * @param {?} parentElement
     * @param {?} cdMode
     * @param {?=} declaredViewContainer
     */
    function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
        this.clazz = clazz;
        this.componentType = componentType;
        this.type = type;
        this.viewUtils = viewUtils;
        this.parentView = parentView;
        this.parentIndex = parentIndex;
        this.parentElement = parentElement;
        this.cdMode = cdMode;
        this.declaredViewContainer = declaredViewContainer;
        this.numberOfChecks = 0;
        this.ref = new ViewRef_(this, viewUtils.animationQueue);
        if (type === ViewType.COMPONENT || type === ViewType.HOST) {
            this.renderer = viewUtils.renderComponent(componentType);
        }
        else {
            this.renderer = parentView.renderer;
        }
        this._directRenderer = this.renderer.directRenderer;
    }
    Object.defineProperty(AppView.prototype, "animationContext", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._animationContext) {
                this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
            }
            return this._animationContext;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} context
     * @return {?}
     */
    AppView.prototype.create = function (context) {
        this.context = context;
        return this.createInternal(null);
    };
    /**
     * @param {?} rootSelectorOrNode
     * @param {?} hostInjector
     * @param {?} projectableNodes
     * @return {?}
     */
    AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
        this.context = (EMPTY_CONTEXT);
        this._hasExternalHostElement = isPresent(rootSelectorOrNode);
        this._hostInjector = hostInjector;
        this._hostProjectableNodes = projectableNodes;
        return this.createInternal(rootSelectorOrNode);
    };
    /**
     *  Overwritten by implementations.
      * Returns the ComponentRef for the host element for ViewType.HOST.
     * @param {?} rootSelectorOrNode
     * @return {?}
     */
    AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
    /**
     *  Overwritten by implementations.
     * @param {?} templateNodeIndex
     * @return {?}
     */
    AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
    /**
     * @param {?} lastRootNode
     * @param {?} allNodes
     * @param {?} disposables
     * @return {?}
     */
    AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
        this.lastRootNode = lastRootNode;
        this.allNodes = allNodes;
        this.disposables = disposables;
        if (this.type === ViewType.COMPONENT) {
            this.dirtyParentQueriesInternal();
        }
    };
    /**
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?=} notFoundValue
     * @return {?}
     */
    AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        var /** @type {?} */ result = UNDEFINED$1;
        var /** @type {?} */ view = this;
        while (result === UNDEFINED$1) {
            if (isPresent(nodeIndex)) {
                result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
            }
            if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
                result = view._hostInjector.get(token, notFoundValue);
            }
            nodeIndex = view.parentIndex;
            view = view.parentView;
        }
        return result;
    };
    /**
     *  Overwritten by implementations
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?} notFoundResult
     * @return {?}
     */
    AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
        return notFoundResult;
    };
    /**
     * @param {?} nodeIndex
     * @return {?}
     */
    AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
    /**
     * @return {?}
     */
    AppView.prototype.detachAndDestroy = function () {
        if (this.viewContainer) {
            this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
        }
        else if (this.appRef) {
            this.appRef.detachView(this.ref);
        }
        else if (this._hasExternalHostElement) {
            this.detach();
        }
        this.destroy();
    };
    /**
     * @return {?}
     */
    AppView.prototype.destroy = function () {
        var _this = this;
        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            return;
        }
        var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
        if (this.disposables) {
            for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {
                this.disposables[i]();
            }
        }
        this.destroyInternal();
        this.dirtyParentQueriesInternal();
        if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
        }
        else {
            this.renderer.destroyView(hostElement, this.allNodes);
        }
        this.cdMode = ChangeDetectorStatus.Destroyed;
    };
    /**
     *  Overwritten by implementations
     * @return {?}
     */
    AppView.prototype.destroyInternal = function () { };
    /**
     *  Overwritten by implementations
     * @return {?}
     */
    AppView.prototype.detachInternal = function () { };
    /**
     * @return {?}
     */
    AppView.prototype.detach = function () {
        var _this = this;
        this.detachInternal();
        if (this._animationContext) {
            this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
        }
        else {
            this._renderDetach();
        }
        if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
            this.declaredViewContainer.projectedViews) {
            var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;
            var /** @type {?} */ index = projectedViews.indexOf(this);
            // perf: pop is faster than splice!
            if (index >= projectedViews.length - 1) {
                projectedViews.pop();
            }
            else {
                projectedViews.splice(index, 1);
            }
        }
        this.appRef = null;
        this.viewContainer = null;
        this.dirtyParentQueriesInternal();
    };
    /**
     * @return {?}
     */
    AppView.prototype._renderDetach = function () {
        if (this._directRenderer) {
            this.visitRootNodesInternal(this._directRenderer.remove, null);
        }
        else {
            this.renderer.detachView(this.flatRootNodes);
        }
    };
    /**
     * @param {?} appRef
     * @return {?}
     */
    AppView.prototype.attachToAppRef = function (appRef) {
        if (this.viewContainer) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this.appRef = appRef;
        this.dirtyParentQueriesInternal();
    };
    /**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */
    AppView.prototype.attachAfter = function (viewContainer, prevView) {
        if (this.appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._renderAttach(viewContainer, prevView);
        this.viewContainer = viewContainer;
        if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
            if (!this.declaredViewContainer.projectedViews) {
                this.declaredViewContainer.projectedViews = [];
            }
            this.declaredViewContainer.projectedViews.push(this);
        }
        this.dirtyParentQueriesInternal();
    };
    /**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */
    AppView.prototype.moveAfter = function (viewContainer, prevView) {
        this._renderAttach(viewContainer, prevView);
        this.dirtyParentQueriesInternal();
    };
    /**
     * @param {?} viewContainer
     * @param {?} prevView
     * @return {?}
     */
    AppView.prototype._renderAttach = function (viewContainer, prevView) {
        var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
        if (this._directRenderer) {
            var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);
            if (nextSibling) {
                this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
            }
            else {
                var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);
                if (parentElement) {
                    this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
                }
            }
        }
        else {
            this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
        }
    };
    Object.defineProperty(AppView.prototype, "changeDetectorRef", {
        /**
         * @return {?}
         */
        get: function () { return this.ref; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppView.prototype, "flatRootNodes", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ nodes = [];
            this.visitRootNodesInternal(addToArray, nodes);
            return nodes;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} parentElement
     * @param {?} ngContentIndex
     * @return {?}
     */
    AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
        if (this._directRenderer) {
            this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
        }
        else {
            var /** @type {?} */ nodes = [];
            this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
            this.renderer.projectNodes(parentElement, nodes);
        }
    };
    /**
     * @param {?} ngContentIndex
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */
    AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
        switch (this.type) {
            case ViewType.EMBEDDED:
                this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
                break;
            case ViewType.COMPONENT:
                if (this.parentView.type === ViewType.HOST) {
                    var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
                    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                        cb(nodes[i], c);
                    }
                }
                else {
                    this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
                }
                break;
        }
    };
    /**
     *  Overwritten by implementations
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */
    AppView.prototype.visitRootNodesInternal = function (cb, c) { };
    /**
     *  Overwritten by implementations
     * @param {?} nodeIndex
     * @param {?} ngContentIndex
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */
    AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
    /**
     *  Overwritten by implementations
     * @return {?}
     */
    AppView.prototype.dirtyParentQueriesInternal = function () { };
    /**
     * @param {?} throwOnChange
     * @return {?}
     */
    AppView.prototype.internalDetectChanges = function (throwOnChange) {
        if (this.cdMode !== ChangeDetectorStatus.Detached) {
            this.detectChanges(throwOnChange);
        }
    };
    /**
     * @param {?} throwOnChange
     * @return {?}
     */
    AppView.prototype.detectChanges = function (throwOnChange) {
        var /** @type {?} */ s = _scope_check(this.clazz);
        if (this.cdMode === ChangeDetectorStatus.Checked ||
            this.cdMode === ChangeDetectorStatus.Errored)
            return;
        if (this.cdMode === ChangeDetectorStatus.Destroyed) {
            this.throwDestroyedError('detectChanges');
        }
        this.detectChangesInternal(throwOnChange);
        if (this.cdMode === ChangeDetectorStatus.CheckOnce)
            this.cdMode = ChangeDetectorStatus.Checked;
        this.numberOfChecks++;
        wtfLeave(s);
    };
    /**
     *  Overwritten by implementations
     * @param {?} throwOnChange
     * @return {?}
     */
    AppView.prototype.detectChangesInternal = function (throwOnChange) { };
    /**
     * @return {?}
     */
    AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
    /**
     * @return {?}
     */
    AppView.prototype.markPathToRootAsCheckOnce = function () {
        var /** @type {?} */ c = this;
        while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
            if (c.cdMode === ChangeDetectorStatus.Checked) {
                c.cdMode = ChangeDetectorStatus.CheckOnce;
            }
            if (c.type === ViewType.COMPONENT) {
                c = c.parentView;
            }
            else {
                c = c.viewContainer ? c.viewContainer.parentView : null;
            }
        }
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    AppView.prototype.eventHandler = function (cb) {
        return cb;
    };
    /**
     * @param {?} details
     * @return {?}
     */
    AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
    return AppView;
}());
var DebugAppView = (function (_super) {
    __extends$14(DebugAppView, _super);
    /**
     * @param {?} clazz
     * @param {?} componentType
     * @param {?} type
     * @param {?} viewUtils
     * @param {?} parentView
     * @param {?} parentIndex
     * @param {?} parentNode
     * @param {?} cdMode
     * @param {?} staticNodeDebugInfos
     * @param {?=} declaredViewContainer
     */
    function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
        if (declaredViewContainer === void 0) { declaredViewContainer = null; }
        _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
        this.staticNodeDebugInfos = staticNodeDebugInfos;
        this._currentDebugContext = null;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    DebugAppView.prototype.create = function (context) {
        this._resetDebug();
        try {
            return _super.prototype.create.call(this, context);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @param {?} rootSelectorOrNode
     * @param {?} injector
     * @param {?=} projectableNodes
     * @return {?}
     */
    DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
        if (projectableNodes === void 0) { projectableNodes = null; }
        this._resetDebug();
        try {
            return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @param {?} token
     * @param {?} nodeIndex
     * @param {?=} notFoundResult
     * @return {?}
     */
    DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
        this._resetDebug();
        try {
            return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @return {?}
     */
    DebugAppView.prototype.detach = function () {
        this._resetDebug();
        try {
            _super.prototype.detach.call(this);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @return {?}
     */
    DebugAppView.prototype.destroy = function () {
        this._resetDebug();
        try {
            _super.prototype.destroy.call(this);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @param {?} throwOnChange
     * @return {?}
     */
    DebugAppView.prototype.detectChanges = function (throwOnChange) {
        this._resetDebug();
        try {
            _super.prototype.detectChanges.call(this, throwOnChange);
        }
        catch (e) {
            this._rethrowWithContext(e);
            throw e;
        }
    };
    /**
     * @return {?}
     */
    DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
    /**
     * @param {?} nodeIndex
     * @param {?} rowNum
     * @param {?} colNum
     * @return {?}
     */
    DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
        return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DebugAppView.prototype._rethrowWithContext = function (e) {
        if (!(e instanceof ViewWrappedError)) {
            if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
                this.cdMode = ChangeDetectorStatus.Errored;
            }
            if (isPresent(this._currentDebugContext)) {
                throw new ViewWrappedError(e, this._currentDebugContext);
            }
        }
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    DebugAppView.prototype.eventHandler = function (cb) {
        var _this = this;
        var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);
        return function (eventName, event) {
            _this._resetDebug();
            try {
                return superHandler.call(_this, eventName, event);
            }
            catch (e) {
                _this._rethrowWithContext(e);
                throw e;
            }
        };
    };
    return DebugAppView;
}(AppView));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  A ViewContainer is created for elements that have a ViewContainerRef
  * to keep track of the nested views.
 */
var ViewContainer = (function () {
    /**
     * @param {?} index
     * @param {?} parentIndex
     * @param {?} parentView
     * @param {?} nativeElement
     */
    function ViewContainer(index, parentIndex, parentView, nativeElement) {
        this.index = index;
        this.parentIndex = parentIndex;
        this.parentView = parentView;
        this.nativeElement = nativeElement;
    }
    Object.defineProperty(ViewContainer.prototype, "elementRef", {
        /**
         * @return {?}
         */
        get: function () { return new ElementRef(this.nativeElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "vcRef", {
        /**
         * @return {?}
         */
        get: function () { return new ViewContainerRef_(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "parentInjector", {
        /**
         * @return {?}
         */
        get: function () { return this.parentView.injector(this.parentIndex); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainer.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this.parentView.injector(this.index); },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} throwOnChange
     * @return {?}
     */
    ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].detectChanges(throwOnChange);
            }
        }
    };
    /**
     * @return {?}
     */
    ViewContainer.prototype.destroyNestedViews = function () {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].destroy();
            }
        }
    };
    /**
     * @param {?} cb
     * @param {?} c
     * @return {?}
     */
    ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                this.nestedViews[i].visitRootNodesInternal(cb, c);
            }
        }
    };
    /**
     * @param {?} nestedViewClass
     * @param {?} callback
     * @return {?}
     */
    ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
        var /** @type {?} */ result = [];
        if (this.nestedViews) {
            for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
                var /** @type {?} */ nestedView = this.nestedViews[i];
                if (nestedView.clazz === nestedViewClass) {
                    result.push(callback(nestedView));
                }
            }
        }
        if (this.projectedViews) {
            for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {
                var /** @type {?} */ projectedView = this.projectedViews[i];
                if (projectedView.clazz === nestedViewClass) {
                    result.push(callback(projectedView));
                }
            }
        }
        return result;
    };
    /**
     * @param {?} view
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainer.prototype.moveView = function (view, currentIndex) {
        var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        var /** @type {?} */ nestedViews = this.nestedViews;
        if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
        }
        nestedViews.splice(previousIndex, 1);
        nestedViews.splice(currentIndex, 0, view);
        var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
        view.moveAfter(this, prevView);
    };
    /**
     * @param {?} view
     * @param {?} viewIndex
     * @return {?}
     */
    ViewContainer.prototype.attachView = function (view, viewIndex) {
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        var /** @type {?} */ nestedViews = this.nestedViews;
        if (nestedViews == null) {
            nestedViews = [];
            this.nestedViews = nestedViews;
        }
        // perf: array.push is faster than array.splice!
        if (viewIndex >= nestedViews.length) {
            nestedViews.push(view);
        }
        else {
            nestedViews.splice(viewIndex, 0, view);
        }
        var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
        view.attachAfter(this, prevView);
    };
    /**
     * @param {?} viewIndex
     * @return {?}
     */
    ViewContainer.prototype.detachView = function (viewIndex) {
        var /** @type {?} */ view = this.nestedViews[viewIndex];
        // perf: array.pop is faster than array.splice!
        if (viewIndex >= this.nestedViews.length - 1) {
            this.nestedViews.pop();
        }
        else {
            this.nestedViews.splice(viewIndex, 1);
        }
        if (view.type === ViewType.COMPONENT) {
            throw new Error("Component views can't be moved!");
        }
        view.detach();
        return view;
    };
    return ViewContainer;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __core_private__ = {
    isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
    ChangeDetectorStatus: ChangeDetectorStatus,
    constructDependencies: constructDependencies,
    LifecycleHooks: LifecycleHooks,
    LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
    ReflectorReader: ReflectorReader,
    CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
    ComponentRef_: ComponentRef_,
    ViewContainer: ViewContainer,
    AppView: AppView,
    DebugAppView: DebugAppView,
    NgModuleInjector: NgModuleInjector,
    registerModuleFactory: registerModuleFactory,
    ViewType: ViewType,
    view_utils: view_utils,
    ViewMetadata: ViewMetadata,
    DebugContext: DebugContext,
    StaticNodeDebugInfo: StaticNodeDebugInfo,
    devModeEqual: devModeEqual,
    UNINITIALIZED: UNINITIALIZED,
    ValueUnwrapper: ValueUnwrapper,
    RenderDebugInfo: RenderDebugInfo,
    TemplateRef_: TemplateRef_,
    ReflectionCapabilities: ReflectionCapabilities,
    makeDecorator: makeDecorator,
    DebugDomRootRenderer: DebugDomRootRenderer,
    Console: Console,
    reflector: reflector,
    Reflector: Reflector,
    NoOpAnimationPlayer: NoOpAnimationPlayer,
    AnimationPlayer: AnimationPlayer,
    AnimationSequencePlayer: AnimationSequencePlayer,
    AnimationGroupPlayer: AnimationGroupPlayer,
    AnimationKeyframe: AnimationKeyframe,
    prepareFinalAnimationStyles: prepareFinalAnimationStyles,
    balanceAnimationKeyframes: balanceAnimationKeyframes,
    flattenStyles: flattenStyles,
    clearStyles: clearStyles,
    renderStyles: renderStyles,
    collectAndResolveStyles: collectAndResolveStyles,
    APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
    AnimationStyles: AnimationStyles,
    ANY_STATE: ANY_STATE,
    DEFAULT_STATE: DEFAULT_STATE,
    EMPTY_STATE: EMPTY_STATE,
    FILL_STYLE_FLAG: FILL_STYLE_FLAG,
    ComponentStillLoadingError: ComponentStillLoadingError,
    isPromise: isPromise,
    AnimationTransition: AnimationTransition
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point from which you should import all public core APIs.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the core package.
 */

/**
 *  This class should not be used directly by an application developer. Instead, use
  * {@link Location}.
  * *
  * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
  * agnostic.
  * This means that we can have different implementation of `PlatformLocation` for the different
  * platforms
  * that angular supports. For example, the default `PlatformLocation` is {@link
  * BrowserPlatformLocation},
  * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
  * *
  * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
  * when
  * they need to interact with the DOM apis like pushState, popState, etc...
  * *
  * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
  * by
  * the {@link Router} in order to navigate between routes. Since all interactions between {@link
  * Router} /
  * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
  * class
  * they are all platform independent.
  * *
 * @abstract
 */
var PlatformLocation = (function () {
    function PlatformLocation() {
    }
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    PlatformLocation.prototype.onPopState = function (fn) { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    PlatformLocation.prototype.onHashChange = function (fn) { };
    Object.defineProperty(PlatformLocation.prototype, "pathname", {
        /**
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "search", {
        /**
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformLocation.prototype, "hash", {
        /**
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    PlatformLocation.prototype.replaceState = function (state, title, url) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    PlatformLocation.prototype.pushState = function (state, title, url) { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.forward = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.back = function () { };
    return PlatformLocation;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  `LocationStrategy` is responsible for representing and reading route state
  * from the browser's URL. Angular provides two strategies:
  * {@link HashLocationStrategy} and {@link PathLocationStrategy}.
  * *
  * This is used under the hood of the {@link Location} service.
  * *
  * Applications should use the {@link Router} or {@link Location} services to
  * interact with application route state.
  * *
  * For instance, {@link HashLocationStrategy} produces URLs like
  * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
  * `http://example.com/foo` as an equivalent URL.
  * *
  * See these two classes for more.
  * *
 * @abstract
 */
var LocationStrategy = (function () {
    function LocationStrategy() {
    }
    /**
     * @abstract
     * @param {?=} includeHash
     * @return {?}
     */
    LocationStrategy.prototype.path = function (includeHash) { };
    /**
     * @abstract
     * @param {?} internal
     * @return {?}
     */
    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    LocationStrategy.prototype.pushState = function (state$$1, title, url, queryParams) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    LocationStrategy.prototype.replaceState = function (state$$1, title, url, queryParams) { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.forward = function () { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.back = function () { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    LocationStrategy.prototype.onPopState = function (fn) { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.getBaseHref = function () { };
    return LocationStrategy;
}());
/**
 * The `APP_BASE_HREF` token represents the base href to be used with the
 * {@link PathLocationStrategy}.
 *
 * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
 * representing the URL prefix that should be preserved when generating and recognizing
 * URLs.
 *
 * ### Example
 *
 * ```typescript
 * import {Component, NgModule} from '@angular/core';
 * import {APP_BASE_HREF} from '@angular/common';
 *
 * @NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * @stable
 */
var APP_BASE_HREF = new OpaqueToken('appBaseHref');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope$1;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope$1 = (self);
    }
    else {
        globalScope$1 = (global);
    }
}
else {
    globalScope$1 = (window);
}
/**
 * @param {?} fn
 * @return {?}
 */

// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global$1 = globalScope$1;
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging$1(type) {
    return type['name'] || typeof type;
}
// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global$1.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent$1(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank$1(obj) {
    return obj == null;
}
/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */
function isDate$1(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify$1(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
var NumberWrapper$1 = (function () {
    function NumberWrapper() {
    }
    /**
     * @param {?} text
     * @return {?}
     */
    NumberWrapper.parseIntAutoRadix = function (text) {
        var /** @type {?} */ result = parseInt(text);
        if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
        }
        return result;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
    return NumberWrapper;
}());
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */

/**
 * @param {?} o
 * @return {?}
 */
function isJsObject$1(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} global
 * @param {?} path
 * @param {?} value
 * @return {?}
 */

var _symbolIterator$1 = null;
/**
 * @return {?}
 */
function getSymbolIterator$1() {
    if (!_symbolIterator$1) {
        if (((globalScope$1)).Symbol && Symbol.iterator) {
            _symbolIterator$1 = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    ((Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator$1 = key;
                }
            }
        }
    }
    return _symbolIterator$1;
}
/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} s
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Depending on which {@link LocationStrategy} is used, `Location` will either persist
  * to the URL's path or the URL's hash segment.
  * *
  * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
  * `Location` only if you need to interact with or create normalized URLs outside of
  * routing.
  * *
  * `Location` is responsible for normalizing the URL against the application's base href.
  * A normalized URL is absolute from the URL host, includes the application's base href, and has no
  * trailing slash:
  * - `/my/app/user/123` is normalized
  * - `my/app/user/123` **is not** normalized
  * - `/my/app/user/123/` **is not** normalized
  * *
  * ### Example
  * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
 */
var Location = (function () {
    /**
     * @param {?} platformStrategy
     */
    function Location(platformStrategy) {
        var _this = this;
        /** @internal */
        this._subject = new EventEmitter();
        this._platformStrategy = platformStrategy;
        var browserBaseHref = this._platformStrategy.getBaseHref();
        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState(function (ev) {
            _this._subject.emit({
                'url': _this.path(true),
                'pop': true,
                'type': ev.type,
            });
        });
    }
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    Location.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        return this.normalize(this._platformStrategy.path(includeHash));
    };
    /**
     *  Normalizes the given path and compares to the current normalized path.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.isCurrentPathEqualTo = function (path, query) {
        if (query === void 0) { query = ''; }
        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    /**
     *  Given a string representing a URL, returns the normalized URL path without leading or
      * trailing slashes.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.normalize = function (url) {
        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    /**
     *  Given a string representing a URL, returns the platform-specific external URL path.
      * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
      * before normalizing. This method will also add a hash if `HashLocationStrategy` is
      * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.prepareExternalUrl = function (url) {
        if (url && url[0] !== '/') {
            url = '/' + url;
        }
        return this._platformStrategy.prepareExternalUrl(url);
    };
    /**
     *  Changes the browsers URL to the normalized version of the given URL, and pushes a
      * new item onto the platform's history.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.go = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.pushState(null, '', path, query);
    };
    /**
     *  Changes the browsers URL to the normalized version of the given URL, and replaces
      * the top item on the platform's history stack.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.replaceState = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.replaceState(null, '', path, query);
    };
    /**
     *  Navigates forward in the platform's history.
     * @return {?}
     */
    Location.prototype.forward = function () { this._platformStrategy.forward(); };
    /**
     *  Navigates back in the platform's history.
     * @return {?}
     */
    Location.prototype.back = function () { this._platformStrategy.back(); };
    /**
     *  Subscribe to the platform's `popState` events.
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?}
     */
    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
        if (onThrow === void 0) { onThrow = null; }
        if (onReturn === void 0) { onReturn = null; }
        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    };
    /**
     *  Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
      * is.
     * @param {?} params
     * @return {?}
     */
    Location.normalizeQueryParams = function (params) {
        return params && params[0] !== '?' ? '?' + params : params;
    };
    /**
     *  Given 2 parts of a url, join them with a slash if needed.
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    Location.joinWithSlash = function (start, end) {
        if (start.length == 0) {
            return end;
        }
        if (end.length == 0) {
            return start;
        }
        var /** @type {?} */ slashes = 0;
        if (start.endsWith('/')) {
            slashes++;
        }
        if (end.startsWith('/')) {
            slashes++;
        }
        if (slashes == 2) {
            return start + end.substring(1);
        }
        if (slashes == 1) {
            return start + end;
        }
        return start + '/' + end;
    };
    /**
     *  If url has a trailing slash, remove it, otherwise return url as is.
     * @param {?} url
     * @return {?}
     */
    Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
    Location.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Location.ctorParameters = function () { return [
        { type: LocationStrategy, },
    ]; };
    return Location;
}());
/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
/**
 * @param {?} url
 * @return {?}
 */
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$16 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
  * {@link Location} service to represent its state in the
  * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
  * of the browser's URL.
  * *
  * For instance, if you call `location.go('/foo')`, the browser's URL will become
  * `example.com#/foo`.
  * *
  * ### Example
  * *
  * {@example common/location/ts/hash_location_component.ts region='LocationComponent'}
  * *
 */
var HashLocationStrategy = (function (_super) {
    __extends$16(HashLocationStrategy, _super);
    /**
     * @param {?} _platformLocation
     * @param {?=} _baseHref
     */
    function HashLocationStrategy(_platformLocation, _baseHref) {
        _super.call(this);
        this._platformLocation = _platformLocation;
        this._baseHref = '';
        if (isPresent$1(_baseHref)) {
            this._baseHref = _baseHref;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    HashLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    HashLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        // the hash value is always prefixed with a `#`
        // and if it is empty then it will stay empty
        var /** @type {?} */ path = this._platformLocation.hash;
        if (!isPresent$1(path))
            path = '#';
        return path.length > 0 ? path.substring(1) : path;
    };
    /**
     * @param {?} internal
     * @return {?}
     */
    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? ('#' + url) : url;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.pushState = function (state$$1, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.pushState(state$$1, title, url);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.replaceState = function (state$$1, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.replaceState(state$$1, title, url);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    HashLocationStrategy.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    HashLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    return HashLocationStrategy;
}(LocationStrategy));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$17 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
  * {@link Location} service to represent its state in the
  * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
  * browser's URL.
  * *
  * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
  * or add a base element to the document. This URL prefix that will be preserved
  * when generating and recognizing URLs.
  * *
  * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
  * `location.go('/foo')`, the browser's URL will become
  * `example.com/my/app/foo`.
  * *
  * Similarly, if you add `<base href='/my/app'/>` to the document and call
  * `location.go('/foo')`, the browser's URL will become
  * `example.com/my/app/foo`.
  * *
  * ### Example
  * *
  * {@example common/location/ts/path_location_component.ts region='LocationComponent'}
  * *
 */
var PathLocationStrategy = (function (_super) {
    __extends$17(PathLocationStrategy, _super);
    /**
     * @param {?} _platformLocation
     * @param {?=} href
     */
    function PathLocationStrategy(_platformLocation, href) {
        _super.call(this);
        this._platformLocation = _platformLocation;
        if (isBlank$1(href)) {
            href = this._platformLocation.getBaseHrefFromDOM();
        }
        if (isBlank$1(href)) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
        }
        this._baseHref = href;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    PathLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    /**
     * @param {?} internal
     * @return {?}
     */
    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        return Location.joinWithSlash(this._baseHref, internal);
    };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    PathLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        var /** @type {?} */ pathname = this._platformLocation.pathname +
            Location.normalizeQueryParams(this._platformLocation.search);
        var /** @type {?} */ hash = this._platformLocation.hash;
        return hash && includeHash ? "" + pathname + hash : pathname;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.pushState = function (state$$1, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state$$1, title, externalUrl);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.replaceState = function (state$$1, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state$$1, title, externalUrl);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    PathLocationStrategy.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PathLocationStrategy.ctorParameters = function () { return [
        { type: PlatformLocation, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
    ]; };
    return PathLocationStrategy;
}(LocationStrategy));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$18 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @abstract
 */
var NgLocalization = (function () {
    function NgLocalization() {
    }
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    NgLocalization.prototype.getPluralCategory = function (value) { };
    return NgLocalization;
}());
/**
 *  Returns the plural category for a given value.
  * - "=value" when the case exists,
  * - the plural category otherwise
  * *
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @return {?}
 */
function getPluralCategory(value, cases, ngLocalization) {
    var /** @type {?} */ key = "=" + value;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error("No plural message found for value \"" + value + "\"");
}
/**
 *  Returns the plural case based on the locale
  * *
 */
var NgLocaleLocalization = (function (_super) {
    __extends$18(NgLocaleLocalization, _super);
    /**
     * @param {?} _locale
     */
    function NgLocaleLocalization(_locale) {
        _super.call(this);
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
        var /** @type {?} */ plural = getPluralCase(this._locale, value);
        switch (plural) {
            case Plural.Zero:
                return 'zero';
            case Plural.One:
                return 'one';
            case Plural.Two:
                return 'two';
            case Plural.Few:
                return 'few';
            case Plural.Many:
                return 'many';
            default:
                return 'other';
        }
    };
    NgLocaleLocalization.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgLocaleLocalization.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    return NgLocaleLocalization;
}(NgLocalization));
var Plural = {};
Plural.Zero = 0;
Plural.One = 1;
Plural.Two = 2;
Plural.Few = 3;
Plural.Many = 4;
Plural.Other = 5;
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
/**
 *  Returns the plural case based on the locale
  * *
 * @param {?} locale
 * @param {?} nLike
 * @return {?}
 */
function getPluralCase(locale, nLike) {
    // TODO(vicb): lazy compute
    if (typeof nLike === 'string') {
        nLike = parseInt(/** @type {?} */ (nLike), 10);
    }
    var /** @type {?} */ n = (nLike);
    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var /** @type {?} */ i = Math.floor(Math.abs(n));
    var /** @type {?} */ v = nDecimal.length;
    var /** @type {?} */ f = parseInt(nDecimal, 10);
    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
        case 'af':
        case 'asa':
        case 'az':
        case 'bem':
        case 'bez':
        case 'bg':
        case 'brx':
        case 'ce':
        case 'cgg':
        case 'chr':
        case 'ckb':
        case 'ee':
        case 'el':
        case 'eo':
        case 'es':
        case 'eu':
        case 'fo':
        case 'fur':
        case 'gsw':
        case 'ha':
        case 'haw':
        case 'hu':
        case 'jgo':
        case 'jmc':
        case 'ka':
        case 'kk':
        case 'kkj':
        case 'kl':
        case 'ks':
        case 'ksb':
        case 'ky':
        case 'lb':
        case 'lg':
        case 'mas':
        case 'mgo':
        case 'ml':
        case 'mn':
        case 'nb':
        case 'nd':
        case 'ne':
        case 'nn':
        case 'nnh':
        case 'nyn':
        case 'om':
        case 'or':
        case 'os':
        case 'ps':
        case 'rm':
        case 'rof':
        case 'rwk':
        case 'saq':
        case 'seh':
        case 'sn':
        case 'so':
        case 'sq':
        case 'ta':
        case 'te':
        case 'teo':
        case 'tk':
        case 'tr':
        case 'ug':
        case 'uz':
        case 'vo':
        case 'vun':
        case 'wae':
        case 'xog':
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'agq':
        case 'bas':
        case 'cu':
        case 'dav':
        case 'dje':
        case 'dua':
        case 'dyo':
        case 'ebu':
        case 'ewo':
        case 'guz':
        case 'kam':
        case 'khq':
        case 'ki':
        case 'kln':
        case 'kok':
        case 'ksf':
        case 'lrc':
        case 'lu':
        case 'luo':
        case 'luy':
        case 'mer':
        case 'mfe':
        case 'mgh':
        case 'mua':
        case 'mzn':
        case 'nmg':
        case 'nus':
        case 'qu':
        case 'rn':
        case 'rw':
        case 'sbp':
        case 'twq':
        case 'vai':
        case 'yav':
        case 'yue':
        case 'zgh':
        case 'ak':
        case 'ln':
        case 'mg':
        case 'pa':
        case 'ti':
            if (n === Math.floor(n) && n >= 0 && n <= 1)
                return Plural.One;
            return Plural.Other;
        case 'am':
        case 'as':
        case 'bn':
        case 'fa':
        case 'gu':
        case 'hi':
        case 'kn':
        case 'mr':
        case 'zu':
            if (i === 0 || n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ar':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                return Plural.Many;
            return Plural.Other;
        case 'ast':
        case 'ca':
        case 'de':
        case 'en':
        case 'et':
        case 'fi':
        case 'fy':
        case 'gl':
        case 'it':
        case 'nl':
        case 'sv':
        case 'sw':
        case 'ur':
        case 'yi':
            if (i === 1 && v === 0)
                return Plural.One;
            return Plural.Other;
        case 'be':
            if (n % 10 === 1 && !(n % 100 === 11))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                !(n % 100 >= 12 && n % 100 <= 14))
                return Plural.Few;
            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'br':
            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                return Plural.One;
            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                return Plural.Two;
            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                    n % 100 >= 90 && n % 100 <= 99))
                return Plural.Few;
            if (!(n === 0) && n % 1e6 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'bs':
        case 'hr':
        case 'sr':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14) ||
                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                    !(f % 100 >= 12 && f % 100 <= 14))
                return Plural.Few;
            return Plural.Other;
        case 'cs':
        case 'sk':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'cy':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === 3)
                return Plural.Few;
            if (n === 6)
                return Plural.Many;
            return Plural.Other;
        case 'da':
            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                return Plural.One;
            return Plural.Other;
        case 'dsb':
        case 'hsb':
            if (v === 0 && i % 100 === 1 || f % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2 || f % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                return Plural.Few;
            return Plural.Other;
        case 'ff':
        case 'fr':
        case 'hy':
        case 'kab':
            if (i === 0 || i === 1)
                return Plural.One;
            return Plural.Other;
        case 'fil':
            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                return Plural.One;
            return Plural.Other;
        case 'ga':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === Math.floor(n) && n >= 3 && n <= 6)
                return Plural.Few;
            if (n === Math.floor(n) && n >= 7 && n <= 10)
                return Plural.Many;
            return Plural.Other;
        case 'gd':
            if (n === 1 || n === 11)
                return Plural.One;
            if (n === 2 || n === 12)
                return Plural.Two;
            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                return Plural.Few;
            return Plural.Other;
        case 'gv':
            if (v === 0 && i % 10 === 1)
                return Plural.One;
            if (v === 0 && i % 10 === 2)
                return Plural.Two;
            if (v === 0 &&
                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'he':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === 2 && v === 0)
                return Plural.Two;
            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'is':
            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                return Plural.One;
            return Plural.Other;
        case 'ksh':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'kw':
        case 'naq':
        case 'se':
        case 'smn':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            return Plural.Other;
        case 'lag':
            if (n === 0)
                return Plural.Zero;
            if ((i === 0 || i === 1) && !(n === 0))
                return Plural.One;
            return Plural.Other;
        case 'lt':
            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.Few;
            if (!(f === 0))
                return Plural.Many;
            return Plural.Other;
        case 'lv':
        case 'prg':
            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                return Plural.Zero;
            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                !(v === 2) && f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mk':
            if (v === 0 && i % 10 === 1 || f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mt':
            if (n === 1)
                return Plural.One;
            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                return Plural.Many;
            return Plural.Other;
        case 'pl':
            if (i === 1 && v === 0)
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'pt':
            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                return Plural.One;
            return Plural.Other;
        case 'ro':
            if (i === 1 && v === 0)
                return Plural.One;
            if (!(v === 0) || n === 0 ||
                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                return Plural.Few;
            return Plural.Other;
        case 'ru':
        case 'uk':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && i % 10 === 0 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'shi':
            if (i === 0 || n === 1)
                return Plural.One;
            if (n === Math.floor(n) && n >= 2 && n <= 10)
                return Plural.Few;
            return Plural.Other;
        case 'si':
            if (n === 0 || n === 1 || i === 0 && f === 1)
                return Plural.One;
            return Plural.Other;
        case 'sl':
            if (v === 0 && i % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                return Plural.Few;
            return Plural.Other;
        case 'tzm':
            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                return Plural.One;
            return Plural.Other;
        default:
            return Plural.Other;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Wraps Javascript Objects
 */


/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable$1(obj) {
    if (!isJsObject$1(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) &&
            getSymbolIterator$1() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */

/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * ```
  * <some-element [ngClass]="'first second'">...</some-element>
  * *
  * <some-element [ngClass]="['first', 'second']">...</some-element>
  * *
  * <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
  * *
  * <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
  * *
  * <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
  * ```
  * *
  * *
  * The CSS classes are updated as follows, depending on the type of the expression evaluation:
  * - `string` - the CSS classes listed in the string (space delimited) are added,
  * - `Array` - the CSS classes declared as Array elements are added,
  * - `Object` - keys are CSS classes that get added when the expression given in the value
  * evaluates to a truthy value, otherwise they are removed.
  * *
 */
var NgClass = (function () {
    /**
     * @param {?} _iterableDiffers
     * @param {?} _keyValueDiffers
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._applyInitialClasses(true);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._cleanupClasses(this._rawClass);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
                if (isListLikeIterable$1(this._rawClass)) {
                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
                }
                else {
                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgClass.prototype.ngDoCheck = function () {
        if (this._iterableDiffer) {
            var /** @type {?} */ changes = this._iterableDiffer.diff(this._rawClass);
            if (changes) {
                this._applyIterableChanges(changes);
            }
        }
        else if (this._keyValueDiffer) {
            var /** @type {?} */ changes = this._keyValueDiffer.diff(this._rawClass);
            if (changes) {
                this._applyKeyValueChanges(changes);
            }
        }
    };
    /**
     * @param {?} rawClassVal
     * @return {?}
     */
    NgClass.prototype._cleanupClasses = function (rawClassVal) {
        this._applyClasses(rawClassVal, true);
        this._applyInitialClasses(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyKeyValueChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) {
            if (record.previousValue) {
                _this._toggleClass(record.key, false);
            }
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyIterableChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            if (typeof record.item === 'string') {
                _this._toggleClass(record.item, true);
            }
            else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify$1(record.item));
            }
        });
        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
    };
    /**
     * @param {?} isCleanup
     * @return {?}
     */
    NgClass.prototype._applyInitialClasses = function (isCleanup) {
        var _this = this;
        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
    };
    /**
     * @param {?} rawClassVal
     * @param {?} isCleanup
     * @return {?}
     */
    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
        var _this = this;
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
            }
            else {
                Object.keys(rawClassVal).forEach(function (klass) {
                    if (rawClassVal[klass] != null)
                        _this._toggleClass(klass, !isCleanup);
                });
            }
        }
    };
    /**
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */
    NgClass.prototype._toggleClass = function (klass, enabled) {
        var _this = this;
        klass = klass.trim();
        if (klass) {
            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
        }
    };
    NgClass.decorators = [
        { type: Directive, args: [{ selector: '[ngClass]' },] },
    ];
    /** @nocollapse */
    NgClass.ctorParameters = function () { return [
        { type: IterableDiffers, },
        { type: KeyValueDiffers, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    NgClass.propDecorators = {
        'klass': [{ type: Input, args: ['class',] },],
        'ngClass': [{ type: Input },],
    };
    return NgClass;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NgForRow = (function () {
    /**
     * @param {?} $implicit
     * @param {?} index
     * @param {?} count
     */
    function NgForRow($implicit, index, count) {
        this.$implicit = $implicit;
        this.index = index;
        this.count = count;
    }
    Object.defineProperty(NgForRow.prototype, "first", {
        /**
         * @return {?}
         */
        get: function () { return this.index === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "last", {
        /**
         * @return {?}
         */
        get: function () { return this.index === this.count - 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "even", {
        /**
         * @return {?}
         */
        get: function () { return this.index % 2 === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForRow.prototype, "odd", {
        /**
         * @return {?}
         */
        get: function () { return !this.even; },
        enumerable: true,
        configurable: true
    });
    return NgForRow;
}());
/**
 *  The `NgFor` directive instantiates a template once per item from an iterable. The context for
  * each instantiated template inherits from the outer context with the given loop variable set
  * to the current item from the iterable.
  * *
  * ### Local Variables
  * *
  * `NgFor` provides several exported values that can be aliased to local variables:
  * *
  * * `index` will be set to the current loop iteration for each template context.
  * * `first` will be set to a boolean value indicating whether the item is the first one in the
  * iteration.
  * * `last` will be set to a boolean value indicating whether the item is the last one in the
  * iteration.
  * * `even` will be set to a boolean value indicating whether this item has an even index.
  * * `odd` will be set to a boolean value indicating whether this item has an odd index.
  * *
  * ### Change Propagation
  * *
  * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
  * *
  * * When an item is added, a new instance of the template is added to the DOM.
  * * When an item is removed, its template instance is removed from the DOM.
  * * When items are reordered, their respective templates are reordered in the DOM.
  * * Otherwise, the DOM element for that item will remain the same.
  * *
  * Angular uses object identity to track insertions and deletions within the iterator and reproduce
  * those changes in the DOM. This has important implications for animations and any stateful
  * controls
  * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
  * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
  * as user input.
  * *
  * It is possible for the identities of elements in the iterator to change while the data does not.
  * This can happen, for example, if the iterator produced from an RPC to the server, and that
  * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
  * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
  * elements were deleted and all new elements inserted). This is an expensive operation and should
  * be avoided if possible.
  * *
  * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
  * `trackBy` takes a function which has two arguments: `index` and `item`.
  * If `trackBy` is given, Angular tracks changes by the return value of the function.
  * *
  * ### Syntax
  * *
  * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
  * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
  * *
  * With `<template>` element:
  * *
  * ```
  * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
  * <li>...</li>
  * </template>
  * ```
  * *
  * ### Example
  * *
  * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
  * example.
  * *
 */
var NgFor = (function () {
    /**
     * @param {?} _viewContainer
     * @param {?} _template
     * @param {?} _differs
     * @param {?} _cdr
     */
    function NgFor(_viewContainer, _template, _differs, _cdr) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._cdr = _cdr;
        this._differ = null;
    }
    Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
        /**
         * @return {?}
         */
        get: function () { return this._trackByFn; },
        /**
         * @param {?} fn
         * @return {?}
         */
        set: function (fn) {
            if (isDevMode() && fn != null && typeof fn !== 'function') {
                // TODO(vicb): use a log service once there is a public one available
                if ((console) && (console.warn)) {
                    console.warn(("trackBy must be a function, but received " + JSON.stringify(fn) + ". ") +
                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                }
            }
            this._trackByFn = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgFor.prototype, "ngForTemplate", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (value) {
                this._template = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgFor.prototype.ngOnChanges = function (changes) {
        if ('ngForOf' in changes) {
            // React on ngForOf changes only once all inputs have been initialized
            var /** @type {?} */ value = changes['ngForOf'].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging$1(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    /**
     * @return {?}
     */
    NgFor.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
            if (changes)
                this._applyChanges(changes);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgFor.prototype._applyChanges = function (changes) {
        var _this = this;
        var /** @type {?} */ insertTuples = [];
        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
            if (item.previousIndex == null) {
                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
            }
            else if (currentIndex == null) {
                _this._viewContainer.remove(adjustedPreviousIndex);
            }
            else {
                var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
                _this._viewContainer.move(view, currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
                insertTuples.push(tuple);
            }
        });
        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
            viewRef.context.index = i;
            viewRef.context.count = ilen;
        }
        changes.forEachIdentityChange(function (record) {
            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
            viewRef.context.$implicit = record.item;
        });
    };
    /**
     * @param {?} view
     * @param {?} record
     * @return {?}
     */
    NgFor.prototype._perViewChange = function (view, record) {
        view.context.$implicit = record.item;
    };
    NgFor.decorators = [
        { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
    ];
    /** @nocollapse */
    NgFor.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: IterableDiffers, },
        { type: ChangeDetectorRef, },
    ]; };
    NgFor.propDecorators = {
        'ngForOf': [{ type: Input },],
        'ngForTrackBy': [{ type: Input },],
        'ngForTemplate': [{ type: Input },],
    };
    return NgFor;
}());
var RecordViewTuple = (function () {
    /**
     * @param {?} record
     * @param {?} view
     */
    function RecordViewTuple(record, view) {
        this.record = record;
        this.view = view;
    }
    return RecordViewTuple;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Removes or recreates a portion of the DOM tree based on an {expression}.
  * *
  * If the expression assigned to `ngIf` evaluates to a falsy value then the element
  * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
  * *
  * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
  * *
  * ```
  * <div *ngIf="errorCount > 0" class="error">
  * <!-- Error message displayed when the errorCount property in the current context is greater
  * than 0. -->
  * {{errorCount}} errors detected
  * </div>
  * ```
  * *
  * ### Syntax
  * *
  * - `<div *ngIf="condition">...</div>`
  * - `<div template="ngIf condition">...</div>`
  * - `<template [ngIf]="condition"><div>...</div></template>`
  * *
 */
var NgIf = (function () {
    /**
     * @param {?} _viewContainer
     * @param {?} _template
     */
    function NgIf(_viewContainer, _template) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._hasView = false;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
        /**
         * @param {?} condition
         * @return {?}
         */
        set: function (condition) {
            if (condition && !this._hasView) {
                this._hasView = true;
                this._viewContainer.createEmbeddedView(this._template);
            }
            else if (!condition && this._hasView) {
                this._hasView = false;
                this._viewContainer.clear();
            }
        },
        enumerable: true,
        configurable: true
    });
    NgIf.decorators = [
        { type: Directive, args: [{ selector: '[ngIf]' },] },
    ];
    /** @nocollapse */
    NgIf.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
    ]; };
    NgIf.propDecorators = {
        'ngIf': [{ type: Input },],
    };
    return NgIf;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SwitchView = (function () {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */
    function SwitchView(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    /**
     * @return {?}
     */
    SwitchView.prototype.create = function () {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    /**
     * @return {?}
     */
    SwitchView.prototype.destroy = function () {
        this._created = false;
        this._viewContainerRef.clear();
    };
    /**
     * @param {?} created
     * @return {?}
     */
    SwitchView.prototype.enforceState = function (created) {
        if (created && !this._created) {
            this.create();
        }
        else if (!created && this._created) {
            this.destroy();
        }
    };
    return SwitchView;
}());
/**
 *  *
  * expression.
  * *
  * ```
  * <container-element [ngSwitch]="switch_expression">
  * <some-element *ngSwitchCase="match_expression_1">...</some-element>
  * <some-element *ngSwitchCase="match_expression_2">...</some-element>
  * <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
  * <ng-container *ngSwitchCase="match_expression_3">
  * <!-- use a ng-container to group multiple root nodes -->
  * <inner-element></inner-element>
  * <inner-other-element></inner-other-element>
  * </ng-container>
  * <some-element *ngSwitchDefault>...</some-element>
  * </container-element>
  * ```
  * *
  * `NgSwitch` stamps out nested views when their match expression value matches the value of the
  * switch expression.
  * *
  * In other words:
  * - you define a container element (where you place the directive with a switch expression on the
  * `[ngSwitch]="..."` attribute)
  * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
  * root elements.
  * *
  * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
  * be preserved at the location.
  * *
  * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
  * expression is evaluated.
  * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
  * stamped out.
  * *
 */
var NgSwitch = (function () {
    function NgSwitch() {
        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
        /**
         * @param {?} newValue
         * @return {?}
         */
        set: function (newValue) {
            this._ngSwitch = newValue;
            if (this._caseCount === 0) {
                this._updateDefaultCases(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
    /**
     * @param {?} view
     * @return {?}
     */
    NgSwitch.prototype._addDefault = function (view) {
        if (!this._defaultViews) {
            this._defaultViews = [];
        }
        this._defaultViews.push(view);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgSwitch.prototype._matchCase = function (value) {
        var /** @type {?} */ matched = value == this._ngSwitch;
        this._lastCasesMatched = this._lastCasesMatched || matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        return matched;
    };
    /**
     * @param {?} useDefault
     * @return {?}
     */
    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
        if (this._defaultViews && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
                var /** @type {?} */ defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
            }
        }
    };
    NgSwitch.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitch]' },] },
    ];
    /** @nocollapse */
    NgSwitch.ctorParameters = function () { return []; };
    NgSwitch.propDecorators = {
        'ngSwitch': [{ type: Input },],
    };
    return NgSwitch;
}());
/**
 *  *
  * given expression evaluate to respectively the same/different value as the switch
  * expression.
  * *
  * ```
  * <container-element [ngSwitch]="switch_expression">
  * <some-element *ngSwitchCase="match_expression_1">...</some-element>
  * </container-element>
  * *```
  * *
  * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
  * expression.
  * *
  * If multiple match expressions match the switch expression value, all of them are displayed.
  * *
  * See {@link NgSwitch} for more details and example.
  * *
 */
var NgSwitchCase = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * @return {?}
     */
    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
    NgSwitchCase.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchCase]' },] },
    ];
    /** @nocollapse */
    NgSwitchCase.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: NgSwitch, decorators: [{ type: Host },] },
    ]; };
    NgSwitchCase.propDecorators = {
        'ngSwitchCase': [{ type: Input },],
    };
    return NgSwitchCase;
}());
/**
 *  match the
  * switch expression.
  * *
  * ```
  * <container-element [ngSwitch]="switch_expression">
  * <some-element *ngSwitchCase="match_expression_1">...</some-element>
  * <some-other-element *ngSwitchDefault>...</some-other-element>
  * </container-element>
  * ```
  * *
  * *
  * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
  * expression.
  * *
  * See {@link NgSwitch} for more details and example.
  * *
 */
var NgSwitchDefault = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    NgSwitchDefault.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] },
    ];
    /** @nocollapse */
    NgSwitchDefault.ctorParameters = function () { return [
        { type: ViewContainerRef, },
        { type: TemplateRef, },
        { type: NgSwitch, decorators: [{ type: Host },] },
    ]; };
    return NgSwitchDefault;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * ```
  * <some-element [ngPlural]="value">
  * <template ngPluralCase="=0">there is nothing</template>
  * <template ngPluralCase="=1">there is one</template>
  * <template ngPluralCase="few">there are a few</template>
  * </some-element>
  * ```
  * *
  * *
  * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
  * that match the switch expression's pluralization category.
  * *
  * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
  * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
  * expression:
  * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
  * matches the switch expression exactly,
  * - otherwise, the view will be treated as a "category match", and will only display if exact
  * value matches aren't found and the value maps to its category for the defined locale.
  * *
  * See http://cldr.unicode.org/index/cldr-spec/plural-rules
  * *
 */
var NgPlural = (function () {
    /**
     * @param {?} _localization
     */
    function NgPlural(_localization) {
        this._localization = _localization;
        this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._switchValue = value;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */
    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
    /**
     * @return {?}
     */
    NgPlural.prototype._updateView = function () {
        this._clearViews();
        var /** @type {?} */ cases = Object.keys(this._caseViews);
        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
    };
    /**
     * @return {?}
     */
    NgPlural.prototype._clearViews = function () {
        if (this._activeView)
            this._activeView.destroy();
    };
    /**
     * @param {?} view
     * @return {?}
     */
    NgPlural.prototype._activateView = function (view) {
        if (view) {
            this._activeView = view;
            this._activeView.create();
        }
    };
    NgPlural.decorators = [
        { type: Directive, args: [{ selector: '[ngPlural]' },] },
    ];
    /** @nocollapse */
    NgPlural.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    NgPlural.propDecorators = {
        'ngPlural': [{ type: Input },],
    };
    return NgPlural;
}());
/**
 *  *
  * given expression matches the plural expression according to CLDR rules.
  * *
  * ```
  * <some-element [ngPlural]="value">
  * <template ngPluralCase="=0">...</template>
  * <template ngPluralCase="other">...</template>
  * </some-element>
  * *```
  * *
  * See {@link NgPlural} for more details and example.
  * *
 */
var NgPluralCase = (function () {
    /**
     * @param {?} value
     * @param {?} template
     * @param {?} viewContainer
     * @param {?} ngPlural
     */
    function NgPluralCase(value, template, viewContainer, ngPlural) {
        this.value = value;
        ngPlural.addCase(value, new SwitchView(viewContainer, template));
    }
    NgPluralCase.decorators = [
        { type: Directive, args: [{ selector: '[ngPluralCase]' },] },
    ];
    /** @nocollapse */
    NgPluralCase.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase',] },] },
        { type: TemplateRef, },
        { type: ViewContainerRef, },
        { type: NgPlural, decorators: [{ type: Host },] },
    ]; };
    return NgPluralCase;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * ```
  * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
  * *
  * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
  * *
  * <some-element [ngStyle]="objExp">...</some-element>
  * ```
  * *
  * *
  * The styles are updated according to the value of the expression evaluation:
  * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
  * - values are the values assigned to those properties (expressed in the given unit).
  * *
 */
var NgStyle = (function () {
    /**
     * @param {?} _differs
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgStyle(_differs, _ngEl, _renderer) {
        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._ngStyle = v;
            if (!this._differ && v) {
                this._differ = this._differs.find(v).create(null);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgStyle.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
            if (changes) {
                this._applyChanges(changes);
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgStyle.prototype._applyChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
    };
    /**
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
        value = value && unit ? "" + value + unit : value;
        this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
    };
    NgStyle.decorators = [
        { type: Directive, args: [{ selector: '[ngStyle]' },] },
    ];
    /** @nocollapse */
    NgStyle.ctorParameters = function () { return [
        { type: KeyValueDiffers, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    NgStyle.propDecorators = {
        'ngStyle': [{ type: Input },],
    };
    return NgStyle;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * ```
  * <template [ngTemplateOutlet]="templateRefExpression"
  * [ngOutletContext]="objectExpression">
  * </template>
  * ```
  * *
  * *
  * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
  * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
  * available within the `TemplateRef`.
  * *
  * Note: using the key `$implicit` in the context object will set it's value as default.
  * *
 */
var NgTemplateOutlet = (function () {
    /**
     * @param {?} _viewContainerRef
     */
    function NgTemplateOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
        /**
         * @param {?} context
         * @return {?}
         */
        set: function (context) { this._context = context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
        /**
         * @param {?} templateRef
         * @return {?}
         */
        set: function (templateRef) { this._templateRef = templateRef; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
        if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this._templateRef) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
        }
    };
    NgTemplateOutlet.decorators = [
        { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
    ];
    /** @nocollapse */
    NgTemplateOutlet.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    NgTemplateOutlet.propDecorators = {
        'ngOutletContext': [{ type: Input },],
        'ngTemplateOutlet': [{ type: Input },],
    };
    return NgTemplateOutlet;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */
var COMMON_DIRECTIVES = [
    NgClass,
    NgFor,
    NgIf,
    NgTemplateOutlet,
    NgStyle,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    NgPlural,
    NgPluralCase,
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var isPromise$1 = __core_private__.isPromise;

var __extends$20 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */

/**
 * @stable
 */
var BaseError$1 = (function (_super) {
    __extends$20(BaseError, _super);
    /**
     * @param {?} message
     */
    function BaseError(message) {
        _super.call(this, message);
        // Errors don't use current this, instead they create a new instance.
        // We have to do forward all of our api to the nativeInstance.
        // TODO(bradfordcsmith): Remove this hack when
        //     google/closure-compiler/issues/2102 is fixed.
        var nativeError = new Error(message);
        this._nativeError = nativeError;
    }
    Object.defineProperty(BaseError.prototype, "message", {
        /**
         * @return {?}
         */
        get: function () { return this._nativeError.message; },
        /**
         * @param {?} message
         * @return {?}
         */
        set: function (message) { this._nativeError.message = message; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "name", {
        /**
         * @return {?}
         */
        get: function () { return this._nativeError.name; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseError.prototype, "stack", {
        /**
         * @return {?}
         */
        get: function () { return ((this._nativeError)).stack; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) { ((this._nativeError)).stack = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseError.prototype.toString = function () { return this._nativeError.toString(); };
    return BaseError;
}(Error));
/**
 * @stable
 */
var WrappedError$1 = (function (_super) {
    __extends$20(WrappedError, _super);
    /**
     * @param {?} message
     * @param {?} error
     */
    function WrappedError(message, error) {
        _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
        this.originalError = error;
    }
    Object.defineProperty(WrappedError.prototype, "stack", {
        /**
         * @return {?}
         */
        get: function () {
            return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
                .stack;
        },
        enumerable: true,
        configurable: true
    });
    return WrappedError;
}(BaseError$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$19 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var InvalidPipeArgumentError = (function (_super) {
    __extends$19(InvalidPipeArgumentError, _super);
    /**
     * @param {?} type
     * @param {?} value
     */
    function InvalidPipeArgumentError(type, value) {
        _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify$1(type) + "'");
    }
    return InvalidPipeArgumentError;
}(BaseError$1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ObservableStrategy = (function () {
    function ObservableStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
    return ObservableStrategy;
}());
var PromiseStrategy = (function () {
    function PromiseStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.then(updateLatestValue, function (e) { throw e; });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.dispose = function (subscription) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.onDestroy = function (subscription) { };
    return PromiseStrategy;
}());
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
/**
 *  The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
  * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
  * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
  * potential memory leaks.
  * *
  * *
  * ## Examples
  * *
  * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
  * promise.
  * *
  * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
  * *
  * It's also possible to use `async` with Observables. The example below binds the `time` Observable
  * to the view. The Observable continuously updates the view with the current time.
  * *
  * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
  * *
 */
var AsyncPipe = (function () {
    /**
     * @param {?} _ref
     */
    function AsyncPipe(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = null;
    }
    /**
     * @return {?}
     */
    AsyncPipe.prototype.ngOnDestroy = function () {
        if (this._subscription) {
            this._dispose();
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype.transform = function (obj) {
        if (!this._obj) {
            if (obj) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform(obj);
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return WrappedValue.wrap(this._latestValue);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._subscribe = function (obj) {
        var _this = this;
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._selectStrategy = function (obj) {
        if (isPromise$1(obj)) {
            return _promiseStrategy;
        }
        if (((obj)).subscribe) {
            return _observableStrategy;
        }
        throw new InvalidPipeArgumentError(AsyncPipe, obj);
    };
    /**
     * @return {?}
     */
    AsyncPipe.prototype._dispose = function () {
        this._strategy.dispose(this._subscription);
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    };
    /**
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    AsyncPipe.prototype._updateLatestValue = function (async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    };
    AsyncPipe.decorators = [
        { type: Pipe, args: [{ name: 'async', pure: false },] },
    ];
    /** @nocollapse */
    AsyncPipe.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
    ]; };
    return AsyncPipe;
}());

var NumberFormatStyle = {};
NumberFormatStyle.Decimal = 0;
NumberFormatStyle.Percent = 1;
NumberFormatStyle.Currency = 2;
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
var NumberFormatter = (function () {
    function NumberFormatter() {
    }
    /**
     * @param {?} num
     * @param {?} locale
     * @param {?} style
     * @param {?=} __3
     * @return {?}
     */
    NumberFormatter.format = function (num, locale, style, _a) {
        var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
        var /** @type {?} */ options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
        };
        if (style == NumberFormatStyle.Currency) {
            options.currency = currency;
            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
}());
var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
    // Keys are quoted so they do not get renamed during closure compilation.
    'yMMMdjms': datePartGetterFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1),
        digitCondition('second', 1),
    ])),
    'yMdjm': datePartGetterFactory(combine([
        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
        digitCondition('hour', 1), digitCondition('minute', 1)
    ])),
    'yMMMMEEEEd': datePartGetterFactory(combine([
        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
        digitCondition('day', 1)
    ])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
};
var DATE_FORMATS = {
    // Keys are quoted so they do not get renamed.
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit
    // fractions
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    // first Thursday of the year. not support ?
    'w': datePartGetterFactory({}),
    // of the year not support ?
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
};
/**
 * @param {?} inner
 * @return {?}
 */
function digitModifier(inner) {
    return function (date, locale) {
        var /** @type {?} */ result = inner(date, locale);
        return result.length == 1 ? '0' + result : result;
    };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourClockExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
}
/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
}
/**
 * @param {?} timezone
 * @return {?}
 */
function timeZoneGetter(timezone) {
    // To workaround `Intl` API restriction for single timezone let format with 24 hours
    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
    return function (date, locale) {
        var /** @type {?} */ result = intlDateFormat(date, locale, options);
        // Then extract first 3 letters that related to hours
        return result ? result.substring(3) : '';
    };
}
/**
 * @param {?} options
 * @param {?} value
 * @return {?}
 */
function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function digitCondition(prop, len) {
    var /** @type {?} */ result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function nameCondition(prop, len) {
    var /** @type {?} */ result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    }
    else {
        result[prop] = 'long';
    }
    return result;
}
/**
 * @param {?} options
 * @return {?}
 */
function combine(options) {
    return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
    var _a;
}
/**
 * @param {?} ret
 * @return {?}
 */
function datePartGetterFactory(ret) {
    return function (date, locale) { return intlDateFormat(date, locale, ret); };
}
var DATE_FORMATTER_CACHE = new Map();
/**
 * @param {?} format
 * @param {?} date
 * @param {?} locale
 * @return {?}
 */
function dateFormatter(format, date, locale) {
    var /** @type {?} */ fn = PATTERN_ALIASES[format];
    if (fn)
        return fn(date, locale);
    var /** @type {?} */ cacheKey = format;
    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
        parts = [];
        var /** @type {?} */ match = void 0;
        DATE_FORMATS_SPLIT.exec(format);
        while (format) {
            match = DATE_FORMATS_SPLIT.exec(format);
            if (match) {
                parts = parts.concat(match.slice(1));
                format = parts.pop();
            }
            else {
                parts.push(format);
                format = null;
            }
        }
        DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function (text, part) {
        var /** @type {?} */ fn = DATE_FORMATS[part];
        return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
}
/**
 * @param {?} part
 * @return {?}
 */
function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
}
var DateFormatter = (function () {
    function DateFormatter() {
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} pattern
     * @return {?}
     */
    DateFormatter.format = function (date, locale, pattern) {
        return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Where:
  * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
  * (https://www.w3.org/TR/NOTE-datetime).
  * - `format` indicates which date/time components to include. The format can be predifined as
  * shown below or custom as shown in the table.
  * - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
  * - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
  * - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
  * - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
  * - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
  * - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
  * - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
  * - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
  * *
  * *
  * | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
  * |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
  * | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
  * | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
  * | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
  * | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
  * | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
  * | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
  * | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
  * | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
  * | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
  * | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
  * | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
  * | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
  * | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
  * *
  * In javascript, only the components specified will be respected (not the ordering,
  * punctuations, ...) and details of the formatting will be dependent on the locale.
  * *
  * Timezone of the formatted text will be the local system timezone of the end-user's machine.
  * *
  * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
  * applied and the formatted text will have the same day, month and year of the expression.
  * *
  * WARNINGS:
  * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
  * Instead users should treat the date as an immutable object and change the reference when the
  * pipe needs to re-run (this is to avoid reformatting the date on every change detection run
  * which would be an expensive operation).
  * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
  * browsers.
  * *
  * ### Examples
  * *
  * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
  * in the _local_ time and locale is 'en-US':
  * *
  * ```
  * {{ dateObj | date }}               // output is 'Jun 15, 2015'
  * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
  * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
  * {{ dateObj | date:'mmss' }}        // output is '43:11'
  * ```
  * *
  * {@example common/pipes/ts/date_pipe.ts region='DatePipe'}
  * *
 */
var DatePipe = (function () {
    /**
     * @param {?} _locale
     */
    function DatePipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */
    DatePipe.prototype.transform = function (value, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        var /** @type {?} */ date;
        if (isBlank$2(value))
            return null;
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (isDate$1(value)) {
            date = value;
        }
        else if (NumberWrapper$1.isNumeric(value)) {
            date = new Date(parseFloat(value));
        }
        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            /**
            * For ISO Strings without time the day, month and year must be extracted from the ISO String
            * before Date creation to avoid time offset and errors in the new Date.
            * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
            * date, some browsers (e.g. IE 9) will throw an invalid Date error
            * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
            * is applied
            * Note: ISO months are 0 for January, 1 for February, ...
            */
            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
            date = new Date(y, m - 1, d);
        }
        else {
            date = new Date(value);
        }
        if (!isDate$1(date)) {
            throw new InvalidPipeArgumentError(DatePipe, value);
        }
        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    };
    /** @internal */
    DatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DatePipe.decorators = [
        { type: Pipe, args: [{ name: 'date', pure: true },] },
    ];
    /** @nocollapse */
    DatePipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    return DatePipe;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank$2(obj) {
    return obj == null || obj === '';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _INTERPOLATION_REGEXP = /#/g;
/**
 *  *
  * Where:
  * - `expression` is a number.
  * - `mapping` is an object that mimics the ICU format, see
  * http://userguide.icu-project.org/formatparse/messages
  * *
  * ## Example
  * *
  * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
  * *
 */
var I18nPluralPipe = (function () {
    /**
     * @param {?} _localization
     */
    function I18nPluralPipe(_localization) {
        this._localization = _localization;
    }
    /**
     * @param {?} value
     * @param {?} pluralMap
     * @return {?}
     */
    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
        if (value == null)
            return '';
        if (typeof pluralMap !== 'object' || pluralMap === null) {
            throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
        }
        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    I18nPluralPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] },
    ];
    /** @nocollapse */
    I18nPluralPipe.ctorParameters = function () { return [
        { type: NgLocalization, },
    ]; };
    return I18nPluralPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Where `mapping` is an object that indicates the text that should be displayed
  * for different values of the provided `expression`.
  * If none of the keys of the mapping match the value of the `expression`, then the content
  * of the `other` key is returned when present, otherwise an empty string is returned.
  * *
  * ## Example
  * *
  * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
  * *
  * @experimental
 */
var I18nSelectPipe = (function () {
    function I18nSelectPipe() {
    }
    /**
     * @param {?} value
     * @param {?} mapping
     * @return {?}
     */
    I18nSelectPipe.prototype.transform = function (value, mapping) {
        if (value == null)
            return '';
        if (typeof mapping !== 'object' || typeof value !== 'string') {
            throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
            return mapping[value];
        }
        if (mapping.hasOwnProperty('other')) {
            return mapping['other'];
        }
        return '';
    };
    I18nSelectPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] },
    ];
    /** @nocollapse */
    I18nSelectPipe.ctorParameters = function () { return []; };
    return I18nSelectPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Converts value into string using `JSON.stringify`. Useful for debugging.
  * *
  * ### Example
  * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
  * *
 */
var JsonPipe = (function () {
    function JsonPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
    JsonPipe.decorators = [
        { type: Pipe, args: [{ name: 'json', pure: false },] },
    ];
    /** @nocollapse */
    JsonPipe.ctorParameters = function () { return []; };
    return JsonPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
  * *
  * ### Example
  * *
  * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
  * *
 */
var LowerCasePipe = (function () {
    function LowerCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    LowerCasePipe.prototype.transform = function (value) {
        if (isBlank$1(value))
            return value;
        if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(LowerCasePipe, value);
        }
        return value.toLowerCase();
    };
    LowerCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'lowercase' },] },
    ];
    /** @nocollapse */
    LowerCasePipe.ctorParameters = function () { return []; };
    return LowerCasePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/**
 * @param {?} pipe
 * @param {?} locale
 * @param {?} value
 * @param {?} style
 * @param {?} digits
 * @param {?=} currency
 * @param {?=} currencyAsSymbol
 * @return {?}
 */
function formatNumber(pipe, locale, value, style$$1, digits, currency, currencyAsSymbol) {
    if (currency === void 0) { currency = null; }
    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
    if (value == null)
        return null;
    // Convert strings to numbers
    value = typeof value === 'string' && NumberWrapper$1.isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
        throw new InvalidPipeArgumentError(pipe, value);
    }
    var /** @type {?} */ minInt;
    var /** @type {?} */ minFraction;
    var /** @type {?} */ maxFraction;
    if (style$$1 !== NumberFormatStyle.Currency) {
        // rely on Intl default for currency
        minInt = 1;
        minFraction = 0;
        maxFraction = 3;
    }
    if (digits) {
        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
        if (parts === null) {
            throw new Error(digits + " is not a valid digit info for number pipes");
        }
        if (parts[1] != null) {
            minInt = NumberWrapper$1.parseIntAutoRadix(parts[1]);
        }
        if (parts[3] != null) {
            minFraction = NumberWrapper$1.parseIntAutoRadix(parts[3]);
        }
        if (parts[5] != null) {
            maxFraction = NumberWrapper$1.parseIntAutoRadix(parts[5]);
        }
    }
    return NumberFormatter.format(/** @type {?} */ (value), locale, style$$1, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol,
    });
}
/**
 *  *
  * Formats a number as text. Group sizing and separator and other locale-specific
  * configurations are based on the active locale.
  * *
  * where `expression` is a number:
  * - `digitInfo` is a `string` which has a following format: <br>
  * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
  * - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
  * - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
  * - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
  * *
  * For more information on the acceptable range for each of these numbers and other
  * details see your native internationalization library.
  * *
  * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
  * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
  * *
  * ### Example
  * *
  * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
  * *
 */
var DecimalPipe = (function () {
    /**
     * @param {?} _locale
     */
    function DecimalPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    DecimalPipe.prototype.transform = function (value, digits) {
        if (digits === void 0) { digits = null; }
        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    DecimalPipe.decorators = [
        { type: Pipe, args: [{ name: 'number' },] },
    ];
    /** @nocollapse */
    DecimalPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    return DecimalPipe;
}());
/**
 *  *
  * *
  * Formats a number as percentage.
  * *
  * - `digitInfo` See {@link DecimalPipe} for detailed description.
  * *
  * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
  * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
  * *
  * ### Example
  * *
  * {@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
  * *
 */
var PercentPipe = (function () {
    /**
     * @param {?} _locale
     */
    function PercentPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    PercentPipe.prototype.transform = function (value, digits) {
        if (digits === void 0) { digits = null; }
        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    PercentPipe.decorators = [
        { type: Pipe, args: [{ name: 'percent' },] },
    ];
    /** @nocollapse */
    PercentPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    return PercentPipe;
}());
/**
 *  *
  * Use `currency` to format a number as currency.
  * *
  * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
  * as `USD` for the US dollar and `EUR` for the euro.
  * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
  * - `true`: use symbol (e.g. `$`).
  * - `false`(default): use code (e.g. `USD`).
  * - `digitInfo` See {@link DecimalPipe} for detailed description.
  * *
  * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
  * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
  * *
  * ### Example
  * *
  * {@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
  * *
 */
var CurrencyPipe = (function () {
    /**
     * @param {?} _locale
     */
    function CurrencyPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
        if (currencyCode === void 0) { currencyCode = 'USD'; }
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        if (digits === void 0) { digits = null; }
        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    CurrencyPipe.decorators = [
        { type: Pipe, args: [{ name: 'currency' },] },
    ];
    /** @nocollapse */
    CurrencyPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ]; };
    return CurrencyPipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Where the input expression is a `List` or `String`, and:
  * - `start`: The starting index of the subset to return.
  * - **a positive integer**: return the item at `start` index and all items after
  * in the list or string expression.
  * - **a negative integer**: return the item at `start` index from the end and all items after
  * in the list or string expression.
  * - **if positive and greater than the size of the expression**: return an empty list or string.
  * - **if negative and greater than the size of the expression**: return entire list or string.
  * - `end`: The ending index of the subset to return.
  * - **omitted**: return all items until the end.
  * - **if positive**: return all items before `end` index of the list or string.
  * - **if negative**: return all items before `end` index from the end of the list or string.
  * *
  * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
  * and `String.prototype.slice()`.
  * *
  * When operating on a [List], the returned list is always a copy even when all
  * the elements are being returned.
  * *
  * When operating on a blank value, the pipe returns the blank value.
  * *
  * ## List Example
  * *
  * This `ngFor` example:
  * *
  * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
  * *
  * produces the following:
  * *
  * <li>b</li>
  * <li>c</li>
  * *
  * ## String Examples
  * *
  * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
  * *
 */
var SlicePipe = (function () {
    function SlicePipe() {
    }
    /**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    SlicePipe.prototype.transform = function (value, start, end) {
        if (value == null)
            return value;
        if (!this.supports(value)) {
            throw new InvalidPipeArgumentError(SlicePipe, value);
        }
        return value.slice(start, end);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
    SlicePipe.decorators = [
        { type: Pipe, args: [{ name: 'slice', pure: false },] },
    ];
    /** @nocollapse */
    SlicePipe.ctorParameters = function () { return []; };
    return SlicePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
  * *
  * ### Example
  * *
  * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
  * *
 */
var UpperCasePipe = (function () {
    function UpperCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    UpperCasePipe.prototype.transform = function (value) {
        if (isBlank$1(value))
            return value;
        if (typeof value !== 'string') {
            throw new InvalidPipeArgumentError(UpperCasePipe, value);
        }
        return value.toUpperCase();
    };
    UpperCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'uppercase' },] },
    ];
    /** @nocollapse */
    UpperCasePipe.ctorParameters = function () { return []; };
    return UpperCasePipe;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */
var COMMON_PIPES = [
    AsyncPipe,
    UpperCasePipe,
    LowerCasePipe,
    JsonPipe,
    SlicePipe,
    DecimalPipe,
    PercentPipe,
    CurrencyPipe,
    DatePipe,
    I18nPluralPipe,
    I18nSelectPipe,
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
  * *
 */
var CommonModule = (function () {
    function CommonModule() {
    }
    CommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [
                        { provide: NgLocalization, useClass: NgLocaleLocalization },
                    ],
                },] },
    ];
    /** @nocollapse */
    CommonModule.ctorParameters = function () { return []; };
    return CommonModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @stable
 */
var VERSION$1 = new Version('2.4.3');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */


var DebugDomRootRenderer$1 = __core_private__.DebugDomRootRenderer;

var NoOpAnimationPlayer$1 = __core_private__.NoOpAnimationPlayer;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental
 */
var NoOpAnimationDriver = (function () {
    function NoOpAnimationDriver() {
    }
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        return new NoOpAnimationPlayer$1();
    };
    return NoOpAnimationDriver;
}());
/**
 * @abstract
 */
var AnimationDriver = (function () {
    function AnimationDriver() {
    }
    /**
     * @abstract
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
    AnimationDriver.NOOP = new NoOpAnimationDriver();
    return AnimationDriver;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var globalScope$2;
if (typeof window === 'undefined') {
    if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
        // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
        globalScope$2 = (self);
    }
    else {
        globalScope$2 = (global);
    }
}
else {
    globalScope$2 = (window);
}
/**
 * @param {?} fn
 * @return {?}
 */

// Need to declare a new variable for global here since TypeScript
// exports the original value of the symbol.
var _global$2 = globalScope$2;
/**
 * @param {?} type
 * @return {?}
 */

// TODO: remove calls to assert in production environment
// Note: Can't just export this and import in in other files
// as `assert` is a reserved keyword in Dart
_global$2.assert = function assert(condition) {
    // TODO: to be fixed properly via #2830, noop for now
};
/**
 * @param {?} obj
 * @return {?}
 */
function isPresent$2(obj) {
    return obj != null;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank$3(obj) {
    return obj == null;
}
/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} token
 * @return {?}
 */
function stringify$2(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}

/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */

/**
 * @param {?} o
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} global
 * @param {?} path
 * @param {?} value
 * @return {?}
 */
function setValueOnPath$2(global, path, value) {
    var /** @type {?} */ parts = path.split('.');
    var /** @type {?} */ obj = global;
    while (parts.length > 1) {
        var /** @type {?} */ name_1 = parts.shift();
        if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
            obj = obj[name_1];
        }
        else {
            obj = obj[name_1] = {};
        }
    }
    if (obj === undefined || obj === null) {
        obj = {};
    }
    obj[parts.shift()] = value;
}
/**
 * @return {?}
 */

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} s
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _DOM = null;
/**
 * @return {?}
 */
function getDOM() {
    return _DOM;
}
/**
 * @param {?} adapter
 * @return {?}
 */

/**
 * @param {?} adapter
 * @return {?}
 */
function setRootDomAdapter(adapter) {
    if (!_DOM) {
        _DOM = adapter;
    }
}
/**
 *  Provides DOM operations in an environment-agnostic way.
  * *
  * can introduce XSS risks.
 * @abstract
 */
var DomAdapter = (function () {
    function DomAdapter() {
        this.resourceLoaderType = null;
    }
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setProperty = function (el, name, value) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getProperty = function (el, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    DomAdapter.prototype.invoke = function (el, methodName, args) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.logError = function (error) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.log = function (error) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.logGroup = function (error) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.logGroupEnd = function () { };
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
        /**
         *  Maps attribute names to their corresponding property names for cases
          * where attribute name doesn't match property name.
         * @return {?}
         */
        get: function () { return this._attrToPropMap; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) { this._attrToPropMap = value; },
        enumerable: true,
        configurable: true
    });
    
    
    /**
     * @abstract
     * @param {?} templateHtml
     * @return {?}
     */
    DomAdapter.prototype.parse = function (templateHtml) { };
    /**
     * @abstract
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.query = function (selector) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    DomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    DomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt) { };
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */
    DomAdapter.prototype.createMouseEvent = function (eventType) { };
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */
    DomAdapter.prototype.createEvent = function (eventType) { };
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.preventDefault = function (evt) { };
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.isPrevented = function (evt) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getInnerHTML = function (el) { };
    /**
     *  Returns content if el is a <template> element, null otherwise.
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getTemplateContent = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getOuterHTML = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.nodeName = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.nodeValue = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.type = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.content = function (node) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.firstChild = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.nextSibling = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.parentElement = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.childNodes = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.childNodesAsList = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.clearNodes = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} newNode
     * @param {?} oldNode
     * @return {?}
     */
    DomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.remove = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} nodes
     * @return {?}
     */
    DomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getText = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getValue = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getChecked = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { };
    /**
     * @abstract
     * @param {?} text
     * @return {?}
     */
    DomAdapter.prototype.createComment = function (text) { };
    /**
     * @abstract
     * @param {?} html
     * @return {?}
     */
    DomAdapter.prototype.createTemplate = function (html) { };
    /**
     * @abstract
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc) { };
    /**
     * @abstract
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
    /**
     * @abstract
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createTextNode = function (text, doc) { };
    /**
     * @abstract
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
    /**
     * @abstract
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createStyleElement = function (css, doc) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.createShadowRoot = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getShadowRoot = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getHost = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getDistributedNodes = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.classList = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    DomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    DomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.tagName = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.attributeMap = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.templateAwareRoot = function (el) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.createHtmlDocument = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.defaultDoc = function () { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getBoundingClientRect = function (el) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getTitle = function () { };
    /**
     * @abstract
     * @param {?} newTitle
     * @return {?}
     */
    DomAdapter.prototype.setTitle = function (newTitle) { };
    /**
     * @abstract
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.isTemplateElement = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isTextNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isCommentNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isElementNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.hasShadowRoot = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isShadowRoot = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.getHref = function (element) { };
    /**
     * @abstract
     * @param {?} event
     * @return {?}
     */
    DomAdapter.prototype.getEventKey = function (event) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    DomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsDOMEvents = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
    /**
     * @abstract
     * @param {?} target
     * @return {?}
     */
    DomAdapter.prototype.getGlobalEventTarget = function (target) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getHistory = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getLocation = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getBaseHref = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.resetBaseElement = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getUserAgent = function () { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.getComputedStyle = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getData = function (element /** TODO #9100 */, name) { };
    /**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setGlobalVar = function (name, value) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsWebAnimation = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.performanceNow = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getAnimationPrefix = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getTransitionEnd = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsAnimation = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsCookies = function () { };
    /**
     * @abstract
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getCookie = function (name) { };
    /**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setCookie = function (name, value) { };
    return DomAdapter;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsPlayer = (function () {
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @param {?=} previousPlayers
     */
    function WebAnimationsPlayer(element, keyframes$$1, options, previousPlayers) {
        var _this = this;
        if (previousPlayers === void 0) { previousPlayers = []; }
        this.element = element;
        this.keyframes = keyframes$$1;
        this.options = options;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.parentPlayer = null;
        this._duration = options['duration'];
        this.previousStyles = {};
        previousPlayers.forEach(function (player) {
            var styles = player._captureStyles();
            Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
        });
    }
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._onFinish = function () {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach(function (fn) { return fn(); });
            this._onDoneFns = [];
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.init = function () {
        var _this = this;
        if (this._initialized)
            return;
        this._initialized = true;
        var /** @type {?} */ keyframes$$1 = this.keyframes.map(function (styles) {
            var /** @type {?} */ formattedKeyframe = {};
            Object.keys(styles).forEach(function (prop, index) {
                var /** @type {?} */ value = styles[prop];
                if (value == AUTO_STYLE) {
                    value = _computeStyle(_this.element, prop);
                }
                if (value != undefined) {
                    formattedKeyframe[prop] = value;
                }
            });
            return formattedKeyframe;
        });
        var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
        if (previousStyleProps.length) {
            var /** @type {?} */ startingKeyframe_1 = keyframes$$1[0];
            var /** @type {?} */ missingStyleProps_1 = [];
            previousStyleProps.forEach(function (prop) {
                if (!isPresent$2(startingKeyframe_1[prop])) {
                    missingStyleProps_1.push(prop);
                }
                startingKeyframe_1[prop] = _this.previousStyles[prop];
            });
            if (missingStyleProps_1.length) {
                var _loop_1 = function(i) {
                    var /** @type {?} */ kf = keyframes$$1[i];
                    missingStyleProps_1.forEach(function (prop) { kf[prop] = _computeStyle(_this.element, prop); });
                };
                for (var /** @type {?} */ i = 1; i < keyframes$$1.length; i++) {
                    _loop_1(i);
                }
            }
        }
        this._player = this._triggerWebAnimation(this.element, keyframes$$1, this.options);
        this._finalKeyframe = _copyKeyframeStyles(keyframes$$1[keyframes$$1.length - 1]);
        // this is required so that the player doesn't start to animate right away
        this._resetDomPlayerState();
        this._player.addEventListener('finish', function () { return _this._onFinish(); });
    };
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */
    WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes$$1, options) {
        return (element.animate(keyframes$$1, options));
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
        /**
         * @return {?}
         */
        get: function () { return this._player; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
    /**
     * @param {?} fn
     * @return {?}
     */
    WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.play = function () {
        this.init();
        if (!this.hasStarted()) {
            this._onStartFns.forEach(function (fn) { return fn(); });
            this._onStartFns = [];
            this._started = true;
        }
        this._player.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.pause = function () {
        this.init();
        this._player.pause();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.finish = function () {
        this.init();
        this._onFinish();
        this._player.finish();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.reset = function () {
        this._resetDomPlayerState();
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
        if (this._player) {
            this._player.cancel();
        }
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.restart = function () {
        this.reset();
        this.play();
    };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.destroy = function () {
        if (!this._destroyed) {
            this._resetDomPlayerState();
            this._onFinish();
            this._destroyed = true;
        }
    };
    Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
        /**
         * @return {?}
         */
        get: function () { return this._duration; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} p
     * @return {?}
     */
    WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
    /**
     * @return {?}
     */
    WebAnimationsPlayer.prototype._captureStyles = function () {
        var _this = this;
        var /** @type {?} */ styles = {};
        if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach(function (prop) {
                if (prop != 'offset') {
                    styles[prop] =
                        _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
                }
            });
        }
        return styles;
    };
    return WebAnimationsPlayer;
}());
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
function _computeStyle(element, prop) {
    return getDOM().getComputedStyle(element)[prop];
}
/**
 * @param {?} styles
 * @return {?}
 */
function _copyKeyframeStyles(styles) {
    var /** @type {?} */ newStyles = {};
    Object.keys(styles).forEach(function (prop) {
        if (prop != 'offset') {
            newStyles[prop] = styles[prop];
        }
    });
    return newStyles;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var WebAnimationsDriver = (function () {
    function WebAnimationsDriver() {
    }
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        var /** @type {?} */ formattedSteps = [];
        var /** @type {?} */ startingStyleLookup = {};
        if (isPresent$2(startingStyles)) {
            startingStyleLookup = _populateStyles(startingStyles, {});
        }
        keyframes.forEach(function (keyframe) {
            var /** @type {?} */ data = _populateStyles(keyframe.styles, startingStyleLookup);
            data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
            formattedSteps.push(data);
        });
        // Styling passed into element.animate() must always be balanced.
        // The special cases below can occur if only style() calls exist
        // within an animation or when a style() calls are used prior
        // to a group() animation being issued or if the renderer is
        // invoked by the user directly.
        if (formattedSteps.length == 0) {
            formattedSteps = [startingStyleLookup, startingStyleLookup];
        }
        else if (formattedSteps.length == 1) {
            var /** @type {?} */ start = startingStyleLookup;
            var /** @type {?} */ end = formattedSteps[0];
            end['offset'] = null;
            formattedSteps = [start, end];
        }
        var /** @type {?} */ playerOptions = {
            'duration': duration,
            'delay': delay,
            'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
        };
        // we check for this to avoid having a null|undefined value be present
        // for the easing (which results in an error for certain browsers #9752)
        if (easing) {
            playerOptions['easing'] = easing;
        }
        // there may be a chance a NoOp player is returned depending
        // on when the previous animation was cancelled
        previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
        return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */ (previousPlayers));
    };
    return WebAnimationsDriver;
}());
/**
 * @param {?} styles
 * @param {?} defaultStyles
 * @return {?}
 */
function _populateStyles(styles, defaultStyles) {
    var /** @type {?} */ data = {};
    styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
    Object.keys(defaultStyles).forEach(function (prop) {
        if (!isPresent$2(data[prop])) {
            data[prop] = defaultStyles[prop];
        }
    });
    return data;
}
/**
 * @param {?} player
 * @return {?}
 */
function filterWebAnimationPlayerFn(player) {
    return player instanceof WebAnimationsPlayer;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$22 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  Provides DOM operations in any browser environment.
  * *
  * can introduce XSS risks.
 * @abstract
 */
var GenericBrowserDomAdapter = (function (_super) {
    __extends$22(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
        var _this = this;
        _super.call(this);
        this._animationPrefix = null;
        this._transitionEnd = null;
        try {
            var element_1 = this.createElement('div', this.defaultDoc());
            if (isPresent$2(this.getStyle(element_1, 'animationName'))) {
                this._animationPrefix = '';
            }
            else {
                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                for (var i = 0; i < domPrefixes.length; i++) {
                    if (isPresent$2(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
                        this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                        break;
                    }
                }
            }
            var transEndEventNames_1 = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function (key) {
                if (isPresent$2(_this.getStyle(element_1, key))) {
                    _this._transitionEnd = transEndEventNames_1[key];
                }
            });
        }
        catch (e) {
            this._animationPrefix = null;
            this._transitionEnd = null;
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
    /**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
        return typeof ((this.defaultDoc().body)).createShadowRoot === 'function';
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
        return isPresent$2(this._animationPrefix) && isPresent$2(this._transitionEnd);
    };
    return GenericBrowserDomAdapter;
}(DomAdapter));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$21 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex',
};
var DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var _keyMap = {
    // The following values are here for cross-browser compatibility and to match the W3C standard
    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
/**
 * A `DomAdapter` powered by full browser DOM APIs.
 *
 * @security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */
/* tslint:disable:requireParameterType no-console */
var BrowserDomAdapter = (function (_super) {
    __extends$21(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
        _super.apply(this, arguments);
    }
    /**
     * @param {?} templateHtml
     * @return {?}
     */
    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
    /**
     * @return {?}
     */
    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
    /**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = ((el)))[methodName].apply(_a, args); var _a; };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logError = function (error) {
        if (window.console) {
            if (console.error) {
                console.error(error);
            }
            else {
                console.log(error);
            }
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.log = function (error) {
        if (window.console) {
            window.console.log && window.console.log(error);
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroup = function (error) {
        if (window.console) {
            window.console.group && window.console.group(error);
        }
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroupEnd = function () {
        if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
        }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
        /**
         * @return {?}
         */
        get: function () { return _attrToPropMap; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelector = function (el, selector) {
        return (el.querySelector(selector));
    };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
        el.addEventListener(evt, listener, false);
        // Needed to follow Dart's subscription semantic, until fix of
        // https://code.google.com/p/dart/issues/detail?id=17406
        return function () { el.removeEventListener(evt, listener, false); };
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('MouseEvent');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('Event');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.preventDefault = function (evt) {
        evt.preventDefault();
        evt.returnValue = false;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.isPrevented = function (evt) {
        return evt.defaultPrevented || isPresent$2(evt.returnValue) && !evt.returnValue;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.content = function (node) {
        if (this.hasProperty(node, 'content')) {
            return ((node)).content;
        }
        else {
            return node;
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
        var /** @type {?} */ childNodes = el.childNodes;
        var /** @type {?} */ res = new Array(childNodes.length);
        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
        }
        return res;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.clearNodes = function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
    /**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */
    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.remove = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
    /**
     * @param {?} el
     * @param {?} nodes
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
        nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
    };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
    /**
     * @param {?} text
     * @return {?}
     */
    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
    /**
     * @param {?} html
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTemplate = function (html) {
        var /** @type {?} */ t = document.createElement('template');
        t.innerHTML = html;
        return t;
    };
    /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElement(tagName);
    };
    /**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElementNS(ns, tagName);
    };
    /**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createTextNode(text);
    };
    /**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
        el.setAttribute(attrName, attrValue);
        return el;
    };
    /**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ style = (doc.createElement('style'));
        this.appendChild(style, this.createTextNode(css));
        return style;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
        return element.getElementsByClassName(name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
        return element.getElementsByTagName(name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasClass = function (element, className) {
        return element.classList.contains(className);
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
        element.style[styleName] = styleValue;
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
        // IE requires '' instead of null
        // see https://github.com/angular/angular/issues/7916
        element.style[stylename] = '';
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
        if (styleValue === void 0) { styleValue = null; }
        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
        return styleValue ? value == styleValue : value.length > 0;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.attributeMap = function (element) {
        var /** @type {?} */ res = new Map();
        var /** @type {?} */ elAttrs = element.attributes;
        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
            var /** @type {?} */ attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
        }
        return res;
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
        return element.hasAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
        return element.hasAttributeNS(ns, attribute);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
        return element.getAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
        return element.getAttributeNS(ns, name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
        element.setAttributeNS(ns, name, value);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
        element.removeAttributeNS(ns, name);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.createHtmlDocument = function () {
        return document.implementation.createHTMLDocument('fakeTitle');
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
        try {
            return el.getBoundingClientRect();
        }
        catch (e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
        }
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
    /**
     * @param {?} newTitle
     * @return {?}
     */
    BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
    /**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
        if (n instanceof HTMLElement) {
            return n.matches && n.matches(selector) ||
                n.msMatchesSelector && n.msMatchesSelector(selector) ||
                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }
        return false;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
        return isPresent$2(node.shadowRoot) && node instanceof HTMLElement;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
    /**
     * @param {?} event
     * @return {?}
     */
    BrowserDomAdapter.prototype.getEventKey = function (event) {
        var /** @type {?} */ key = event.key;
        if (isBlank$3(key)) {
            key = event.keyIdentifier;
            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
            // Safari cf
            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
            if (isBlank$3(key)) {
                return 'Unidentified';
            }
            if (key.startsWith('U+')) {
                key = String.fromCharCode(parseInt(key.substring(2), 16));
                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                    // There is a bug in Chrome for numeric keypad keys:
                    // https://code.google.com/p/chromium/issues/detail?id=155654
                    // 1, 2, 3 ... are reported as A, B, C ...
                    key = ((_chromeNumKeyPadMap))[key];
                }
            }
        }
        return _keyMap[key] || key;
    };
    /**
     * @param {?} target
     * @return {?}
     */
    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
        if (target === 'window') {
            return window;
        }
        if (target === 'document') {
            return document;
        }
        if (target === 'body') {
            return document.body;
        }
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBaseHref = function () {
        var /** @type {?} */ href = getBaseElementHref();
        return isBlank$3(href) ? null : relativePath(href);
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setData = function (element, name, value) {
        this.setAttribute(element, 'data-' + name, value);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getData = function (element, name) {
        return this.getAttribute(element, 'data-' + name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
    /**
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath$2(_global$2, path, value); };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
        return typeof ((Element)).prototype['animate'] === 'function';
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.performanceNow = function () {
        // performance.now() is not available in all browsers, see
        // http://caniuse.com/#search=performance.now
        return window.performance && window.performance.now ? window.performance.now() :
            new Date().getTime();
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
    /**
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setCookie = function (name, value) {
        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
        // not clear other cookies.
        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
}(GenericBrowserDomAdapter));
var baseElement = null;
/**
 * @return {?}
 */
function getBaseElementHref() {
    if (!baseElement) {
        baseElement = document.querySelector('base');
        if (!baseElement) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
var urlParsingNode;
/**
 * @param {?} url
 * @return {?}
 */
function relativePath(url) {
    if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}
/**
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */
function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
        var cookie = _a[_i];
        var /** @type {?} */ eqIndex = cookie.indexOf('=');
        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
        if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */
function supportsState() {
    return !!window.history.pushState;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$23 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  `PlatformLocation` encapsulates all of the direct calls to platform APIs.
  * This class should not be used directly by an application developer. Instead, use
  * {@link Location}.
 */
var BrowserPlatformLocation = (function (_super) {
    __extends$23(BrowserPlatformLocation, _super);
    function BrowserPlatformLocation() {
        _super.call(this);
        this._init();
    }
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype._init = function () {
        this._location = getDOM().getLocation();
        this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
        /**
         * @return {?}
         */
        get: function () { return this._location; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onPopState = function (fn) {
        getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
        getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
        /**
         * @return {?}
         */
        get: function () { return this._location.pathname; },
        /**
         * @param {?} newPath
         * @return {?}
         */
        set: function (newPath) { this._location.pathname = newPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
        /**
         * @return {?}
         */
        get: function () { return this._location.search; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
        /**
         * @return {?}
         */
        get: function () { return this._location.hash; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.pushState = function (state$$1, title, url) {
        if (supportsState()) {
            this._history.pushState(state$$1, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.replaceState = function (state$$1, title, url) {
        if (supportsState()) {
            this._history.replaceState(state$$1, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
    BrowserPlatformLocation.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BrowserPlatformLocation.ctorParameters = function () { return []; };
    return BrowserPlatformLocation;
}(PlatformLocation));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserGetTestability = (function () {
    function BrowserGetTestability() {
    }
    /**
     * @return {?}
     */
    BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };
    /**
     * @param {?} registry
     * @return {?}
     */
    BrowserGetTestability.prototype.addToWindow = function (registry) {
        _global$2.getAngularTestability = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return testability;
        };
        _global$2.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
        _global$2.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
            var /** @type {?} */ testabilities = _global$2.getAllAngularTestabilities();
            var /** @type {?} */ count = testabilities.length;
            var /** @type {?} */ didWork = false;
            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
                didWork = didWork || didWork_;
                count--;
                if (count == 0) {
                    callback(didWork);
                }
            };
            testabilities.forEach(function (testability /** TODO #9100 */) {
                testability.whenStable(decrement);
            });
        };
        if (!_global$2['frameworkStabilizers']) {
            _global$2['frameworkStabilizers'] = [];
        }
        _global$2['frameworkStabilizers'].push(whenAllStable);
    };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        if (elem == null) {
            return null;
        }
        var /** @type {?} */ t = registry.getTestability(elem);
        if (isPresent$2(t)) {
            return t;
        }
        else if (!findInAncestors) {
            return null;
        }
        if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
        }
        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  A service that can be used to get and set the title of a current HTML document.
  * *
  * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
  * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
  * (representing the `<title>` tag). Instead, this service can be used to set and get the current
  * title value.
  * *
 */
var Title = (function () {
    function Title() {
    }
    /**
     *  Get the title of the current HTML document.
     * @return {?}
     */
    Title.prototype.getTitle = function () { return getDOM().getTitle(); };
    /**
     *  Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */
    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
    return Title;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Wraps Javascript Objects
 */
var StringMapWrapper$2 = (function () {
    function StringMapWrapper() {
    }
    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.merge = function (m1, m2) {
        var /** @type {?} */ m = {};
        for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
            var k = _a[_i];
            m[k] = m1[k];
        }
        for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
            var k = _c[_b];
            m[k] = m2[k];
        }
        return m;
    };
    /**
     * @param {?} m1
     * @param {?} m2
     * @return {?}
     */
    StringMapWrapper.equals = function (m1, m2) {
        var /** @type {?} */ k1 = Object.keys(m1);
        var /** @type {?} */ k2 = Object.keys(m2);
        if (k1.length != k2.length) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < k1.length; i++) {
            var /** @type {?} */ key = k1[i];
            if (m1[key] !== m2[key]) {
                return false;
            }
        }
        return true;
    };
    return StringMapWrapper;
}());

/**
 * @param {?} obj
 * @return {?}
 */

/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */

/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @stable
 */
var DOCUMENT = new OpaqueToken('DocumentToken');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @stable
 */
var EVENT_MANAGER_PLUGINS = new OpaqueToken('EventManagerPlugins');
/**
 * @stable
 */
var EventManager = (function () {
    /**
     * @param {?} plugins
     * @param {?} _zone
     */
    function EventManager(plugins, _zone) {
        var _this = this;
        this._zone = _zone;
        this._eventNameToPlugin = new Map();
        plugins.forEach(function (p) { return p.manager = _this; });
        this._plugins = plugins.slice().reverse();
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addEventListener(element, eventName, handler);
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    };
    /**
     * @return {?}
     */
    EventManager.prototype.getZone = function () { return this._zone; };
    /**
     * @param {?} eventName
     * @return {?}
     */
    EventManager.prototype._findPluginFor = function (eventName) {
        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
        if (plugin) {
            return plugin;
        }
        var /** @type {?} */ plugins = this._plugins;
        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
            var /** @type {?} */ plugin_1 = plugins[i];
            if (plugin_1.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, plugin_1);
                return plugin_1;
            }
        }
        throw new Error("No event manager plugin found for event " + eventName);
    };
    EventManager.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EventManager.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
        { type: NgZone, },
    ]; };
    return EventManager;
}());
/**
 * @abstract
 */
var EventManagerPlugin = (function () {
    function EventManagerPlugin() {
    }
    /**
     * @abstract
     * @param {?} eventName
     * @return {?}
     */
    EventManagerPlugin.prototype.supports = function (eventName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
        var /** @type {?} */ target = getDOM().getGlobalEventTarget(element);
        if (!target) {
            throw new Error("Unsupported event target " + target + " for event " + eventName);
        }
        return this.addEventListener(target, eventName, handler);
    };
    
    return EventManagerPlugin;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$25 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var SharedStylesHost = (function () {
    function SharedStylesHost() {
        /** @internal */
        this._styles = [];
        /** @internal */
        this._stylesSet = new Set();
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    SharedStylesHost.prototype.addStyles = function (styles) {
        var _this = this;
        var /** @type {?} */ additions = [];
        styles.forEach(function (style$$1) {
            if (!_this._stylesSet.has(style$$1)) {
                _this._stylesSet.add(style$$1);
                _this._styles.push(style$$1);
                additions.push(style$$1);
            }
        });
        this.onStylesAdded(additions);
    };
    /**
     * @param {?} additions
     * @return {?}
     */
    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
    /**
     * @return {?}
     */
    SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
    SharedStylesHost.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    SharedStylesHost.ctorParameters = function () { return []; };
    return SharedStylesHost;
}());
var DomSharedStylesHost = (function (_super) {
    __extends$25(DomSharedStylesHost, _super);
    /**
     * @param {?} doc
     */
    function DomSharedStylesHost(doc) {
        _super.call(this);
        this._hostNodes = new Set();
        this._hostNodes.add(doc.head);
    }
    /**
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */
    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
        for (var /** @type {?} */ i = 0; i < styles.length; i++) {
            var /** @type {?} */ styleEl = document.createElement('style');
            styleEl.textContent = styles[i];
            host.appendChild(styleEl);
        }
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.addHost = function (hostNode) {
        this._addStylesToHost(this._styles, hostNode);
        this._hostNodes.add(hostNode);
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
    /**
     * @param {?} additions
     * @return {?}
     */
    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
        var _this = this;
        this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
    };
    DomSharedStylesHost.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DomSharedStylesHost.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    ]; };
    return DomSharedStylesHost;
}(SharedStylesHost));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$24 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var NAMESPACE_URIS = {
    'xlink': 'http://www.w3.org/1999/xlink',
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml'
};
var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
/**
 * @abstract
 */
var DomRootRenderer = (function () {
    /**
     * @param {?} document
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} animationDriver
     * @param {?} appId
     */
    function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
        this.document = document;
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.animationDriver = animationDriver;
        this.appId = appId;
        this.registeredComponents = new Map();
    }
    /**
     * @param {?} componentProto
     * @return {?}
     */
    DomRootRenderer.prototype.renderComponent = function (componentProto) {
        var /** @type {?} */ renderer = this.registeredComponents.get(componentProto.id);
        if (!renderer) {
            renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
            this.registeredComponents.set(componentProto.id, renderer);
        }
        return renderer;
    };
    return DomRootRenderer;
}());
var DomRootRenderer_ = (function (_super) {
    __extends$24(DomRootRenderer_, _super);
    /**
     * @param {?} _document
     * @param {?} _eventManager
     * @param {?} sharedStylesHost
     * @param {?} animationDriver
     * @param {?} appId
     */
    function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
        _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
    }
    DomRootRenderer_.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DomRootRenderer_.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        { type: EventManager, },
        { type: DomSharedStylesHost, },
        { type: AnimationDriver, },
        { type: undefined, decorators: [{ type: Inject, args: [APP_ID,] },] },
    ]; };
    return DomRootRenderer_;
}(DomRootRenderer));
var DIRECT_DOM_RENDERER = {
    /**
     * @param {?} node
     * @return {?}
     */
    remove: function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    },
    /**
     * @param {?} node
     * @param {?} parent
     * @return {?}
     */
    appendChild: function (node, parent) { parent.appendChild(node); },
    /**
     * @param {?} node
     * @param {?} refNode
     * @return {?}
     */
    insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
    /**
     * @param {?} node
     * @return {?}
     */
    nextSibling: function (node) { return node.nextSibling; },
    /**
     * @param {?} node
     * @return {?}
     */
    parentElement: function (node) { return (node.parentNode); }
};
var DomRenderer = (function () {
    /**
     * @param {?} _rootRenderer
     * @param {?} componentProto
     * @param {?} _animationDriver
     * @param {?} styleShimId
     */
    function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
        this._rootRenderer = _rootRenderer;
        this.componentProto = componentProto;
        this._animationDriver = _animationDriver;
        this.directRenderer = DIRECT_DOM_RENDERER;
        this._styles = flattenStyles$1(styleShimId, componentProto.styles, []);
        if (componentProto.encapsulation !== ViewEncapsulation.Native) {
            this._rootRenderer.sharedStylesHost.addStyles(this._styles);
        }
        if (this.componentProto.encapsulation === ViewEncapsulation.Emulated) {
            this._contentAttr = shimContentAttribute(styleShimId);
            this._hostAttr = shimHostAttribute(styleShimId);
        }
        else {
            this._contentAttr = null;
            this._hostAttr = null;
        }
    }
    /**
     * @param {?} selectorOrNode
     * @param {?} debugInfo
     * @return {?}
     */
    DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
        var /** @type {?} */ el;
        if (typeof selectorOrNode === 'string') {
            el = this._rootRenderer.document.querySelector(selectorOrNode);
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
        }
        else {
            el = selectorOrNode;
        }
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
        return el;
    };
    /**
     * @param {?} parent
     * @param {?} name
     * @param {?} debugInfo
     * @return {?}
     */
    DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
        var /** @type {?} */ el;
        if (isNamespaced(name)) {
            var /** @type {?} */ nsAndName = splitNamespace(name);
            el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
        }
        else {
            el = document.createElement(name);
        }
        if (this._contentAttr) {
            el.setAttribute(this._contentAttr, '');
        }
        if (parent) {
            parent.appendChild(el);
        }
        return el;
    };
    /**
     * @param {?} hostElement
     * @return {?}
     */
    DomRenderer.prototype.createViewRoot = function (hostElement) {
        var /** @type {?} */ nodesParent;
        if (this.componentProto.encapsulation === ViewEncapsulation.Native) {
            nodesParent = ((hostElement)).createShadowRoot();
            this._rootRenderer.sharedStylesHost.addHost(nodesParent);
            for (var /** @type {?} */ i = 0; i < this._styles.length; i++) {
                var /** @type {?} */ styleEl = document.createElement('style');
                styleEl.textContent = this._styles[i];
                nodesParent.appendChild(styleEl);
            }
        }
        else {
            if (this._hostAttr) {
                hostElement.setAttribute(this._hostAttr, '');
            }
            nodesParent = hostElement;
        }
        return nodesParent;
    };
    /**
     * @param {?} parentElement
     * @param {?} debugInfo
     * @return {?}
     */
    DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
        var /** @type {?} */ comment = document.createComment(TEMPLATE_COMMENT_TEXT);
        if (parentElement) {
            parentElement.appendChild(comment);
        }
        return comment;
    };
    /**
     * @param {?} parentElement
     * @param {?} value
     * @param {?} debugInfo
     * @return {?}
     */
    DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
        var /** @type {?} */ node = document.createTextNode(value);
        if (parentElement) {
            parentElement.appendChild(node);
        }
        return node;
    };
    /**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
        if (!parentElement)
            return;
        appendNodes(parentElement, nodes);
    };
    /**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
    /**
     * @param {?} viewRootNodes
     * @return {?}
     */
    DomRenderer.prototype.detachView = function (viewRootNodes) {
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            var /** @type {?} */ node = viewRootNodes[i];
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
        }
    };
    /**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
        if (this.componentProto.encapsulation === ViewEncapsulation.Native && hostElement) {
            this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    DomRenderer.prototype.listen = function (renderElement, name, callback) {
        return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
    };
    /**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    DomRenderer.prototype.listenGlobal = function (target, name, callback) {
        return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
        ((renderElement))[propertyName] = propertyValue;
    };
    /**
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */
    DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
        var /** @type {?} */ attrNs;
        var /** @type {?} */ attrNameWithoutNs = attributeName;
        if (isNamespaced(attributeName)) {
            var /** @type {?} */ nsAndName = splitNamespace(attributeName);
            attrNameWithoutNs = nsAndName[1];
            attributeName = nsAndName[0] + ':' + nsAndName[1];
            attrNs = NAMESPACE_URIS[nsAndName[0]];
        }
        if (isPresent$2(attributeValue)) {
            if (attrNs) {
                renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
            }
            else {
                renderElement.setAttribute(attributeName, attributeValue);
            }
        }
        else {
            if (isPresent$2(attrNs)) {
                renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
            }
            else {
                renderElement.removeAttribute(attributeName);
            }
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
        if (renderElement.nodeType === Node.COMMENT_NODE) {
            var /** @type {?} */ existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
            var /** @type {?} */ parsedBindings = JSON.parse(existingBindings[1]);
            parsedBindings[propertyName] = propertyValue;
            renderElement.nodeValue =
                TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
        }
        else {
            this.setElementAttribute(renderElement, propertyName, propertyValue);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
        if (isAdd) {
            renderElement.classList.add(className);
        }
        else {
            renderElement.classList.remove(className);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
        if (isPresent$2(styleValue)) {
            ((renderElement.style))[styleName] = stringify$2(styleValue);
        }
        else {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            ((renderElement.style))[styleName] = '';
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
        ((renderElement))[methodName].apply(renderElement, args);
    };
    /**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    DomRenderer.prototype.animate = function (element, startingStyles, keyframes$$1, duration, delay, easing, previousPlayers) {
        if (previousPlayers === void 0) { previousPlayers = []; }
        if (this._rootRenderer.document.body.contains(element)) {
            return this._animationDriver.animate(element, startingStyles, keyframes$$1, duration, delay, easing, previousPlayers);
        }
        return new NoOpAnimationPlayer$1();
    };
    return DomRenderer;
}());
/**
 * @param {?} sibling
 * @param {?} nodes
 * @return {?}
 */
function moveNodesAfterSibling(sibling, nodes) {
    var /** @type {?} */ parent = sibling.parentNode;
    if (nodes.length > 0 && parent) {
        var /** @type {?} */ nextSibling = sibling.nextSibling;
        if (nextSibling) {
            for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                parent.insertBefore(nodes[i], nextSibling);
            }
        }
        else {
            for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
                parent.appendChild(nodes[i]);
            }
        }
    }
}
/**
 * @param {?} parent
 * @param {?} nodes
 * @return {?}
 */
function appendNodes(parent, nodes) {
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        parent.appendChild(nodes[i]);
    }
}
/**
 * @param {?} eventHandler
 * @return {?}
 */
function decoratePreventDefault(eventHandler) {
    return function (event) {
        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
        if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
        }
    };
}
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */
function flattenStyles$1(compId, styles, target) {
    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
        var /** @type {?} */ style$$1 = styles[i];
        if (Array.isArray(style$$1)) {
            flattenStyles$1(compId, style$$1, target);
        }
        else {
            style$$1 = style$$1.replace(COMPONENT_REGEX, compId);
            target.push(style$$1);
        }
    }
    return target;
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
/**
 * @param {?} name
 * @return {?}
 */
function isNamespaced(name) {
    return name[0] === ':';
}
/**
 * @param {?} name
 * @return {?}
 */
function splitNamespace(name) {
    var /** @type {?} */ match = name.match(NS_PREFIX_RE);
    return [match[1], match[2]];
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CORE_TOKENS = {
    'ApplicationRef': ApplicationRef,
    'NgZone': NgZone,
};
var INSPECT_GLOBAL_NAME = 'ng.probe';
var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
/**
 *  Returns a {@link DebugElement} for the given native DOM element, or
  * null if the given native element does not have an Angular view associated
  * with it.
 * @param {?} element
 * @return {?}
 */
function inspectNativeElement(element) {
    return getDebugNode(element);
}
/**
 *  Deprecated. Use the one from '@angular/core'.
 * @deprecated
 */
var NgProbeToken$1 = (function () {
    /**
     * @param {?} name
     * @param {?} token
     */
    function NgProbeToken$$1(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken$$1;
}());
/**
 * @param {?} rootRenderer
 * @param {?} extraTokens
 * @param {?} coreTokens
 * @return {?}
 */
function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
    return isDevMode() ?
        _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :
        rootRenderer;
}
/**
 * @param {?} rootRenderer
 * @param {?} extraTokens
 * @return {?}
 */
function _createRootRenderer(rootRenderer, extraTokens) {
    getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper$2.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
    return new DebugDomRootRenderer$1(rootRenderer);
}
/**
 * @param {?} tokens
 * @return {?}
 */
function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
}
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */
var ELEMENT_PROBE_PROVIDERS = [{
        provide: RootRenderer,
        useFactory: _createConditionalRootRenderer,
        deps: [
            DomRootRenderer, [NgProbeToken$1, new Optional()],
            [NgProbeToken, new Optional()]
        ]
    }];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$26 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DomEventsPlugin = (function (_super) {
    __extends$26(DomEventsPlugin, _super);
    function DomEventsPlugin() {
        _super.apply(this, arguments);
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        element.addEventListener(eventName, /** @type {?} */ (handler), false);
        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
    };
    DomEventsPlugin.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DomEventsPlugin.ctorParameters = function () { return []; };
    return DomEventsPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$27 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var EVENT_NAMES = {
    // pan
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    // pinch
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    // press
    'press': true,
    'pressup': true,
    // rotate
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    // swipe
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    // tap
    'tap': true,
};
/**
 * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * @experimental
 */
var HAMMER_GESTURE_CONFIG = new OpaqueToken('HammerGestureConfig');
/**
 * @experimental
 */
var HammerGestureConfig = (function () {
    function HammerGestureConfig() {
        this.events = [];
        this.overrides = {};
    }
    /**
     * @param {?} element
     * @return {?}
     */
    HammerGestureConfig.prototype.buildHammer = function (element) {
        var /** @type {?} */ mc = new Hammer(element);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (var eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    };
    HammerGestureConfig.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    HammerGestureConfig.ctorParameters = function () { return []; };
    return HammerGestureConfig;
}());
var HammerGesturesPlugin = (function (_super) {
    __extends$27(HammerGesturesPlugin, _super);
    /**
     * @param {?} _config
     */
    function HammerGesturesPlugin(_config) {
        _super.call(this);
        this._config = _config;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.supports = function (eventName) {
        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
        }
        if (!((window)).Hammer) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
        }
        return true;
    };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var _this = this;
        var /** @type {?} */ zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        return zone.runOutsideAngular(function () {
            // Creating the manager bind events, must be done outside of angular
            var /** @type {?} */ mc = _this._config.buildHammer(element);
            var /** @type {?} */ callback = function (eventObj) {
                zone.runGuarded(function () { handler(eventObj); });
            };
            mc.on(eventName, callback);
            return function () { return mc.off(eventName, callback); };
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
    HammerGesturesPlugin.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    HammerGesturesPlugin.ctorParameters = function () { return [
        { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
    ]; };
    return HammerGesturesPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$28 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var MODIFIER_KEY_GETTERS = {
    'alt': function (event) { return event.altKey; },
    'control': function (event) { return event.ctrlKey; },
    'meta': function (event) { return event.metaKey; },
    'shift': function (event) { return event.shiftKey; }
};
/**
 * @experimental
 */
var KeyEventsPlugin = (function (_super) {
    __extends$28(KeyEventsPlugin, _super);
    function KeyEventsPlugin() {
        _super.call(this);
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
        return this.manager.getZone().runOutsideAngular(function () {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.parseEventName = function (eventName) {
        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
        var /** @type {?} */ domEventName = parts.shift();
        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
        }
        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
        var /** @type {?} */ fullKey = '';
        MODIFIER_KEYS.forEach(function (modifierName) {
            var /** @type {?} */ index = parts.indexOf(modifierName);
            if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
            }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            // returning null instead of throwing to let another plugin process the event
            return null;
        }
        var /** @type {?} */ result = {};
        result['domEventName'] = domEventName;
        result['fullKey'] = fullKey;
        return result;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    KeyEventsPlugin.getEventFullKey = function (event) {
        var /** @type {?} */ fullKey = '';
        var /** @type {?} */ key = getDOM().getEventKey(event);
        key = key.toLowerCase();
        if (key === ' ') {
            key = 'space'; // for readability
        }
        else if (key === '.') {
            key = 'dot'; // because '.' is used as a separator in event names
        }
        MODIFIER_KEYS.forEach(function (modifierName) {
            if (modifierName != key) {
                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        });
        fullKey += key;
        return fullKey;
    };
    /**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */
    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
        return function (event /** TODO #9100 */) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () { return handler(event); });
            }
        };
    };
    /**
     * @param {?} keyName
     * @return {?}
     */
    KeyEventsPlugin._normalizeKey = function (keyName) {
        // TODO: switch to a Map if the mapping grows too much
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    };
    KeyEventsPlugin.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    KeyEventsPlugin.ctorParameters = function () { return []; };
    return KeyEventsPlugin;
}(EventManagerPlugin));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/** A pattern that matches safe data URLs. Only matches image, video and audio types. */
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
/**
 * @param {?} url
 * @return {?}
 */
function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
        return url;
    if (isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
}
/**
 * @param {?} srcset
 * @return {?}
 */
function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
var inertElement = null;
/** Lazily initialized to make sure the DOM adapter gets set before use. */
var DOM = null;
/**
 *  Returns an HTML element that is guaranteed to not execute code when creating elements in it.
 * @return {?}
 */
function getInertElement() {
    if (inertElement)
        return inertElement;
    DOM = getDOM();
    // Prefer using <template> element if supported.
    var /** @type {?} */ templateEl = DOM.createElement('template');
    if ('content' in templateEl)
        return templateEl;
    var /** @type {?} */ doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
        // usually there should be only one body element in the document, but IE doesn't have any, so we
        // need to create one.
        var /** @type {?} */ html = DOM.createElement('html', doc);
        inertElement = DOM.createElement('body', doc);
        DOM.appendChild(html, inertElement);
        DOM.appendChild(doc, html);
    }
    return inertElement;
}
/**
 * @param {?} tags
 * @return {?}
 */
function tagSet(tags) {
    var /** @type {?} */ res = {};
    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
        var t = _a[_i];
        res[t] = true;
    }
    return res;
}
/**
 * @param {...?} sets
 * @return {?}
 */
function merge() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sets[_i - 0] = arguments[_i];
    }
    var /** @type {?} */ res = {};
    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
        var s = sets_1[_a];
        for (var v in s) {
            if (s.hasOwnProperty(v))
                res[v] = true;
        }
    }
    return res;
}
// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
// Safe Block Elements - HTML5
var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
// Inline Elements - HTML5
var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
// Attributes that have href and hence need to be sanitized
var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
// Attributes that have special href set hence need to be sanitized
var SRCSET_ATTRS = tagSet('srcset');
var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
    'valign,value,vspace,width');
// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
/**
 *  SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
  * attributes.
 */
var SanitizingHtmlSerializer = (function () {
    function SanitizingHtmlSerializer() {
        this.sanitizedSomething = false;
        this.buf = [];
    }
    /**
     * @param {?} el
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
        // However this code never accesses properties off of `document` before deleting its contents
        // again, so it shouldn't be vulnerable to DOM clobbering.
        var /** @type {?} */ current = el.firstChild;
        while (current) {
            if (DOM.isElementNode(current)) {
                this.startElement(/** @type {?} */ (current));
            }
            else if (DOM.isTextNode(current)) {
                this.chars(DOM.nodeValue(current));
            }
            else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
            }
            if (DOM.firstChild(current)) {
                current = DOM.firstChild(current);
                continue;
            }
            while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (DOM.isElementNode(current)) {
                    this.endElement(/** @type {?} */ (current));
                }
                if (DOM.nextSibling(current)) {
                    current = DOM.nextSibling(current);
                    break;
                }
                current = DOM.parentElement(current);
            }
        }
        return this.buf.join('');
    };
    /**
     * @param {?} element
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.startElement = function (element) {
        var _this = this;
        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
        }
        this.buf.push('<');
        this.buf.push(tagName);
        DOM.attributeMap(element).forEach(function (value, attrName) {
            var /** @type {?} */ lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
                _this.sanitizedSomething = true;
                return;
            }
            // TODO(martinprobst): Special case image URIs for data:image/...
            if (URI_ATTRS[lower])
                value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
                value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
        });
        this.buf.push('>');
    };
    /**
     * @param {?} current
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.endElement = function (current) {
        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
        }
    };
    /**
     * @param {?} chars
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
    return SanitizingHtmlSerializer;
}());
// Regular Expressions for parsing tags and attributes
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
// ! to ~ is the ASCII range.
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 *  Escapes all potentially dangerous characters, so that the
  * resulting string can be safely inserted into attribute or
  * element text.
 * @param {?} value
 * @return {?}
 */
function encodeEntities(value) {
    return value.replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, function (match) {
        var /** @type {?} */ hi = match.charCodeAt(0);
        var /** @type {?} */ low = match.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    })
        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
/**
 *  When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
  * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
  * *
  * This is undesirable since we don't want to allow any of these custom attributes. This method
  * strips them all.
 * @param {?} el
 * @return {?}
 */
function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function (_, attrName) {
        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
            DOM.removeAttribute(el, attrName);
        }
    });
    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
        var n = _a[_i];
        if (DOM.isElementNode(n))
            stripCustomNsAttrs(/** @type {?} */ (n));
    }
}
/**
 *  Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
  * the DOM in a browser environment.
 * @param {?} unsafeHtmlInput
 * @return {?}
 */
function sanitizeHtml(unsafeHtmlInput) {
    try {
        var /** @type {?} */ containerEl = getInertElement();
        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
        var /** @type {?} */ mXSSAttempts = 5;
        var /** @type {?} */ parsedHtml = unsafeHtml;
        do {
            if (mXSSAttempts === 0) {
                throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            DOM.setInnerHTML(containerEl, unsafeHtml);
            if (((DOM.defaultDoc())).documentMode) {
                // strip custom-namespaced attributes on IE<=11
                stripCustomNsAttrs(containerEl);
            }
            parsedHtml = DOM.getInnerHTML(containerEl);
        } while (unsafeHtml !== parsedHtml);
        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
        // Clear out the body element.
        var /** @type {?} */ parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
        for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
            var child = _a[_i];
            DOM.removeChild(parent_1, child);
        }
        if (isDevMode() && sanitizer.sanitizedSomething) {
            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
        }
        return safeHtml;
    }
    catch (e) {
        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
        inertElement = null;
        throw e;
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 */
var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
var COLOR_FNS = '(?:rgb|hsl)a?';
var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 */
var URL_RE = /^url\(([^)]+)\)$/;
/**
 *  Checks that quotes (" and ') are properly balanced inside a string. Assumes
  * that neither escape (\) nor any other character that could result in
  * breaking out of a string parsing context are allowed;
  * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
  * *
  * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */
function hasBalancedQuotes(value) {
    var /** @type {?} */ outsideSingle = true;
    var /** @type {?} */ outsideDouble = true;
    for (var /** @type {?} */ i = 0; i < value.length; i++) {
        var /** @type {?} */ c = value.charAt(i);
        if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
}
/**
 *  Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
  * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */
function sanitizeStyle(value) {
    value = String(value).trim(); // Make sure it's actually a string.
    if (!value)
        return '';
    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
    // reasoning behind this.
    var /** @type {?} */ urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
        return value; // Safe style values.
    }
    if (isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$29 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
  * values to be safe to use in the different DOM contexts.
  * *
  * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
  * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
  * the website.
  * *
  * In specific situations, it might be necessary to disable sanitization, for example if the
  * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
  * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
  * methods, and then binding to that value from the template.
  * *
  * These situations should be very rare, and extraordinary care must be taken to avoid creating a
  * Cross Site Scripting (XSS) security bug!
  * *
  * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
  * close as possible to the source of the value, to make it easy to verify no security bug is
  * created by its use.
  * *
  * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
  * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
  * code. The sanitizer leaves safe values intact.
  * *
  * sanitization for the value passed in. Carefully check and audit all values and code paths going
  * into this call. Make sure any user data is appropriately escaped for this security context.
  * For more detail, see the [Security Guide](http://g.co/ng/security).
  * *
 * @abstract
 */
var DomSanitizer = (function () {
    function DomSanitizer() {
    }
    /**
     *  Sanitizes a value for use in the given SecurityContext.
      * *
      * If value is trusted for the context, this method will unwrap the contained safe value and use
      * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
      * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
      * is responsible to make sure that the value can definitely be safely used in the given context.
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.sanitize = function (context, value) { };
    /**
     *  Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
      * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
      * leave safe HTML intact, so in most situations this method should not be used.
      * *
      * **WARNING:** calling this method with untrusted user data exposes your application to XSS
      * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
    /**
     *  Bypass security and trust the given value to be safe style value (CSS).
      * *
      * **WARNING:** calling this method with untrusted user data exposes your application to XSS
      * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
    /**
     *  Bypass security and trust the given value to be safe JavaScript.
      * *
      * **WARNING:** calling this method with untrusted user data exposes your application to XSS
      * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
    /**
     *  Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
      * in hyperlinks or `<img src>`.
      * *
      * **WARNING:** calling this method with untrusted user data exposes your application to XSS
      * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
    /**
     *  Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
      * be used to load executable code from, like `<script src>`, or `<iframe src>`.
      * *
      * **WARNING:** calling this method with untrusted user data exposes your application to XSS
      * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
    return DomSanitizer;
}());
var DomSanitizerImpl = (function (_super) {
    __extends$29(DomSanitizerImpl, _super);
    function DomSanitizerImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
        if (value == null)
            return null;
        switch (ctx) {
            case SecurityContext.NONE:
                return value;
            case SecurityContext.HTML:
                if (value instanceof SafeHtmlImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'HTML');
                return sanitizeHtml(String(value));
            case SecurityContext.STYLE:
                if (value instanceof SafeStyleImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Style');
                return sanitizeStyle(value);
            case SecurityContext.SCRIPT:
                if (value instanceof SafeScriptImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Script');
                throw new Error('unsafe value used in a script context');
            case SecurityContext.URL:
                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                    // Allow resource URLs in URL contexts, they are strictly more trusted.
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'URL');
                return sanitizeUrl(String(value));
            case SecurityContext.RESOURCE_URL:
                if (value instanceof SafeResourceUrlImpl) {
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'ResourceURL');
                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */
    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
        if (value instanceof SafeValueImpl) {
            throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
                "(see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
        return new SafeResourceUrlImpl(value);
    };
    DomSanitizerImpl.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DomSanitizerImpl.ctorParameters = function () { return []; };
    return DomSanitizerImpl;
}(DomSanitizer));
/**
 * @abstract
 */
var SafeValueImpl = (function () {
    /**
     * @param {?} changingThisBreaksApplicationSecurity
     */
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        // empty
    }
    /**
     * @abstract
     * @return {?}
     */
    SafeValueImpl.prototype.getTypeName = function () { };
    /**
     * @return {?}
     */
    SafeValueImpl.prototype.toString = function () {
        return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
            " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
}());
var SafeHtmlImpl = (function (_super) {
    __extends$29(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @return {?}
     */
    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
    return SafeHtmlImpl;
}(SafeValueImpl));
var SafeStyleImpl = (function (_super) {
    __extends$29(SafeStyleImpl, _super);
    function SafeStyleImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @return {?}
     */
    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
    return SafeStyleImpl;
}(SafeValueImpl));
var SafeScriptImpl = (function (_super) {
    __extends$29(SafeScriptImpl, _super);
    function SafeScriptImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @return {?}
     */
    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
    return SafeScriptImpl;
}(SafeValueImpl));
var SafeUrlImpl = (function (_super) {
    __extends$29(SafeUrlImpl, _super);
    function SafeUrlImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @return {?}
     */
    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
    return SafeUrlImpl;
}(SafeValueImpl));
var SafeResourceUrlImpl = (function (_super) {
    __extends$29(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
        _super.apply(this, arguments);
    }
    /**
     * @return {?}
     */
    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
    return SafeResourceUrlImpl;
}(SafeValueImpl));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
    { provide: PlatformLocation, useClass: BrowserPlatformLocation }
];
/**
 * @security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * @experimental
 */
var BROWSER_SANITIZATION_PROVIDERS = [
    { provide: Sanitizer, useExisting: DomSanitizer },
    { provide: DomSanitizer, useClass: DomSanitizerImpl },
];
/**
 * @stable
 */
var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
/**
 * @return {?}
 */
function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
}
/**
 * @return {?}
 */
function errorHandler() {
    return new ErrorHandler();
}
/**
 * @return {?}
 */
function _document() {
    return getDOM().defaultDoc();
}
/**
 * @return {?}
 */
function _resolveDefaultAnimationDriver() {
    if (getDOM().supportsWebAnimation()) {
        return new WebAnimationsDriver();
    }
    return AnimationDriver.NOOP;
}
/**
 *  The ng module for the browser.
  * *
 */
var BrowserModule = (function () {
    /**
     * @param {?} parentModule
     */
    function BrowserModule(parentModule) {
        if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
        }
    }
    BrowserModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        BROWSER_SANITIZATION_PROVIDERS, { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
                        { provide: DOCUMENT, useFactory: _document, deps: [] },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                        { provide: DomRootRenderer, useClass: DomRootRenderer_ },
                        { provide: RootRenderer, useExisting: DomRootRenderer },
                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                        { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
                        Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
                    ],
                    exports: [CommonModule, ApplicationModule]
                },] },
    ];
    /** @nocollapse */
    BrowserModule.ctorParameters = function () { return [
        { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
    ]; };
    return BrowserModule;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * JS version of browser APIs. This library can only run in the browser.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 *  Entry point for all Angular debug tools. This object corresponds to the `ng`
  * global variable accessible in the dev console.
 */

/**
 *  Entry point for all Angular profiling-related debug tools. This object
  * corresponds to the `ng.profiler` in the dev console.
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Enabled Angular 2 debug tools that are accessible via your browser's
  * developer console.
  * *
  * Usage:
  * *
  * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
  * 1. Type `ng.` (usually the console will show auto-complete suggestion)
  * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
  * then hit Enter.
  * *
 * @param {?} ref
 * @return {?}
 */

/**
 *  Disables Angular 2 tools.
  * *
 * @return {?}
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Predicates for use with {@link DebugElement}'s query functions.
  * *
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __platform_browser_private__ = {
    BrowserPlatformLocation: BrowserPlatformLocation,
    DomAdapter: DomAdapter,
    BrowserDomAdapter: BrowserDomAdapter,
    BrowserGetTestability: BrowserGetTestability,
    getDOM: getDOM,
    setRootDomAdapter: setRootDomAdapter,
    DomRootRenderer_: DomRootRenderer_,
    DomRootRenderer: DomRootRenderer,
    NAMESPACE_URIS: NAMESPACE_URIS,
    shimContentAttribute: shimContentAttribute,
    shimHostAttribute: shimHostAttribute,
    flattenStyles: flattenStyles$1,
    splitNamespace: splitNamespace,
    isNamespaced: isNamespaced,
    DomSharedStylesHost: DomSharedStylesHost,
    SharedStylesHost: SharedStylesHost,
    ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
    DomEventsPlugin: DomEventsPlugin,
    KeyEventsPlugin: KeyEventsPlugin,
    HammerGesturesPlugin: HammerGesturesPlugin,
    initDomAdapter: initDomAdapter,
    INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
    BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
    WebAnimationsDriver: WebAnimationsDriver
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @stable
 */
var VERSION$2 = new Version('2.4.3');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the platform-browser package.
 */

/**
 * @class BehaviorSubject<T>
 */
class BehaviorSubject extends Subject {
    constructor(_value) {
        super();
        this._value = _value;
    }
    get value() {
        return this.getValue();
    }
    _subscribe(subscriber) {
        const subscription = super._subscribe(subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    }
    getValue() {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    }
    next(value) {
        super.next(this._value = value);
    }
}

function isPromise$2(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class PromiseObservable extends Observable {
    constructor(promise, scheduler) {
        super();
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {Promise<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    static create(promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    }
    _subscribe(subscriber) {
        const promise = this.promise;
        const scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then((value) => {
                    this.value = value;
                    this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, (err) => {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, err => {
                    // escape the promise trap, throw unhandled errors
                    root.setTimeout(() => { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });
                }
            }
            else {
                promise.then((value) => {
                    this.value = value;
                    this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));
                    }
                }, (err) => {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));
                    }
                })
                    .then(null, (err) => {
                    // escape the promise trap, throw unhandled errors
                    root.setTimeout(() => { throw err; });
                });
            }
        }
    }
}
function dispatchNext(arg) {
    const { value, subscriber } = arg;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    const { err, subscriber } = arg;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}

let $$iterator;
const Symbol$2 = root.Symbol;
if (typeof Symbol$2 === 'function') {
    if (Symbol$2.iterator) {
        $$iterator = Symbol$2.iterator;
    }
    else if (typeof Symbol$2.for === 'function') {
        $$iterator = Symbol$2.for('iterator');
    }
}
else {
    if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
        // Bug for mozilla version
        $$iterator = '@@iterator';
    }
    else if (root.Map) {
        // es6-shim specific logic
        let keys = Object.getOwnPropertyNames(root.Map.prototype);
        for (let i = 0; i < keys.length; ++i) {
            let key = keys[i];
            if (key !== 'entries' && key !== 'size' && root.Map.prototype[key] === root.Map.prototype['entries']) {
                $$iterator = key;
                break;
            }
        }
    }
    else {
        $$iterator = '@@iterator';
    }
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class IteratorObservable extends Observable {
    constructor(iterator, scheduler) {
        super();
        this.scheduler = scheduler;
        if (iterator == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator);
    }
    static create(iterator, scheduler) {
        return new IteratorObservable(iterator, scheduler);
    }
    static dispatch(state) {
        const { index, hasError, iterator, subscriber } = state;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        let result = iterator.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            return;
        }
        this.schedule(state);
    }
    _subscribe(subscriber) {
        let index = 0;
        const { iterator, scheduler } = this;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index, iterator, subscriber
            });
        }
        else {
            do {
                let result = iterator.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
    }
}
class StringIterator {
    constructor(str, idx = 0, len = str.length) {
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    [$$iterator]() { return (this); }
    next() {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    }
}
class ArrayIterator {
    constructor(arr, idx = 0, len = toLength(arr)) {
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    [$$iterator]() { return this; }
    next() {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    }
}
function getIterator(obj) {
    const i = obj[$$iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[$$iterator]();
}
const maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    let len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root.isFinite(value);
}
function sign(value) {
    let valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class ScalarObservable extends Observable {
    constructor(value, scheduler) {
        super();
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    static create(value, scheduler) {
        return new ScalarObservable(value, scheduler);
    }
    static dispatch(state) {
        const { done, value, subscriber } = state;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    }
    _subscribe(subscriber) {
        const value = this.value;
        const scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value, subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    }
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class EmptyObservable extends Observable {
    constructor(scheduler) {
        super();
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    static create(scheduler) {
        return new EmptyObservable(scheduler);
    }
    static dispatch(arg) {
        const { subscriber } = arg;
        subscriber.complete();
    }
    _subscribe(subscriber) {
        const scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });
        }
        else {
            subscriber.complete();
        }
    }
}

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class ArrayObservable extends Observable {
    constructor(array, scheduler) {
        super();
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    static create(array, scheduler) {
        return new ArrayObservable(array, scheduler);
    }
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` Scheduler, which means the `next`
     * notifications are sent synchronously, although with a different Scheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    static of(...array) {
        let scheduler = array[array.length - 1];
        if (isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        const len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable(scheduler);
        }
    }
    static dispatch(state) {
        const { array, index, count, subscriber } = state;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    }
    _subscribe(subscriber) {
        let index = 0;
        const array = this.array;
        const count = array.length;
        const scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array, index, count, subscriber
            });
        }
        else {
            for (let i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    }
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class ArrayLikeObservable extends Observable {
    constructor(arrayLike, scheduler) {
        super();
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    static create(arrayLike, scheduler) {
        const length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    }
    static dispatch(state) {
        const { arrayLike, index, length, subscriber } = state;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    }
    _subscribe(subscriber) {
        let index = 0;
        const { arrayLike, scheduler } = this;
        const length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike, index, length, subscriber
            });
        }
        else {
            for (let i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    }
}

/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
class Notification {
    constructor(kind, value, exception) {
        this.kind = kind;
        this.value = value;
        this.exception = exception;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    observe(observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.exception);
            case 'C':
                return observer.complete && observer.complete();
        }
    }
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    do(next, error, complete) {
        const kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.exception);
            case 'C':
                return complete && complete();
        }
    }
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    accept(nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    }
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    toObservable() {
        const kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable.of(this.value);
            case 'E':
                return Observable.throw(this.exception);
            case 'C':
                return Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    }
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    static createNext(value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return this.undefinedValueNotification;
    }
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` exception.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    static createError(err) {
        return new Notification('E', undefined, err);
    }
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    static createComplete() {
        return this.completeNotification;
    }
}
Notification.completeNotification = new Notification('C');
Notification.undefinedValueNotification = new Notification('N', undefined);

/**
 * @see {@link Notification}
 *
 * @param scheduler
 * @param delay
 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
 * @method observeOn
 * @owner Observable
 */


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class ObserveOnSubscriber extends Subscriber {
    constructor(destination, scheduler, delay = 0) {
        super(destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    static dispatch(arg) {
        const { notification, destination } = arg;
        notification.observe(destination);
    }
    scheduleMessage(notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    }
    _next(value) {
        this.scheduleMessage(Notification.createNext(value));
    }
    _error(err) {
        this.scheduleMessage(Notification.createError(err));
    }
    _complete() {
        this.scheduleMessage(Notification.createComplete());
    }
}
class ObserveOnMessage {
    constructor(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
}

const isArrayLike = ((x) => x && typeof x.length === 'number');
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
class FromObservable extends Observable {
    constructor(ish, scheduler) {
        super(null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    static create(ish, scheduler) {
        if (ish != null) {
            if (typeof ish[$$observable] === 'function') {
                if (ish instanceof Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray(ish)) {
                return new ArrayObservable(ish, scheduler);
            }
            else if (isPromise$2(ish)) {
                return new PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike(ish)) {
                return new ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    }
    _subscribe(subscriber) {
        const ish = this.ish;
        const scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[$$observable]().subscribe(subscriber);
        }
        else {
            return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    }
}

const from = FromObservable.create;

const of = ArrayObservable.of;

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class InnerSubscriber extends Subscriber {
    constructor(parent, outerValue, outerIndex) {
        super();
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    _next(value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    }
    _error(error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    }
    _complete() {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    }
}

function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    let destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            return result.subscribe(destination);
        }
    }
    if (isArray(result)) {
        for (let i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise$2(result)) {
        result.then((value) => {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, (err) => destination.error(err))
            .then(null, (err) => {
            // Escaping the Promise trap: globally throw unhandled errors
            root.setTimeout(() => { throw err; });
        });
        return destination;
    }
    else if (typeof result[$$iterator] === 'function') {
        const iterator = result[$$iterator]();
        do {
            let item = iterator.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (typeof result[$$observable] === 'function') {
        const obs = result[$$observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new Error('invalid observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        destination.error(new TypeError('unknown type returned'));
    }
    return null;
}

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class OuterSubscriber extends Subscriber {
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    }
    notifyError(error, innerSub) {
        this.destination.error(error);
    }
    notifyComplete(innerSub) {
        this.destination.complete();
    }
}

/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): Observable} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
        resultSelector = null;
    }
    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
class MergeMapOperator {
    constructor(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    call(observer, source) {
        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class MergeMapSubscriber extends OuterSubscriber {
    constructor(destination, project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {
        super(destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    _next(value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    }
    _tryNext(value) {
        let result;
        const index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    }
    _innerSub(ish, value, index) {
        this.add(subscribeToResult(this, ish, value, index));
    }
    _complete() {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    }
    _notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex) {
        let result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
    notifyComplete(innerSub) {
        const buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    }
}

/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): Observable} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} an observable of values merged from the projected
 * Observables as they were subscribed to, one at a time. Optionally, these
 * values may have been projected from a passed `projectResult` argument.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return this.lift(new MergeMapOperator(project, resultSelector, 1));
}

/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 * @param {function} predicate a function for determining if an item meets a specified condition.
 * @param {any} [thisArg] optional object to use for `this` in the callback
 * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return this.lift(new EveryOperator(predicate, thisArg, this));
}
class EveryOperator {
    constructor(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    call(observer, source) {
        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class EverySubscriber extends Subscriber {
    constructor(destination, predicate, thisArg, source) {
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    notifyComplete(everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    }
    _next(value) {
        let result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    }
    _complete() {
        this.notifyComplete(true);
    }
}

/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
class EmptyError extends Error {
    constructor() {
        const err = super('no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
}

/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} an Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
class FirstOperator {
    constructor(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    call(observer, source) {
        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class FirstSubscriber extends Subscriber {
    constructor(destination, predicate, resultSelector, defaultValue, source) {
        super(destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
    }
    _next(value) {
        const index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            this._emit(value, index);
        }
    }
    _tryPredicate(value, index) {
        let result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index);
        }
    }
    _emit(value, index) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index);
            return;
        }
        this._emitFinal(value);
    }
    _tryResultSelector(value, index) {
        let result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    }
    _emitFinal(value) {
        const destination = this.destination;
        destination.next(value);
        destination.complete();
        this.hasCompleted = true;
    }
    _complete() {
        const destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError);
        }
    }
}

/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    if (typeof project !== 'function') {
        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
}
class MapOperator {
    constructor(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    call(subscriber, source) {
        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class MapSubscriber extends Subscriber {
    constructor(destination, project, thisArg) {
        super(destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    _next(value) {
        let result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
}

/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An observable of the accumulated values.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    return this.lift(new ReduceOperator(accumulator, seed));
}
class ReduceOperator {
    constructor(accumulator, seed) {
        this.accumulator = accumulator;
        this.seed = seed;
    }
    call(subscriber, source) {
        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class ReduceSubscriber extends Subscriber {
    constructor(destination, accumulator, seed) {
        super(destination);
        this.accumulator = accumulator;
        this.hasValue = false;
        this.acc = seed;
        this.accumulator = accumulator;
        this.hasSeed = typeof seed !== 'undefined';
    }
    _next(value) {
        if (this.hasValue || (this.hasValue = this.hasSeed)) {
            this._tryReduce(value);
        }
        else {
            this.acc = value;
            this.hasValue = true;
        }
    }
    _tryReduce(value) {
        let result;
        try {
            result = this.accumulator(this.acc, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.acc = result;
    }
    _complete() {
        if (this.hasValue || this.hasSeed) {
            this.destination.next(this.acc);
        }
        this.destination.complete();
    }
}

/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} an observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @owner Observable
 */
function _catch(selector) {
    const operator = new CatchOperator(selector);
    const caught = this.lift(operator);
    return (operator.caught = caught);
}
class CatchOperator {
    constructor(selector) {
        this.selector = selector;
    }
    call(subscriber, source) {
        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class CatchSubscriber extends OuterSubscriber {
    constructor(destination, selector, caught) {
        super(destination);
        this.selector = selector;
        this.caught = caught;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`.
    error(err) {
        if (!this.isStopped) {
            let result;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.unsubscribe();
            this.destination.remove(this);
            subscribeToResult(this, result);
        }
    }
}

/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent = Number.POSITIVE_INFINITY) {
    return this.lift(new MergeAllOperator(concurrent));
}
class MergeAllOperator {
    constructor(concurrent) {
        this.concurrent = concurrent;
    }
    call(observer, source) {
        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class MergeAllSubscriber extends OuterSubscriber {
    constructor(destination, concurrent) {
        super(destination);
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
    }
    _next(observable) {
        if (this.active < this.concurrent) {
            this.active++;
            this.add(subscribeToResult(this, observable));
        }
        else {
            this.buffer.push(observable);
        }
    }
    _complete() {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    }
    notifyComplete(innerSub) {
        const buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    }
}

/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return this.lift(new MergeAllOperator(1));
}

const fromPromise = PromiseObservable.create;

/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - the condition any source emitted item has to satisfy.
 * @return {Observable} an Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last$1(predicate, resultSelector, defaultValue) {
    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
class LastOperator {
    constructor(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    call(observer, source) {
        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class LastSubscriber extends Subscriber {
    constructor(destination, predicate, resultSelector, defaultValue, source) {
        super(destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.hasValue = false;
        this.index = 0;
        if (typeof defaultValue !== 'undefined') {
            this.lastValue = defaultValue;
            this.hasValue = true;
        }
    }
    _next(value) {
        const index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    }
    _tryPredicate(value, index) {
        let result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    }
    _tryResultSelector(value, index) {
        let result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.lastValue = result;
        this.hasValue = true;
    }
    _complete() {
        const destination = this.destination;
        if (this.hasValue) {
            destination.next(this.lastValue);
            destination.complete();
        }
        else {
            destination.error(new EmptyError);
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$30 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * @whatItDoes Name of the primary outlet.
 *
 * @stable
 */
var PRIMARY_OUTLET = 'primary';
var NavigationCancelingError = (function (_super) {
    __extends$30(NavigationCancelingError, _super);
    /**
     * @param {?} message
     */
    function NavigationCancelingError(message) {
        _super.call(this, message);
        this.message = message;
        this.stack = (new Error(message)).stack;
    }
    /**
     * @return {?}
     */
    NavigationCancelingError.prototype.toString = function () { return this.message; };
    return NavigationCancelingError;
}(Error));
/**
 * @param {?} segments
 * @param {?} segmentGroup
 * @param {?} route
 * @return {?}
 */
function defaultUrlMatcher(segments, segmentGroup, route) {
    var /** @type {?} */ path = route.path;
    var /** @type {?} */ parts = path.split('/');
    var /** @type {?} */ posParams = {};
    var /** @type {?} */ consumed = [];
    var /** @type {?} */ currentIndex = 0;
    for (var /** @type {?} */ i = 0; i < parts.length; ++i) {
        if (currentIndex >= segments.length)
            return null;
        var /** @type {?} */ current = segments[currentIndex];
        var /** @type {?} */ p = parts[i];
        var /** @type {?} */ isPosParam = p.startsWith(':');
        if (!isPosParam && p !== current.path)
            return null;
        if (isPosParam) {
            posParams[p.substring(1)] = current;
        }
        consumed.push(current);
        currentIndex++;
    }
    if (route.pathMatch === 'full' &&
        (segmentGroup.hasChildren() || currentIndex < segments.length)) {
        return null;
    }
    else {
        return { consumed: consumed, posParams: posParams };
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
        return false;
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        if (!shallowEqual(a[i], b[i]))
            return false;
    }
    return true;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqual(a, b) {
    var /** @type {?} */ k1 = Object.keys(a);
    var /** @type {?} */ k2 = Object.keys(b);
    if (k1.length != k2.length) {
        return false;
    }
    var /** @type {?} */ key;
    for (var /** @type {?} */ i = 0; i < k1.length; i++) {
        key = k1[i];
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
/**
 * @param {?} a
 * @return {?}
 */
function flatten(a) {
    var /** @type {?} */ target = [];
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        for (var /** @type {?} */ j = 0; j < a[i].length; ++j) {
            target.push(a[i][j]);
        }
    }
    return target;
}
/**
 * @param {?} a
 * @return {?}
 */

/**
 * @param {?} a
 * @return {?}
 */
function last$$1(a) {
    return a.length > 0 ? a[a.length - 1] : null;
}
/**
 * @param {?} bools
 * @return {?}
 */

/**
 * @param {?} m1
 * @param {?} m2
 * @return {?}
 */
function merge$1(m1, m2) {
    var /** @type {?} */ m = {};
    for (var attr in m1) {
        if (m1.hasOwnProperty(attr)) {
            m[attr] = m1[attr];
        }
    }
    for (var attr in m2) {
        if (m2.hasOwnProperty(attr)) {
            m[attr] = m2[attr];
        }
    }
    return m;
}
/**
 * @param {?} map
 * @param {?} callback
 * @return {?}
 */
function forEach(map$$1, callback) {
    for (var prop in map$$1) {
        if (map$$1.hasOwnProperty(prop)) {
            callback(map$$1[prop], prop);
        }
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function waitForMap(obj, fn) {
    var /** @type {?} */ waitFor = [];
    var /** @type {?} */ res = {};
    forEach(obj, function (a, k) {
        if (k === PRIMARY_OUTLET) {
            waitFor.push(map.call(fn(k, a), function (_) {
                res[k] = _;
                return _;
            }));
        }
    });
    forEach(obj, function (a, k) {
        if (k !== PRIMARY_OUTLET) {
            waitFor.push(map.call(fn(k, a), function (_) {
                res[k] = _;
                return _;
            }));
        }
    });
    if (waitFor.length > 0) {
        var /** @type {?} */ concatted$ = concatAll.call(of.apply(void 0, waitFor));
        var /** @type {?} */ last$ = last$1.call(concatted$);
        return map.call(last$, function () { return res; });
    }
    return of(res);
}
/**
 * @param {?} observables
 * @return {?}
 */
function andObservables(observables) {
    var /** @type {?} */ merged$ = mergeAll.call(observables);
    return every.call(merged$, function (result) { return result === true; });
}
/**
 * @param {?} value
 * @return {?}
 */
function wrapIntoObservable(value) {
    if (value instanceof Observable) {
        return value;
    }
    if (value instanceof Promise) {
        return fromPromise(value);
    }
    return of(value);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @experimental
 */
var ROUTES = new OpaqueToken('ROUTES');
var LoadedRouterConfig = (function () {
    /**
     * @param {?} routes
     * @param {?} injector
     * @param {?} factoryResolver
     * @param {?} injectorFactory
     */
    function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {
        this.routes = routes;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
        this.injectorFactory = injectorFactory;
    }
    return LoadedRouterConfig;
}());
var RouterConfigLoader = (function () {
    /**
     * @param {?} loader
     * @param {?} compiler
     */
    function RouterConfigLoader(loader, compiler) {
        this.loader = loader;
        this.compiler = compiler;
    }
    /**
     * @param {?} parentInjector
     * @param {?} loadChildren
     * @return {?}
     */
    RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {
        return map.call(this.loadModuleFactory(loadChildren), function (r) {
            var /** @type {?} */ ref = r.create(parentInjector);
            var /** @type {?} */ injectorFactory = function (parent) { return r.create(parent).injector; };
            return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);
        });
    };
    /**
     * @param {?} loadChildren
     * @return {?}
     */
    RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
        var _this = this;
        if (typeof loadChildren === 'string') {
            return fromPromise(this.loader.load(loadChildren));
        }
        else {
            var /** @type {?} */ offlineMode_1 = this.compiler instanceof Compiler;
            return mergeMap.call(wrapIntoObservable(loadChildren()), function (t) { return offlineMode_1 ? of(/** @type {?} */ (t)) : fromPromise(_this.compiler.compileModuleAsync(t)); });
        }
    };
    return RouterConfigLoader;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} exact
 * @return {?}
 */
function containsTree(container, containee, exact) {
    if (exact) {
        return equalQueryParams(container.queryParams, containee.queryParams) &&
            equalSegmentGroups(container.root, containee.root);
    }
    return containsQueryParams(container.queryParams, containee.queryParams) &&
        containsSegmentGroup(container.root, containee.root);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalQueryParams(container, containee) {
    return shallowEqual(container, containee);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
        return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
        return false;
    for (var c in containee.children) {
        if (!container.children[c])
            return false;
        if (!equalSegmentGroups(container.children[c], containee.children[c]))
            return false;
    }
    return true;
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsQueryParams(container, containee) {
    return Object.keys(containee).length <= Object.keys(container).length &&
        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} containeePaths
 * @return {?}
 */
function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
        var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);
        if (!equalPath(current, containeePaths))
            return false;
        if (containee.hasChildren())
            return false;
        return true;
    }
    else if (container.segments.length === containeePaths.length) {
        if (!equalPath(container.segments, containeePaths))
            return false;
        for (var c in containee.children) {
            if (!container.children[c])
                return false;
            if (!containsSegmentGroup(container.children[c], containee.children[c]))
                return false;
        }
        return true;
    }
    else {
        var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);
        var /** @type {?} */ next = containeePaths.slice(container.segments.length);
        if (!equalPath(container.segments, current))
            return false;
        if (!container.children[PRIMARY_OUTLET])
            return false;
        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
}
/**
 *  *
  * *
  * ```
  * class MyComponent {
  * constructor(router: Router) {
  * const tree: UrlTree =
  * router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
  * const f = tree.fragment; // return 'fragment'
  * const q = tree.queryParams; // returns {debug: 'true'}
  * const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
  * const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
  * g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
  * g.children['support'].segments; // return 1 segment 'help'
  * }
  * }
  * ```
  * *
  * *
  * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
  * serialized tree.
  * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
  * *
 */
var UrlTree = (function () {
    /**
     * @param {?} root
     * @param {?} queryParams
     * @param {?} fragment
     */
    function UrlTree(root, queryParams, fragment) {
        this.root = root;
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
    /**
     * @return {?}
     */
    UrlTree.prototype.toString = function () { return new DefaultUrlSerializer().serialize(this); };
    return UrlTree;
}());
/**
 *  *
  * See {@link UrlTree} for more information.
  * *
 */
var UrlSegmentGroup = (function () {
    /**
     * @param {?} segments
     * @param {?} children
     */
    function UrlSegmentGroup(segments, children) {
        var _this = this;
        this.segments = segments;
        this.children = children;
        /** The parent node in the url tree */
        this.parent = null;
        forEach(children, function (v, k) { return v.parent = _this; });
    }
    /**
     *  Wether the segment has child segments
     * @return {?}
     */
    UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };
    Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
        /**
         *  Number of child segments
         * @return {?}
         */
        get: function () { return Object.keys(this.children).length; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };
    return UrlSegmentGroup;
}());
/**
 *  *
  * *
  * ```
  * class MyComponent {
  * constructor(router: Router) {
  * const tree: UrlTree = router.parseUrl('/team;id=33');
  * const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
  * const s: UrlSegment[] = g.segments;
  * s[0].path; // returns 'team'
  * s[0].parameters; // returns {id: 33}
  * }
  * }
  * ```
  * *
  * *
  * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
  * parameters associated with the segment.
  * *
 */
var UrlSegment = (function () {
    /**
     * @param {?} path
     * @param {?} parameters
     */
    function UrlSegment(path, parameters) {
        this.path = path;
        this.parameters = parameters;
    }
    /**
     * @return {?}
     */
    UrlSegment.prototype.toString = function () { return serializePath(this); };
    return UrlSegment;
}());
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalSegments(a, b) {
    if (a.length !== b.length)
        return false;
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        if (a[i].path !== b[i].path)
            return false;
        if (!shallowEqual(a[i].parameters, b[i].parameters))
            return false;
    }
    return true;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalPath(a, b) {
    if (a.length !== b.length)
        return false;
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        if (a[i].path !== b[i].path)
            return false;
    }
    return true;
}
/**
 * @param {?} segment
 * @param {?} fn
 * @return {?}
 */
function mapChildrenIntoArray(segment, fn) {
    var /** @type {?} */ res = [];
    forEach(segment.children, function (child, childOutlet) {
        if (childOutlet === PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    });
    forEach(segment.children, function (child, childOutlet) {
        if (childOutlet !== PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    });
    return res;
}
/**
 *  *
  * make all URLs case insensitive by providing a custom UrlSerializer.
  * *
  * See {@link DefaultUrlSerializer} for an example of a URL serializer.
  * *
 * @abstract
 */
var UrlSerializer = (function () {
    function UrlSerializer() {
    }
    /**
     *  Parse a url into a {@link UrlTree}
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlSerializer.prototype.parse = function (url) { };
    /**
     *  Converts a {@link UrlTree} into a url
     * @abstract
     * @param {?} tree
     * @return {?}
     */
    UrlSerializer.prototype.serialize = function (tree) { };
    return UrlSerializer;
}());
/**
 *  *
  * *
  * Example URLs:
  * *
  * ```
  * /inbox/33(popup:compose)
  * /inbox/33;open=true/messages/44
  * ```
  * *
  * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
  * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
  * specify route specific parameters.
  * *
 */
var DefaultUrlSerializer = (function () {
    function DefaultUrlSerializer() {
    }
    /**
     *  Parses a url into a {@link UrlTree}
     * @param {?} url
     * @return {?}
     */
    DefaultUrlSerializer.prototype.parse = function (url) {
        var /** @type {?} */ p = new UrlParser(url);
        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    };
    /**
     *  Converts a {@link UrlTree} into a url
     * @param {?} tree
     * @return {?}
     */
    DefaultUrlSerializer.prototype.serialize = function (tree) {
        var /** @type {?} */ segment = "/" + serializeSegment(tree.root, true);
        var /** @type {?} */ query = serializeQueryParams(tree.queryParams);
        var /** @type {?} */ fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
        return "" + segment + query + fragment;
    };
    return DefaultUrlSerializer;
}());
/**
 * @param {?} segment
 * @return {?}
 */
function serializePaths(segment) {
    return segment.segments.map(function (p) { return serializePath(p); }).join('/');
}
/**
 * @param {?} segment
 * @param {?} root
 * @return {?}
 */
function serializeSegment(segment, root) {
    if (segment.hasChildren() && root) {
        var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?
            serializeSegment(segment.children[PRIMARY_OUTLET], false) :
            '';
        var /** @type {?} */ children_1 = [];
        forEach(segment.children, function (v, k) {
            if (k !== PRIMARY_OUTLET) {
                children_1.push(k + ":" + serializeSegment(v, false));
            }
        });
        if (children_1.length > 0) {
            return primary + "(" + children_1.join('//') + ")";
        }
        else {
            return "" + primary;
        }
    }
    else if (segment.hasChildren() && !root) {
        var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {
            if (k === PRIMARY_OUTLET) {
                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
            }
            else {
                return [(k + ":" + serializeSegment(v, false))];
            }
        });
        return serializePaths(segment) + "/(" + children.join('//') + ")";
    }
    else {
        return serializePaths(segment);
    }
}
/**
 * @param {?} s
 * @return {?}
 */
function encode(s) {
    return encodeURIComponent(s);
}
/**
 * @param {?} s
 * @return {?}
 */
function decode(s) {
    return decodeURIComponent(s);
}
/**
 * @param {?} path
 * @return {?}
 */
function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeParams(params) {
    return pairs(params).map(function (p) { return (";" + encode(p.first) + "=" + encode(p.second)); }).join('');
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeQueryParams(params) {
    var /** @type {?} */ strParams = Object.keys(params).map(function (name) {
        var /** @type {?} */ value = params[name];
        return Array.isArray(value) ? value.map(function (v) { return (encode(name) + "=" + encode(v)); }).join('&') :
            encode(name) + "=" + encode(value);
    });
    return strParams.length ? "?" + strParams.join("&") : '';
}
var Pair = (function () {
    /**
     * @param {?} first
     * @param {?} second
     */
    function Pair(first$$1, second) {
        this.first = first$$1;
        this.second = second;
    }
    return Pair;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function pairs(obj) {
    var /** @type {?} */ res = [];
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            res.push(new Pair(prop, obj[prop]));
        }
    }
    return res;
}
var SEGMENT_RE = /^[^\/()?;=&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchSegments(str) {
    SEGMENT_RE.lastIndex = 0;
    var /** @type {?} */ match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchQueryParams(str) {
    QUERY_PARAM_RE.lastIndex = 0;
    var /** @type {?} */ match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
}
var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchUrlQueryParamValue(str) {
    QUERY_PARAM_VALUE_RE.lastIndex = 0;
    var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
}
var UrlParser = (function () {
    /**
     * @param {?} url
     */
    function UrlParser(url) {
        this.url = url;
        this.remaining = url;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
    /**
     * @param {?} str
     * @return {?}
     */
    UrlParser.prototype.capture = function (str) {
        if (!this.remaining.startsWith(str)) {
            throw new Error("Expected \"" + str + "\".");
        }
        this.remaining = this.remaining.substring(str.length);
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseRootSegment = function () {
        if (this.remaining.startsWith('/')) {
            this.capture('/');
        }
        if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
            return new UrlSegmentGroup([], {});
        }
        return new UrlSegmentGroup([], this.parseChildren());
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseChildren = function () {
        if (this.remaining.length == 0) {
            return {};
        }
        if (this.peekStartsWith('/')) {
            this.capture('/');
        }
        var /** @type {?} */ paths = [];
        if (!this.peekStartsWith('(')) {
            paths.push(this.parseSegments());
        }
        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
            this.capture('/');
            paths.push(this.parseSegments());
        }
        var /** @type {?} */ children = {};
        if (this.peekStartsWith('/(')) {
            this.capture('/');
            children = this.parseParens(true);
        }
        var /** @type {?} */ res = {};
        if (this.peekStartsWith('(')) {
            res = this.parseParens(false);
        }
        if (paths.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
        }
        return res;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseSegments = function () {
        var /** @type {?} */ path = matchSegments(this.remaining);
        if (path === '' && this.peekStartsWith(';')) {
            throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
        }
        this.capture(path);
        var /** @type {?} */ matrixParams = {};
        if (this.peekStartsWith(';')) {
            matrixParams = this.parseMatrixParams();
        }
        return new UrlSegment(decode(path), matrixParams);
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseQueryParams = function () {
        var /** @type {?} */ params = {};
        if (this.peekStartsWith('?')) {
            this.capture('?');
            this.parseQueryParam(params);
            while (this.remaining.length > 0 && this.peekStartsWith('&')) {
                this.capture('&');
                this.parseQueryParam(params);
            }
        }
        return params;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseFragment = function () {
        if (this.peekStartsWith('#')) {
            return decodeURI(this.remaining.substring(1));
        }
        return null;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseMatrixParams = function () {
        var /** @type {?} */ params = {};
        while (this.remaining.length > 0 && this.peekStartsWith(';')) {
            this.capture(';');
            this.parseParam(params);
        }
        return params;
    };
    /**
     * @param {?} params
     * @return {?}
     */
    UrlParser.prototype.parseParam = function (params) {
        var /** @type {?} */ key = matchSegments(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        var /** @type {?} */ value = '';
        if (this.peekStartsWith('=')) {
            this.capture('=');
            var /** @type {?} */ valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        params[decode(key)] = decode(value);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    UrlParser.prototype.parseQueryParam = function (params) {
        var /** @type {?} */ key = matchQueryParams(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        var /** @type {?} */ value = '';
        if (this.peekStartsWith('=')) {
            this.capture('=');
            var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        var /** @type {?} */ decodedKey = decode(key);
        var /** @type {?} */ decodedVal = decode(value);
        if (params.hasOwnProperty(decodedKey)) {
            // Append to existing values
            var /** @type {?} */ currentVal = params[decodedKey];
            if (!Array.isArray(currentVal)) {
                currentVal = [currentVal];
                params[decodedKey] = currentVal;
            }
            currentVal.push(decodedVal);
        }
        else {
            // Create a new value
            params[decodedKey] = decodedVal;
        }
    };
    /**
     * @param {?} allowPrimary
     * @return {?}
     */
    UrlParser.prototype.parseParens = function (allowPrimary) {
        var /** @type {?} */ segments = {};
        this.capture('(');
        while (!this.peekStartsWith(')') && this.remaining.length > 0) {
            var /** @type {?} */ path = matchSegments(this.remaining);
            var /** @type {?} */ next = this.remaining[path.length];
            // if is is not one of these characters, then the segment was unescaped
            // or the group was not closed
            if (next !== '/' && next !== ')' && next !== ';') {
                throw new Error("Cannot parse url '" + this.url + "'");
            }
            var /** @type {?} */ outletName = void 0;
            if (path.indexOf(':') > -1) {
                outletName = path.substr(0, path.indexOf(':'));
                this.capture(outletName);
                this.capture(':');
            }
            else if (allowPrimary) {
                outletName = PRIMARY_OUTLET;
            }
            var /** @type {?} */ children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
                new UrlSegmentGroup([], children);
            if (this.peekStartsWith('//')) {
                this.capture('//');
            }
        }
        this.capture(')');
        return segments;
    };
    return UrlParser;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NoMatch = (function () {
    /**
     * @param {?=} segmentGroup
     */
    function NoMatch(segmentGroup) {
        if (segmentGroup === void 0) { segmentGroup = null; }
        this.segmentGroup = segmentGroup;
    }
    return NoMatch;
}());
var AbsoluteRedirect = (function () {
    /**
     * @param {?} urlTree
     */
    function AbsoluteRedirect(urlTree) {
        this.urlTree = urlTree;
    }
    return AbsoluteRedirect;
}());
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function noMatch(segmentGroup) {
    return new Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });
}
/**
 * @param {?} newTree
 * @return {?}
 */
function absoluteRedirect(newTree) {
    return new Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });
}
/**
 * @param {?} redirectTo
 * @return {?}
 */
function namedOutletsRedirect(redirectTo) {
    return new Observable(function (obs) { return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'")); });
}
/**
 * @param {?} route
 * @return {?}
 */
function canLoadFails(route) {
    return new Observable(function (obs) { return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false")); });
}
/**
 * @param {?} injector
 * @param {?} configLoader
 * @param {?} urlSerializer
 * @param {?} urlTree
 * @param {?} config
 * @return {?}
 */
function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
    return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();
}
var ApplyRedirects = (function () {
    /**
     * @param {?} injector
     * @param {?} configLoader
     * @param {?} urlSerializer
     * @param {?} urlTree
     * @param {?} config
     */
    function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
        this.injector = injector;
        this.configLoader = configLoader;
        this.urlSerializer = urlSerializer;
        this.urlTree = urlTree;
        this.config = config;
        this.allowRedirects = true;
    }
    /**
     * @return {?}
     */
    ApplyRedirects.prototype.apply = function () {
        var _this = this;
        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
        var /** @type {?} */ urlTrees$ = map.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });
        return _catch.call(urlTrees$, function (e) {
            if (e instanceof AbsoluteRedirect) {
                // after an absolute redirect we do not apply any more redirects!
                _this.allowRedirects = false;
                // we need to run matching, so we can fetch all lazy-loaded modules
                return _this.match(e.urlTree);
            }
            else if (e instanceof NoMatch) {
                throw _this.noMatchError(e);
            }
            else {
                throw e;
            }
        });
    };
    /**
     * @param {?} tree
     * @return {?}
     */
    ApplyRedirects.prototype.match = function (tree) {
        var _this = this;
        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);
        var /** @type {?} */ mapped$ = map.call(expanded$, function (rootSegmentGroup) {
            return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);
        });
        return _catch.call(mapped$, function (e) {
            if (e instanceof NoMatch) {
                throw _this.noMatchError(e);
            }
            else {
                throw e;
            }
        });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ApplyRedirects.prototype.noMatchError = function (e) {
        return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
    };
    /**
     * @param {?} rootCandidate
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */
    ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
        var /** @type {?} */ root = rootCandidate.segments.length > 0 ?
            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :
            rootCandidate;
        return new UrlTree(root, queryParams, fragment);
        var _a;
    };
    /**
     * @param {?} injector
     * @param {?} routes
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return map.call(this.expandChildren(injector, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });
        }
        else {
            return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
        }
    };
    /**
     * @param {?} injector
     * @param {?} routes
     * @param {?} segmentGroup
     * @return {?}
     */
    ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {
        var _this = this;
        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(injector, routes, child, childOutlet); });
    };
    /**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} segments
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {
        var _this = this;
        var /** @type {?} */ routes$ = of.apply(void 0, routes);
        var /** @type {?} */ processedRoutes$ = map.call(routes$, function (r) {
            var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
            return _catch.call(expanded$, function (e) {
                if (e instanceof NoMatch)
                    return of(null);
                else
                    throw e;
            });
        });
        var /** @type {?} */ concattedProcessedRoutes$ = concatAll.call(processedRoutes$);
        var /** @type {?} */ first$ = first.call(concattedProcessedRoutes$, function (s) { return !!s; });
        return _catch.call(first$, function (e, _) {
            if (e instanceof EmptyError) {
                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                    return of(new UrlSegmentGroup([], {}));
                }
                else {
                    throw new NoMatch(segmentGroup);
                }
            }
            else {
                throw e;
            }
        });
    };
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    };
    /**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} paths
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
        if (getOutlet$1(route) !== outlet)
            return noMatch(segmentGroup);
        if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))
            return noMatch(segmentGroup);
        if (route.redirectTo === undefined) {
            return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
        }
        else {
            return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
        }
    };
    /**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
        if (route.path === '**') {
            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
        }
        else {
            return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
        }
    };
    /**
     * @param {?} injector
     * @param {?} routes
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {
        var _this = this;
        var /** @type {?} */ newTree = this.applyRedirectCommands([], route.redirectTo, {});
        if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        else {
            return mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});
                return _this.expandSegment(injector, group, routes, newSegments, outlet, false);
            });
        }
    };
    /**
     * @param {?} injector
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
        var _this = this;
        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
        if (!matched)
            return noMatch(segmentGroup);
        var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, /** @type {?} */ (positionalParamSegments));
        if (route.redirectTo.startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        else {
            return mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
            });
        }
    };
    /**
     * @param {?} injector
     * @param {?} rawSegmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {
        var _this = this;
        if (route.path === '**') {
            if (route.loadChildren) {
                return map.call(this.configLoader.load(injector, route.loadChildren), function (r) {
                    ((route))._loadedConfig = r;
                    return new UrlSegmentGroup(segments, {});
                });
            }
            else {
                return of(new UrlSegmentGroup(segments, {}));
            }
        }
        else {
            var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;
            if (!matched)
                return noMatch(rawSegmentGroup);
            var /** @type {?} */ rawSlicedSegments_1 = segments.slice(lastChild);
            var /** @type {?} */ childConfig$ = this.getChildConfig(injector, route);
            return mergeMap.call(childConfig$, function (routerConfig) {
                var /** @type {?} */ childInjector = routerConfig.injector;
                var /** @type {?} */ childConfig = routerConfig.routes;
                var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
                if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                    var /** @type {?} */ expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
                    return map.call(expanded$, function (children) { return new UrlSegmentGroup(consumedSegments_1, children); });
                }
                else if (childConfig.length === 0 && slicedSegments.length === 0) {
                    return of(new UrlSegmentGroup(consumedSegments_1, {}));
                }
                else {
                    var /** @type {?} */ expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
                    return map.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children); });
                }
            });
        }
    };
    /**
     * @param {?} injector
     * @param {?} route
     * @return {?}
     */
    ApplyRedirects.prototype.getChildConfig = function (injector, route) {
        var _this = this;
        if (route.children) {
            return of(new LoadedRouterConfig(route.children, injector, null, null));
        }
        else if (route.loadChildren) {
            return mergeMap.call(runGuards(injector, route), function (shouldLoad) {
                if (shouldLoad) {
                    if (((route))._loadedConfig) {
                        return of(((route))._loadedConfig);
                    }
                    else {
                        return map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {
                            ((route))._loadedConfig = r;
                            return r;
                        });
                    }
                }
                else {
                    return canLoadFails(route);
                }
            });
        }
        else {
            return of(new LoadedRouterConfig([], injector, null, null));
        }
    };
    /**
     * @param {?} route
     * @param {?} urlTree
     * @return {?}
     */
    ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
        var /** @type {?} */ res = [];
        var /** @type {?} */ c = urlTree.root;
        while (true) {
            res = res.concat(c.segments);
            if (c.numberOfChildren === 0) {
                return of(res);
            }
            else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
                return namedOutletsRedirect(route.redirectTo);
            }
            else {
                c = c.children[PRIMARY_OUTLET];
            }
        }
    };
    /**
     * @param {?} segments
     * @param {?} redirectTo
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
        var /** @type {?} */ t = this.urlSerializer.parse(redirectTo);
        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    };
    /**
     * @param {?} redirectTo
     * @param {?} urlTree
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
        var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    };
    /**
     * @param {?} redirectToParams
     * @param {?} actualParams
     * @return {?}
     */
    ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
        var /** @type {?} */ res = {};
        forEach(redirectToParams, function (v, k) {
            if (v.startsWith(':')) {
                res[k] = actualParams[v.substring(1)];
            }
            else {
                res[k] = v;
            }
        });
        return res;
    };
    /**
     * @param {?} redirectTo
     * @param {?} group
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {
        var _this = this;
        var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
        var /** @type {?} */ children = {};
        forEach(group.children, function (child, name) {
            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
        });
        return new UrlSegmentGroup(updatedSegments, children);
    };
    /**
     * @param {?} redirectTo
     * @param {?} redirectToSegments
     * @param {?} actualSegments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
        var _this = this;
        return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :
            _this.findOrReturn(s, actualSegments); });
    };
    /**
     * @param {?} redirectTo
     * @param {?} redirectToUrlSegment
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
        var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];
        if (!pos)
            throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
        return pos;
    };
    /**
     * @param {?} redirectToUrlSegment
     * @param {?} actualSegments
     * @return {?}
     */
    ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
        var /** @type {?} */ idx = 0;
        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
            var s = actualSegments_1[_i];
            if (s.path === redirectToUrlSegment.path) {
                actualSegments.splice(idx);
                return s;
            }
            idx++;
        }
        return redirectToUrlSegment;
    };
    return ApplyRedirects;
}());
/**
 * @param {?} injector
 * @param {?} route
 * @return {?}
 */
function runGuards(injector, route) {
    var /** @type {?} */ canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
        return of(true);
    var /** @type {?} */ obs = map.call(from(canLoad), function (c) {
        var /** @type {?} */ guard = injector.get(c);
        if (guard.canLoad) {
            return wrapIntoObservable(guard.canLoad(route));
        }
        else {
            return wrapIntoObservable(guard(route));
        }
    });
    return andObservables(obs);
}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match(segmentGroup, route, segments) {
    var /** @type {?} */ noMatch = { matched: false, consumedSegments: /** @type {?} */ ([]), lastChild: 0, positionalParamSegments: {} };
    if (route.path === '') {
        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        else {
            return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
    }
    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
    var /** @type {?} */ res = matcher(segments, segmentGroup, route);
    if (!res)
        return noMatch;
    return {
        matched: true,
        consumedSegments: res.consumed,
        lastChild: res.consumed.length,
        positionalParamSegments: res.posParams
    };
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */
function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
    }
    else if (slicedSegments.length === 0 &&
        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
    }
    else {
        return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
    }
}
/**
 * @param {?} s
 * @return {?}
 */
function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
        var /** @type {?} */ c = s.children[PRIMARY_OUTLET];
        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    }
    else {
        return s;
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */
function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var /** @type {?} */ res = {};
    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
        var r = routes_1[_i];
        if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
            res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
        }
    }
    return merge$1(children, res);
}
/**
 * @param {?} routes
 * @param {?} primarySegmentGroup
 * @return {?}
 */
function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var /** @type {?} */ res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
        var r = routes_2[_i];
        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
            res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes
        .filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r) &&
        getOutlet$1(r) !== PRIMARY_OUTLET; })
        .length > 0;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
    return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */
function emptyPathRedirect(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
        return false;
    return r.path === '' && r.redirectTo !== undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet$1(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} config
 * @param {?=} parentPath
 * @return {?}
 */
function validateConfig(config, parentPath) {
    if (parentPath === void 0) { parentPath = ''; }
    // forEach doesn't iterate undefined values
    for (var /** @type {?} */ i = 0; i < config.length; i++) {
        var /** @type {?} */ route = config[i];
        var /** @type {?} */ fullPath = getFullPath(parentPath, route);
        validateNode(route, fullPath);
    }
}
/**
 * @param {?} route
 * @param {?} fullPath
 * @return {?}
 */
function validateNode(route, fullPath) {
    if (!route) {
        throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n       \n      Example: \n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
    }
    if (Array.isArray(route)) {
        throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
    }
    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
        throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
    }
    if (route.redirectTo && route.children) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
    }
    if (route.redirectTo && route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
    }
    if (route.children && route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
    }
    if (route.redirectTo && route.component) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
    }
    if (route.path && route.matcher) {
        throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
    }
    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
    }
    if (route.path === void 0 && route.matcher === void 0) {
        throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
    }
    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
        throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
    }
    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
        var /** @type {?} */ exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
        throw new Error("Invalid configuration of route '{path: \"" + fullPath + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }
    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
        throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
    }
    if (route.children) {
        validateConfig(route.children, fullPath);
    }
}
/**
 * @param {?} parentPath
 * @param {?} currentRoute
 * @return {?}
 */
function getFullPath(parentPath, currentRoute) {
    if (!currentRoute) {
        return parentPath;
    }
    if (!parentPath && !currentRoute.path) {
        return '';
    }
    else if (parentPath && !currentRoute.path) {
        return parentPath + "/";
    }
    else if (!parentPath && currentRoute.path) {
        return currentRoute.path;
    }
    else {
        return parentPath + "/" + currentRoute.path;
    }
}

/**
 * @license undefined
  * Copyright Google Inc. All Rights Reserved.
  * *
  * Use of this source code is governed by an MIT-style license that can be
  * found in the LICENSE file at https://angular.io/license
 */
var Tree = (function () {
    /**
     * @param {?} root
     */
    function Tree(root) {
        this._root = root;
    }
    Object.defineProperty(Tree.prototype, "root", {
        /**
         * @return {?}
         */
        get: function () { return this._root.value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.parent = function (t) {
        var /** @type {?} */ p = this.pathFromRoot(t);
        return p.length > 1 ? p[p.length - 2] : null;
    };
    /**
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.children = function (t) {
        var /** @type {?} */ n = findNode(t, this._root);
        return n ? n.children.map(function (t) { return t.value; }) : [];
    };
    /**
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.firstChild = function (t) {
        var /** @type {?} */ n = findNode(t, this._root);
        return n && n.children.length > 0 ? n.children[0].value : null;
    };
    /**
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.siblings = function (t) {
        var /** @type {?} */ p = findPath(t, this._root, []);
        if (p.length < 2)
            return [];
        var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });
        return c.filter(function (cc) { return cc !== t; });
    };
    /**
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };
    return Tree;
}());
/**
 * @param {?} expected
 * @param {?} c
 * @return {?}
 */
function findNode(expected, c) {
    if (expected === c.value)
        return c;
    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
        var cc = _a[_i];
        var /** @type {?} */ r = findNode(expected, cc);
        if (r)
            return r;
    }
    return null;
}
/**
 * @param {?} expected
 * @param {?} c
 * @param {?} collected
 * @return {?}
 */
function findPath(expected, c, collected) {
    collected.push(c);
    if (expected === c.value)
        return collected;
    for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
        var cc = _a[_i];
        var /** @type {?} */ cloned = collected.slice(0);
        var /** @type {?} */ r = findPath(expected, cc, cloned);
        if (r.length > 0)
            return r;
    }
    return [];
}
var TreeNode = (function () {
    /**
     * @param {?} value
     * @param {?} children
     */
    function TreeNode(value, children) {
        this.value = value;
        this.children = children;
    }
    /**
     * @return {?}
     */
    TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
    return TreeNode;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __extends$31 = (undefined && undefined.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 *  *
  * *
  * ```
  * class MyComponent {
  * constructor(router: Router) {
  * const state: RouterState = router.routerState;
  * const root: ActivatedRoute = state.root;
  * const child = root.firstChild;
  * const id: Observable<string> = child.params.map(p => p.id);
  * //...
  * }
  * }
  * ```
  * *
  * RouterState is a tree of activated routes. Every node in this tree knows about the "consumed" URL
  * segments,
  * the extracted parameters, and the resolved data.
  * *
  * See {@link ActivatedRoute} for more information.
  * *
 */
var RouterState = (function (_super) {
    __extends$31(RouterState, _super);
    /**
     * @param {?} root
     * @param {?} snapshot
     */
    function RouterState(root, snapshot) {
        _super.call(this, root);
        this.snapshot = snapshot;
        setRouterStateSnapshot(this, root);
    }
    /**
     * @return {?}
     */
    RouterState.prototype.toString = function () { return this.snapshot.toString(); };
    return RouterState;
}(Tree));
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyState(urlTree, rootComponent) {
    var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);
    var /** @type {?} */ emptyParams = new BehaviorSubject({});
    var /** @type {?} */ emptyData = new BehaviorSubject({});
    var /** @type {?} */ emptyQueryParams = new BehaviorSubject({});
    var /** @type {?} */ fragment = new BehaviorSubject('');
    var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
}
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyStateSnapshot(urlTree, rootComponent) {
    var /** @type {?} */ emptyParams = {};
    var /** @type {?} */ emptyData = {};
    var /** @type {?} */ emptyQueryParams = {};
    var /** @type {?} */ fragment = '';
    var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
    return new RouterStateSnapshot('', new TreeNode(activated, []));
}
/**
 *  outlet.
  * An `ActivatedRoute` can also be used to traverse the router state tree.
  * *
  * *
  * ```
  * class MyComponent {
  * constructor(route: ActivatedRoute) {
  * const id: Observable<string> = route.params.map(p => p.id);
  * const url: Observable<string> = route.url.map(segments => segments.join(''));
  * // route.data includes both `data` and `resolve`
  * const user = route.data.map(d => d.user);
  * }
  * }
  * ```
  * *
 */
var ActivatedRoute = (function () {
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} futureSnapshot
     */
    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this._futureSnapshot = futureSnapshot;
    }
    Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
        /**
         *  The configuration used to match this route
         * @return {?}
         */
        get: function () { return this._futureSnapshot.routeConfig; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "root", {
        /**
         *  The root of the router state
         * @return {?}
         */
        get: function () { return this._routerState.root; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "parent", {
        /**
         *  The parent of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.parent(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
        /**
         *  The first child of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.firstChild(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "children", {
        /**
         *  The children of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.children(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
        /**
         *  The path from the root of the router state tree to this route
         * @return {?}
         */
        get: function () { return this._routerState.pathFromRoot(this); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivatedRoute.prototype.toString = function () {
        return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    };
    return ActivatedRoute;
}());
/**
 * @param {?} route
 * @return {?}
 */
function inheritedParamsDataResolve(route) {
    var /** @type {?} */ pathToRoot = route.pathFromRoot;
    var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;
    while (inhertingStartingFrom >= 1) {
        var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];
        var /** @type {?} */ parent_1 = pathToRoot[inhertingStartingFrom - 1];
        // current route is an empty path => inherits its parent's params and data
        if (current.routeConfig && current.routeConfig.path === '') {
            inhertingStartingFrom--;
        }
        else if (!parent_1.component) {
            inhertingStartingFrom--;
        }
        else {
            break;
        }
    }
    return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
        var /** @type {?} */ params = merge$1(res.params, curr.params);
        var /** @type {?} */ data = merge$1(res.data, curr.data);
        var /** @type {?} */ resolve = merge$1(res.resolve, curr._resolvedData);
        return { params: params, data: data, resolve: resolve };
    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));
}
/**
 *  outlet
  * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router
  * state tree.
  * *
  * *
  * ```
  * class MyComponent {
  * constructor(route: ActivatedRoute) {
  * const id: string = route.snapshot.params.id;
  * const url: string = route.snapshot.url.join('');
  * const user = route.snapshot.data.user;
  * }
  * }
  * ```
  * *
 */
var ActivatedRouteSnapshot = (function () {
    /**
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} routeConfig
     * @param {?} urlSegment
     * @param {?} lastPathIndex
     * @param {?} resolve
     */
    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this._routeConfig = routeConfig;
        this._urlSegment = urlSegment;
        this._lastPathIndex = lastPathIndex;
        this._resolve = resolve;
    }
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
        /**
         *  The configuration used to match this route
         * @return {?}
         */
        get: function () { return this._routeConfig; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
        /**
         *  The root of the router state
         * @return {?}
         */
        get: function () { return this._routerState.root; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
        /**
         *  The parent of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.parent(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
        /**
         *  The first child of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.firstChild(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
        /**
         *  The children of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.children(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
        /**
         *  The path from the root of the router state tree to this route
         * @return {?}
         */
        get: function () { return this._routerState.pathFromRoot(this); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivatedRouteSnapshot.prototype.toString = function () {
        var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');
        var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';
        return "Route(url:'" + url + "', path:'" + matched + "')";
    };
    return ActivatedRouteSnapshot;
}());
/**
 *  *
  * *
  * ```
  * class MyComponent {
  * constructor(router: Router) {
  * const state: RouterState = router.routerState;
  * const snapshot: RouterStateSnapshot = state.snapshot;
  * const root: ActivatedRouteSnapshot = snapshot.root;
  * const child = root.firstChild;
  * const id: Observable<string> = child.params.map(p => p.id);
  * //...
  * }
  * }
  * ```
  * *
  * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about
  * the "consumed" URL segments, the extracted parameters, and the resolved data.
  * *
 */
var RouterStateSnapshot = (function (_super) {
    __extends$31(RouterStateSnapshot, _super);
    /**
     * @param {?} url
     * @param {?} root
     */
    function RouterStateSnapshot(url, root) {
        _super.call(this, root);
        this.url = url;
        setRouterStateSnapshot(this, root);
    }
    /**
     * @return {?}
     */
    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
    return RouterStateSnapshot;
}(Tree));
/**
 * @param {?} state
 * @param {?} node
 * @return {?}
 */
function setRouterStateSnapshot(state, node) {
    node.value._routerState = state;
    node.children.forEach(function (c) { return setRouterStateSnapshot(state, c); });
}
/**
 * @param {?} node
 * @return {?}
 */
function serializeNode(node) {
    var /** @type {?} */ c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
}
/**
 *  The expectation is that the activate route is created with the right set of parameters.
  * So we push new values into the observables only when they are not the initial values.
  * And we detect that by checking if the snapshot field is set.
 * @param {?} route
 * @return {?}
 */
function advanceActivatedRoute(route) {
    if (route.snapshot) {
        var /** @type {?} */ currentSnapshot = route.snapshot;
        route.snapshot = route._futureSnapshot;
        if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {
            ((route.queryParams)).next(route._futureSnapshot.queryParams);
        }
        if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {
            ((route.fragment)).next(route._futureSnapshot.fragment);
        }
        if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {
            ((route.params)).next(route._futureSnapshot.params);
        }
        if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {
            ((route.url)).next(route._futureSnapshot.url);
        }
        if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {
            ((route.data)).next(route._futureSnapshot.data);
        }
    }
    else {
        route.snapshot = route._futureSnapshot;
        // this is for resolved data
        ((route.data)).next(route._futureSnapshot.data);
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalParamsAndUrlSegments(a, b) {
    return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createRouterState(routeReuseStrategy, curr, prevState) {
    var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?=} prevState
 * @return {?}
 */
function createNode(routeReuseStrategy, curr, prevState) {
    // reuse an activated route that is currently displayed on the screen
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
        var /** @type {?} */ value = prevState.value;
        value._futureSnapshot = curr.value;
        var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
        return new TreeNode(value, children);
    }
    else if (routeReuseStrategy.retrieve(curr.value)) {
        var /** @type {?} */ tree = ((routeReuseStrategy.retrieve(curr.value))).route;
        setFutureSnapshotsOfActivatedRoutes(curr, tree);
        return tree;
    }
    else {
        var /** @type {?} */ value = createActivatedRoute(curr.value);
        var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });
        return new TreeNode(value, children);
    }
}
/**
 * @param {?} curr
 * @param {?} result
 * @return {?}
 */
function setFutureSnapshotsOfActivatedRoutes(curr, result) {
    if (curr.value.routeConfig !== result.value.routeConfig) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
    }
    if (curr.children.length !== result.children.length) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
    }
    result.value._futureSnapshot = curr.value;
    for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {
        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
    }
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map(function (child) {
        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
            var p = _a[_i];
            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
                return createNode(routeReuseStrategy, child, p);
            }
        }
        return createNode(routeReuseStrategy, child);
    });
}
/**
 * @param {?} c
 * @return {?}
 */
function createActivatedRoute(c) {
    return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} route
 * @param {?} urlTree
 * @param {?} commands
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    var /** @type {?} */ nav = computeNavigation(commands);
    if (nav.toRoot()) {
        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);
    var /** @type {?} */ segmentGroup = startingPosition.processChildren ?
        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :
        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}
/**
 * @param {?} command
 * @return {?}
 */
function isMatrixParams(command) {
    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
}
/**
 * @param {?} oldSegmentGroup
 * @param {?} newSegmentGroup
 * @param {?} urlTree
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    if (urlTree.root === oldSegmentGroup) {
        return new UrlTree(newSegmentGroup, stringify$3(queryParams), fragment);
    }
    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify$3(queryParams), fragment);
}
/**
 * @param {?} current
 * @param {?} oldSegment
 * @param {?} newSegment
 * @return {?}
 */
function replaceSegment(current, oldSegment, newSegment) {
    var /** @type {?} */ children = {};
    forEach(current.children, function (c, outletName) {
        if (c === oldSegment) {
            children[outletName] = newSegment;
        }
        else {
            children[outletName] = replaceSegment(c, oldSegment, newSegment);
        }
    });
    return new UrlSegmentGroup(current.segments, children);
}
var Navigation = (function () {
    /**
     * @param {?} isAbsolute
     * @param {?} numberOfDoubleDots
     * @param {?} commands
     */
    function Navigation(isAbsolute, numberOfDoubleDots, commands) {
        this.isAbsolute = isAbsolute;
        this.numberOfDoubleDots = numberOfDoubleDots;
        this.commands = commands;
        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
            throw new Error('Root segment cannot have matrix parameters');
        }
        var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });
        if (cmdWithOutlet && cmdWithOutlet !== last$$1(commands)) {
            throw new Error('{outlets:{}} has to be the last command');
        }
    }
    /**
     * @return {?}
     */
    Navigation.prototype.toRoot = function () {
        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
    };
    return Navigation;
}());
/**
 *  Transforms commands to a normalized `Navigation`
 * @param {?} commands
 * @return {?}
 */
function computeNavigation(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
        return new Navigation(true, 0, commands);
    }
    var /** @type {?} */ numberOfDoubleDots = 0;
    var /** @type {?} */ isAbsolute = false;
    var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {
        if (typeof cmd === 'object' && cmd != null) {
            if (cmd.outlets) {
                var /** @type {?} */ outlets_1 = {};
                forEach(cmd.outlets, function (commands, name) {
                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;
                });
                return res.concat([{ outlets: outlets_1 }]);
            }
            if (cmd.segmentPath) {
                return res.concat([cmd.segmentPath]);
            }
        }
        if (!(typeof cmd === 'string')) {
            return res.concat([cmd]);
        }
        if (cmdIdx === 0) {
            cmd.split('/').forEach(function (urlPart, partIndex) {
                if (partIndex == 0 && urlPart === '.') {
                }
                else if (partIndex == 0 && urlPart === '') {
                    isAbsolute = true;
                }
                else if (urlPart === '..') {
                    numberOfDoubleDots++;
                }
                else if (urlPart != '') {
                    res.push(urlPart);
                }
            });
            return res;
        }
        return res.concat([cmd]);
    }, []);
    return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = (function () {
    /**
     * @param {?} segmentGroup
     * @param {?} processChildren
     * @param {?} index
     */
    function Position(segmentGroup, processChildren, index) {
        this.segmentGroup = segmentGroup;
        this.processChildren = processChildren;
        this.index = index;
    }
    return Position;
}());
/**
 * @param {?} nav
 * @param {?} tree
 * @param {?} route
 * @return {?}
 */
function findStartingPosition(nav, tree, route) {
    if (nav.isAbsolute) {
        return new Position(tree.root, true, 0);
    }
    if (route.snapshot._lastPathIndex === -1) {
        return new Position(route.snapshot._urlSegment, true, 0);
    }
    var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
    var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;
    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}
/**
 * @param {?} group
 * @param {?} index
 * @param {?} numberOfDoubleDots
 * @return {?}
 */
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    var /** @type {?} */ g = group;
    var /** @type {?} */ ci = index;
    var /** @type {?} */ dd = numberOfDoubleDots;
    while (dd > ci) {
        dd -= ci;
        g = g.parent;
        if (!g) {
            throw new Error('Invalid number of \'../\'');
        }
        ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
}
/**
 * @param {?} command
 * @return {?}
 */
function getPath(command) {
    if (typeof command === 'object' && command != null && command.outlets) {
        return command.outlets[PRIMARY_OUTLET];
    }
    return "" + command;
}
/**
 * @param {?} commands
 * @return {?}
 */
function getOutlets(commands) {
    if (!(typeof commands[0] === 'object'))
        return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);
    if (commands[0].outlets === undefined)
        return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);
    return commands[0].outlets;
    var _a, _b;
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
        segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);
    var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
        var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
        g.children[PRIMARY_OUTLET] =
            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
        return updateSegmentGroupChildren(g, 0, slicedCommands);
    }
    else if (m.match && slicedCommands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else if (m.match && !segmentGroup.hasChildren()) {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
    else if (m.match) {
        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    }
    else {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else {
        var /** @type {?} */ outlets_2 = getOutlets(commands);
        var /** @type {?} */ children_1 = {};
        forEach(outlets_2, function (commands, outlet) {
            if (commands !== null) {
                children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
            }
        });
        forEach(segmentGroup.children, function (child, childOutlet) {
            if (outlets_2[childOutlet] === undefined) {
                children_1[childOutlet] = child;
            }
        });
        return new UrlSegmentGroup(segmentGroup.segments, children_1);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function prefixedWith(segmentGroup, startIndex, commands) {
    var /** @type {?} */ currentCommandIndex = 0;
    var /** @type {?} */ currentPathIndex = startIndex;
    var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
    while (currentPathIndex < segmentGroup.segments.length) {
        if (currentCommandIndex >= commands.length)
            return noMatch;
        var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];
        var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);
        var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
        if (currentPathIndex > 0 && curr === undefined)
            break;
        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
            if (!compare(curr, next, path))
                return noMatch;
            currentCommandIndex += 2;
        }
        else {
            if (!compare(curr, {}, path))
                return noMatch;
            currentCommandIndex++;
        }
        currentPathIndex++;
    }
    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);
    var /** @type {?} */ i = 0;
    while (i < commands.length) {
        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
            var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);
            return new UrlSegmentGroup(paths, children);
        }
        // if we start with an object literal, we need to reuse the path part from the segment
        if (i === 0 && isMatrixParams(commands[0])) {
            var /** @type {?} */ p = segmentGroup.segments[startIndex];
            paths.push(new UrlSegment(p.path, commands[0]));
            i++;
            continue;
        }
        var /** @type {?} */ curr = getPath(commands[i]);
        var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;
        if (curr && next && isMatrixParams(next)) {
            paths.push(new UrlSegment(curr, stringify$3(next)));
            i += 2;
        }
        else {
            paths.push(new UrlSegment(curr, {}));
            i++;
        }
    }
    return new UrlSegmentGroup(paths, {});
}
/**
 * @param {?} outlets
 * @return {?}
 */
function createNewSegmentChildren(outlets) {
    var /** @type {?} */ children = {};
    forEach(outlets, function (commands, outlet) {
        if (commands !== null) {
            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
        }
    });
    return children;
}
/**
 * @param {?} params
 * @return {?}
 */
function stringify$3(params) {
    var /** @type {?} */ res = {};
    forEach(params, function (v, k) { return res[k] = "" + v; });
    return res;
}
/**
 * @param {?} path
 * @param {?} params
 * @param {?} segment
 * @return {?}
 */
function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NoMatch$1 = (function () {
    function NoMatch() {
    }
    return NoMatch;
}());
/**
 * @param {?} rootComponentType
 * @param {?} config
 * @param {?} urlTree
 * @param {?} url
 * @return {?}
 */
function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
}
var Recognizer = (function () {
    /**
     * @param {?} rootComponentType
     * @param {?} config
     * @param {?} urlTree
     * @param {?} url
     */
    function Recognizer(rootComponentType, config, urlTree, url) {
        this.rootComponentType = rootComponentType;
        this.config = config;
        this.urlTree = urlTree;
        this.url = url;
    }
    /**
     * @return {?}
     */
    Recognizer.prototype.recognize = function () {
        try {
            var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
            var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
            var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            var /** @type {?} */ rootNode = new TreeNode(root, children);
            var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);
            this.inheriteParamsAndData(routeState._root);
            return of(routeState);
        }
        catch (e) {
            return new Observable(function (obs) { return obs.error(e); });
        }
    };
    /**
     * @param {?} routeNode
     * @return {?}
     */
    Recognizer.prototype.inheriteParamsAndData = function (routeNode) {
        var _this = this;
        var /** @type {?} */ route = routeNode.value;
        var /** @type {?} */ i = inheritedParamsDataResolve(route);
        route.params = Object.freeze(i.params);
        route.data = Object.freeze(i.data);
        routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(config, segmentGroup);
        }
        else {
            return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
        }
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @return {?}
     */
    Recognizer.prototype.processChildren = function (config, segmentGroup) {
        var _this = this;
        var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });
        checkOutletNameUniqueness(children);
        sortActivatedRouteSnapshots(children);
        return children;
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {
        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
            var r = config_1[_i];
            try {
                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
            }
            catch (e) {
                if (!(e instanceof NoMatch$1))
                    throw e;
            }
        }
        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return [];
        }
        else {
            throw new NoMatch$1();
        }
    };
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    };
    /**
     * @param {?} route
     * @param {?} rawSegment
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {
        if (route.redirectTo)
            throw new NoMatch$1();
        if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)
            throw new NoMatch$1();
        if (route.path === '**') {
            var /** @type {?} */ params = segments.length > 0 ? last$$1(segments).parameters : {};
            var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
            return [new TreeNode(snapshot_1, [])];
        }
        var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);
        var /** @type {?} */ childConfig = getChildConfig(route);
        var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
        var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var /** @type {?} */ children = this.processChildren(childConfig, segmentGroup);
            return [new TreeNode(snapshot, children)];
        }
        else if (childConfig.length === 0 && slicedSegments.length === 0) {
            return [new TreeNode(snapshot, [])];
        }
        else {
            var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
            return [new TreeNode(snapshot, children)];
        }
    };
    return Recognizer;
}());
/**
 * @param {?} nodes
 * @return {?}
 */
function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function (a, b) {
        if (a.value.outlet === PRIMARY_OUTLET)
            return -1;
        if (b.value.outlet === PRIMARY_OUTLET)
            return 1;
        return a.value.outlet.localeCompare(b.value.outlet);
    });
}
/**
 * @param {?} route
 * @return {?}
 */
function getChildConfig(route) {
    if (route.children) {
        return route.children;
    }
    else if (route.loadChildren) {
        return ((route))._loadedConfig.routes;
    }
    else {
        return [];
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match$1(segmentGroup, route, segments) {
    if (route.path === '') {
        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            throw new NoMatch$1();
        }
        else {
            return { consumedSegments: [], lastChild: 0, parameters: {} };
        }
    }
    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
    var /** @type {?} */ res = matcher(segments, segmentGroup, route);
    if (!res)
        throw new NoMatch$1();
    var /** @type {?} */ posParams = {};
    forEach(res.posParams, function (v, k) { posParams[k] = v.path; });
    var /** @type {?} */ parameters = merge$1(posParams, res.consumed[res.consumed.length - 1].parameters);
    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
}
/**
 * @param {?} nodes
 * @return {?}
 */
function checkOutletNameUniqueness(nodes) {
    var /** @type {?} */ names = {};
    nodes.forEach(function (n) {
        var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
            var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
        }
        names[n.value.outlet] = n.value;
    });
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getSourceSegmentGroup(segmentGroup) {
    var /** @type {?} */ s = segmentGroup;
    while (s._sourceSegment) {
        s = s._sourceSegment;
    }
    return s;
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getPathIndexShift(segmentGroup) {
    var /** @type {?} */ s = segmentGroup;
    var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
        s = s._sourceSegment;
        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */
function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: [] };
    }
    else if (slicedSegments.length === 0 &&
        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: slicedSegments };
    }
    else {
        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: slicedSegments };
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var /** @type {?} */ res = {};
    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
        var r = routes_1[_i];
        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
            var /** @type {?} */ s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = segmentGroup.segments.length;
            res[getOutlet$2(r)] = s;
        }
    }
    return merge$1(children, res);
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} routes
 * @param {?} primarySegment
 * @return {?}
 */
function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var /** @type {?} */ res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
        var r = routes_2[_i];
        if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
            var /** @type {?} */ s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            res[getOutlet$2(r)] = s;
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes
        .filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) &&
        getOutlet$2(r) !== PRIMARY_OUTLET; })
        .length > 0;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); }).length > 0;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */
function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
        return false;
    return r.path === '' && r.redirectTo === undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet$2(route) {
    return route.outlet ? route.outlet : PRIMARY_OUTLET;
}
/**
 * @param {?} route
 * @return {?}
 */
function getData(route) {
    return route.data ? route.data : {};
}
/**
 * @param {?} route
 * @return {?}
 */
function getResolve(route) {
    return route.resolve ? route.resolve : {};
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
 */
var RouterOutletMap = (function () {
    function RouterOutletMap() {
        /** @internal */
        this._outlets = {};
    }
    /**
     *  Adds an outlet to this map.
     * @param {?} name
     * @param {?} outlet
     * @return {?}
     */
    RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
    /**
     *  Removes an outlet from this map.
     * @param {?} name
     * @return {?}
     */
    RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };
    return RouterOutletMap;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
 * @abstract
 */
var UrlHandlingStrategy = (function () {
    function UrlHandlingStrategy() {
    }
    /**
     *  Tells the router if this URL should be processed.
      * *
      * When it returns true, the router will execute the regular navigation.
      * When it returns false, the router will set the router state to an empty state.
      * As a result, all the active components will be destroyed.
      * *
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };
    /**
     *  Extracts the part of the URL that should be handled by the router.
      * The rest of the URL will remain untouched.
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlHandlingStrategy.prototype.extract = function (url) { };
    /**
     *  Merges the URL fragment with the rest of the URL.
     * @abstract
     * @param {?} newUrlPart
     * @param {?} rawUrl
     * @return {?}
     */
    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };
    return UrlHandlingStrategy;
}());
/**
 * @experimental
 */
var DefaultUrlHandlingStrategy = (function () {
    function DefaultUrlHandlingStrategy() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };
    /**
     * @param {?} url
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };
    /**
     * @param {?} newUrlPart
     * @param {?} wholeUrl
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };
    return DefaultUrlHandlingStrategy;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
 */
var NavigationStart = (function () {
    /**
     * @param {?} id
     * @param {?} url
     */
    function NavigationStart(id, url) {
        this.id = id;
        this.url = url;
    }
    /**
     * @return {?}
     */
    NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
    return NavigationStart;
}());
/**
 *  *
 */
var NavigationEnd = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     */
    function NavigationEnd(id, url, urlAfterRedirects) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
    }
    /**
     * @return {?}
     */
    NavigationEnd.prototype.toString = function () {
        return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
    };
    return NavigationEnd;
}());
/**
 *  *
 */
var NavigationCancel = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} reason
     */
    function NavigationCancel(id, url, reason) {
        this.id = id;
        this.url = url;
        this.reason = reason;
    }
    /**
     * @return {?}
     */
    NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
    return NavigationCancel;
}());
/**
 *  *
 */
var NavigationError = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} error
     */
    function NavigationError(id, url, error) {
        this.id = id;
        this.url = url;
        this.error = error;
    }
    /**
     * @return {?}
     */
    NavigationError.prototype.toString = function () {
        return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
    };
    return NavigationError;
}());
/**
 *  *
 */
var RoutesRecognized = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    function RoutesRecognized(id, url, urlAfterRedirects, state$$1) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state$$1;
    }
    /**
     * @return {?}
     */
    RoutesRecognized.prototype.toString = function () {
        return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return RoutesRecognized;
}());
/**
 * @param {?} error
 * @return {?}
 */
function defaultErrorHandler(error) {
    throw error;
}
/**
 *  Does not detach any subtrees. Reuses routes as long as their route config is the same.
 */
var DefaultRouteReuseStrategy = (function () {
    function DefaultRouteReuseStrategy() {
    }
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };
    /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {
        return future.routeConfig === curr.routeConfig;
    };
    return DefaultRouteReuseStrategy;
}());
/**
 *  *
  * See {@link Routes} for more details and examples.
  * *
  * *
 */
var Router = (function () {
    /**
     * @param {?} rootComponentType
     * @param {?} urlSerializer
     * @param {?} outletMap
     * @param {?} location
     * @param {?} injector
     * @param {?} loader
     * @param {?} compiler
     * @param {?} config
     */
    function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
        this.rootComponentType = rootComponentType;
        this.urlSerializer = urlSerializer;
        this.outletMap = outletMap;
        this.location = location;
        this.injector = injector;
        this.config = config;
        this.navigations = new BehaviorSubject(null);
        this.routerEvents = new Subject();
        this.navigationId = 0;
        /**
         * Error handler that is invoked when a navigation errors.
         *
         * See {@link ErrorHandler} for more information.
         */
        this.errorHandler = defaultErrorHandler;
        /**
         * Indicates if at least one navigation happened.
         */
        this.navigated = false;
        /**
         * Extracts and merges URLs. Used for Angular 1 to Angular 2 migrations.
         */
        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
        this.routeReuseStrategy = new DefaultRouteReuseStrategy();
        this.resetConfig(config);
        this.currentUrlTree = createEmptyUrlTree();
        this.rawUrlTree = this.currentUrlTree;
        this.configLoader = new RouterConfigLoader(loader, compiler);
        this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
        this.processNavigations();
    }
    /**
     *  TODO: this should be removed once the constructor of the router made internal
     * @param {?} rootComponentType
     * @return {?}
     */
    Router.prototype.resetRootComponentType = function (rootComponentType) {
        this.rootComponentType = rootComponentType;
        // TODO: vsavkin router 4.0 should make the root component set to null
        // this will simplify the lifecycle of the router.
        this.currentRouterState.root.component = this.rootComponentType;
    };
    /**
     *  Sets up the location change listener and performs the initial navigation.
     * @return {?}
     */
    Router.prototype.initialNavigation = function () {
        this.setUpLocationChangeListener();
        this.navigateByUrl(this.location.path(true), { replaceUrl: true });
    };
    /**
     *  Sets up the location change listener.
     * @return {?}
     */
    Router.prototype.setUpLocationChangeListener = function () {
        var _this = this;
        // Zone.current.wrap is needed because of the issue with RxJS scheduler,
        // which does not work properly with zone.js in IE and Safari
        if (!this.locationSubscription) {
            this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {
                var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);
                var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);
            })));
        }
    };
    Object.defineProperty(Router.prototype, "routerState", {
        /**
         *  The current route state
         * @return {?}
         */
        get: function () { return this.currentRouterState; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "url", {
        /**
         *  The current url
         * @return {?}
         */
        get: function () { return this.serializeUrl(this.currentUrlTree); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "events", {
        /**
         *  An observable of router events
         * @return {?}
         */
        get: function () { return this.routerEvents; },
        enumerable: true,
        configurable: true
    });
    /**
     *  Resets the configuration used for navigation and generating links.
      * *
      * ### Usage
      * *
      * ```
      * router.resetConfig([
      * { path: 'team/:id', component: TeamCmp, children: [
      * { path: 'simple', component: SimpleCmp },
      * { path: 'user/:name', component: UserCmp }
      * ]}
      * ]);
      * ```
     * @param {?} config
     * @return {?}
     */
    Router.prototype.resetConfig = function (config) {
        validateConfig(config);
        this.config = config;
    };
    /**
     * @return {?}
     */
    Router.prototype.ngOnDestroy = function () { this.dispose(); };
    /**
     *  Disposes of the router
     * @return {?}
     */
    Router.prototype.dispose = function () {
        if (this.locationSubscription) {
            this.locationSubscription.unsubscribe();
            this.locationSubscription = null;
        }
    };
    /**
     *  Applies an array of commands to the current url tree and creates a new url tree.
      * *
      * When given an activate route, applies the given commands starting from the route.
      * When not given a route, applies the given command starting from the root.
      * *
      * ### Usage
      * *
      * ```
      * // create /team/33/user/11
      * router.createUrlTree(['/team', 33, 'user', 11]);
      * *
      * // create /team/33;expand=true/user/11
      * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
      * *
      * // you can collapse static segments like this (this works only with the first passed-in value):
      * router.createUrlTree(['/team/33/user', userId]);
      * *
      * // If the first segment can contain slashes, and you do not want the router to split it, you
      * // can do the following:
      * *
      * router.createUrlTree([{segmentPath: '/one/two'}]);
      * *
      * // create /team/33/(user/11//right:chat)
      * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
      * *
      * // remove the right secondary node
      * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
      * *
      * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
      * *
      * // navigate to /team/33/user/11/details
      * router.createUrlTree(['details'], {relativeTo: route});
      * *
      * // navigate to /team/33/user/22
      * router.createUrlTree(['../22'], {relativeTo: route});
      * *
      * // navigate to /team/44/user/22
      * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
      * ```
     * @param {?} commands
     * @param {?=} __1
     * @return {?}
     */
    Router.prototype.createUrlTree = function (commands, _a) {
        var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;
        var /** @type {?} */ a = relativeTo || this.routerState.root;
        var /** @type {?} */ q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
        var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;
        return createUrlTree(a, this.currentUrlTree, commands, q, f);
    };
    /**
     *  Navigate based on the provided url. This navigation is always absolute.
      * *
      * Returns a promise that:
      * - resolves to 'true' when navigation succeeds,
      * - resolves to 'false' when navigation fails,
      * - is rejected when an error happens.
      * *
      * ### Usage
      * *
      * ```
      * router.navigateByUrl("/team/33/user/11");
      * *
      * // Navigate without updating the URL
      * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
      * ```
      * *
      * In opposite to `navigate`, `navigateByUrl` takes a whole URL
      * and does not apply any delta to the current one.
     * @param {?} url
     * @param {?=} extras
     * @return {?}
     */
    Router.prototype.navigateByUrl = function (url, extras) {
        if (extras === void 0) { extras = { skipLocationChange: false }; }
        if (url instanceof UrlTree) {
            return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), 'imperative', extras);
        }
        var /** @type {?} */ urlTree = this.urlSerializer.parse(url);
        return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), 'imperative', extras);
    };
    /**
     *  Navigate based on the provided array of commands and a starting point.
      * If no starting route is provided, the navigation is absolute.
      * *
      * Returns a promise that:
      * - resolves to 'true' when navigation succeeds,
      * - resolves to 'false' when navigation fails,
      * - is rejected when an error happens.
      * *
      * ### Usage
      * *
      * ```
      * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
      * *
      * // Navigate without updating the URL
      * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
      * ```
      * *
      * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current
      * URL.
     * @param {?} commands
     * @param {?=} extras
     * @return {?}
     */
    Router.prototype.navigate = function (commands, extras) {
        if (extras === void 0) { extras = { skipLocationChange: false }; }
        validateCommands(commands);
        if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
            extras.queryParams = this.removeEmptyProps(extras.queryParams);
        }
        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    };
    /**
     *  Serializes a {@link UrlTree} into a string
     * @param {?} url
     * @return {?}
     */
    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
    /**
     *  Parses a string into a {@link UrlTree}
     * @param {?} url
     * @return {?}
     */
    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
    /**
     *  Returns whether the url is activated
     * @param {?} url
     * @param {?} exact
     * @return {?}
     */
    Router.prototype.isActive = function (url, exact) {
        if (url instanceof UrlTree) {
            return containsTree(this.currentUrlTree, url, exact);
        }
        else {
            var /** @type {?} */ urlTree = this.urlSerializer.parse(url);
            return containsTree(this.currentUrlTree, urlTree, exact);
        }
    };
    /**
     * @param {?} params
     * @return {?}
     */
    Router.prototype.removeEmptyProps = function (params) {
        return Object.keys(params).reduce(function (result, key) {
            var /** @type {?} */ value = params[key];
            if (value !== null && value !== undefined) {
                result[key] = value;
            }
            return result;
        }, {});
    };
    /**
     * @return {?}
     */
    Router.prototype.processNavigations = function () {
        var _this = this;
        concatMap
            .call(this.navigations, function (nav) {
            if (nav) {
                _this.executeScheduledNavigation(nav);
                // a failed navigation should not stop the router from processing
                // further navigations => the catch
                return nav.promise.catch(function () { });
            }
            else {
                return (of(null));
            }
        })
            .subscribe(function () { });
    };
    /**
     * @param {?} rawUrl
     * @param {?} source
     * @param {?} extras
     * @return {?}
     */
    Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {
        var /** @type {?} */ lastNavigation = this.navigations.value;
        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),
        // and that navigation results in 'replaceState' that leads to the same URL,
        // we should skip those.
        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return null; // return value is not used
        }
        // Because of a bug in IE and Edge, the location class fires two events (popstate and
        // hashchange)
        // every single time. The second one should be ignored. Otherwise, the URL will flicker.
        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return null; // return value is not used
        }
        var /** @type {?} */ resolve = null;
        var /** @type {?} */ reject = null;
        var /** @type {?} */ promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        var /** @type {?} */ id = ++this.navigationId;
        this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });
        // Make sure that the error is propagated even though `processNavigations` catch
        // handler does not rethrow
        return promise.catch(function (e) { return Promise.reject(e); });
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    Router.prototype.executeScheduledNavigation = function (_a) {
        var _this = this;
        var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
        var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);
        var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
        if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve()
                .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })
                .then(resolve, reject);
        }
        else if (urlTransition && this.rawUrlTree &&
            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve()
                .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })
                .then(resolve, reject);
        }
        else {
            this.rawUrlTree = rawUrl;
            resolve(null);
        }
    };
    /**
     * @param {?} url
     * @param {?} rawUrl
     * @param {?} shouldPreventPushState
     * @param {?} shouldReplaceUrl
     * @param {?} id
     * @param {?} precreatedState
     * @return {?}
     */
    Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
        var _this = this;
        if (id !== this.navigationId) {
            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
            return Promise.resolve(false);
        }
        return new Promise(function (resolvePromise, rejectPromise) {
            // create an observable of the url and route state snapshot
            // this operation do not result in any side effects
            var /** @type {?} */ urlAndSnapshot$;
            if (!precreatedState) {
                var /** @type {?} */ redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);
                urlAndSnapshot$ = mergeMap.call(redirectsApplied$, function (appliedUrl) {
                    return map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
                        _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
                        return { appliedUrl: appliedUrl, snapshot: snapshot };
                    });
                });
            }
            else {
                urlAndSnapshot$ = of({ appliedUrl: url, snapshot: precreatedState });
            }
            // run preactivation: guards and data resolvers
            var /** @type {?} */ preActivation;
            var /** @type {?} */ preactivationTraverse$ = map.call(urlAndSnapshot$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                preActivation =
                    new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);
                preActivation.traverse(_this.outletMap);
                return { appliedUrl: appliedUrl, snapshot: snapshot };
            });
            var /** @type {?} */ preactivationCheckGuards = mergeMap.call(preactivationTraverse$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                if (_this.navigationId !== id)
                    return of(false);
                return map.call(preActivation.checkGuards(), function (shouldActivate) {
                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
                });
            });
            var /** @type {?} */ preactivationResolveData$ = mergeMap.call(preactivationCheckGuards, function (p) {
                if (_this.navigationId !== id)
                    return of(false);
                if (p.shouldActivate) {
                    return map.call(preActivation.resolveData(), function () { return p; });
                }
                else {
                    return of(p);
                }
            });
            // create router state
            // this operation has side effects => route state is being affected
            var /** @type {?} */ routerState$ = map.call(preactivationResolveData$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
                if (shouldActivate) {
                    var /** @type {?} */ state$$1 = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
                    return { appliedUrl: appliedUrl, state: state$$1, shouldActivate: shouldActivate };
                }
                else {
                    return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
                }
            });
            // applied the new router state
            // this operation has side effects
            var /** @type {?} */ navigationIsSuccessful;
            var /** @type {?} */ storedState = _this.currentRouterState;
            var /** @type {?} */ storedUrl = _this.currentUrlTree;
            routerState$
                .forEach(function (_a) {
                var appliedUrl = _a.appliedUrl, state$$1 = _a.state, shouldActivate = _a.shouldActivate;
                if (!shouldActivate || id !== _this.navigationId) {
                    navigationIsSuccessful = false;
                    return;
                }
                _this.currentUrlTree = appliedUrl;
                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                _this.currentRouterState = state$$1;
                if (!shouldPreventPushState) {
                    var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);
                    if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                        _this.location.replaceState(path);
                    }
                    else {
                        _this.location.go(path);
                    }
                }
                new ActivateRoutes(_this.routeReuseStrategy, state$$1, storedState)
                    .activate(_this.outletMap);
                navigationIsSuccessful = true;
            })
                .then(function () {
                _this.navigated = true;
                if (navigationIsSuccessful) {
                    _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
                    resolvePromise(true);
                }
                else {
                    _this.resetUrlToCurrentUrlTree();
                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                    resolvePromise(false);
                }
            }, function (e) {
                if (e instanceof NavigationCancelingError) {
                    _this.resetUrlToCurrentUrlTree();
                    _this.navigated = true;
                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                    resolvePromise(false);
                }
                else {
                    _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                    try {
                        resolvePromise(_this.errorHandler(e));
                    }
                    catch (ee) {
                        rejectPromise(ee);
                    }
                }
                _this.currentRouterState = storedState;
                _this.currentUrlTree = storedUrl;
                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
            });
        });
    };
    /**
     * @return {?}
     */
    Router.prototype.resetUrlToCurrentUrlTree = function () {
        var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);
        this.location.replaceState(path);
    };
    return Router;
}());
var CanActivate = (function () {
    /**
     * @param {?} path
     */
    function CanActivate(path) {
        this.path = path;
    }
    Object.defineProperty(CanActivate.prototype, "route", {
        /**
         * @return {?}
         */
        get: function () { return this.path[this.path.length - 1]; },
        enumerable: true,
        configurable: true
    });
    return CanActivate;
}());
var CanDeactivate = (function () {
    /**
     * @param {?} component
     * @param {?} route
     */
    function CanDeactivate(component, route) {
        this.component = component;
        this.route = route;
    }
    return CanDeactivate;
}());
var PreActivation = (function () {
    /**
     * @param {?} future
     * @param {?} curr
     * @param {?} injector
     */
    function PreActivation(future, curr, injector) {
        this.future = future;
        this.curr = curr;
        this.injector = injector;
        this.checks = [];
    }
    /**
     * @param {?} parentOutletMap
     * @return {?}
     */
    PreActivation.prototype.traverse = function (parentOutletMap) {
        var /** @type {?} */ futureRoot = this.future._root;
        var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;
        this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.checkGuards = function () {
        var _this = this;
        if (this.checks.length === 0)
            return of(true);
        var /** @type {?} */ checks$ = from(this.checks);
        var /** @type {?} */ runningChecks$ = mergeMap.call(checks$, function (s) {
            if (s instanceof CanActivate) {
                return andObservables(from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
            }
            else if (s instanceof CanDeactivate) {
                // workaround https://github.com/Microsoft/TypeScript/issues/7271
                var /** @type {?} */ s2 = (s);
                return _this.runCanDeactivate(s2.component, s2.route);
            }
            else {
                throw new Error('Cannot be reached');
            }
        });
        return every.call(runningChecks$, function (result) { return result === true; });
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.resolveData = function () {
        var _this = this;
        if (this.checks.length === 0)
            return of(null);
        var /** @type {?} */ checks$ = from(this.checks);
        var /** @type {?} */ runningChecks$ = concatMap.call(checks$, function (s) {
            if (s instanceof CanActivate) {
                return _this.runResolve(s.route);
            }
            else {
                return of(null);
            }
        });
        return reduce.call(runningChecks$, function (_, __) { return _; });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @param {?} futurePath
     * @return {?}
     */
    PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(function (c) {
            _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
            delete prevChildren[c.value.outlet];
        });
        forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @param {?} futurePath
     * @return {?}
     */
    PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        var /** @type {?} */ outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
        // reusing the node
        if (curr && future._routeConfig === curr._routeConfig) {
            if (!equalParamsAndUrlSegments(future, curr)) {
                this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
            }
            else {
                // we need to set the data
                future.data = curr.data;
                future._resolvedData = curr._resolvedData;
            }
            // If we have a component, we need to go through an outlet.
            if (future.component) {
                this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
            }
            else {
                this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
            }
        }
        else {
            if (curr) {
                this.deactiveRouteAndItsChildren(currNode, outlet);
            }
            this.checks.push(new CanActivate(futurePath));
            // If we have a component, we need to go through an outlet.
            if (future.component) {
                this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
            }
            else {
                this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
            }
        }
    };
    /**
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */
    PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);
        var /** @type {?} */ r = route.value;
        forEach(prevChildren, function (v, k) {
            if (!r.component) {
                _this.deactiveRouteAndItsChildren(v, outlet);
            }
            else if (!!outlet) {
                _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
            }
            else {
                _this.deactiveRouteAndItsChildren(v, null);
            }
        });
        if (!r.component) {
            this.checks.push(new CanDeactivate(null, r));
        }
        else if (outlet && outlet.isActivated) {
            this.checks.push(new CanDeactivate(outlet.component, r));
        }
        else {
            this.checks.push(new CanDeactivate(null, r));
        }
    };
    /**
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.runCanActivate = function (future) {
        var _this = this;
        var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
        if (!canActivate || canActivate.length === 0)
            return of(true);
        var /** @type {?} */ obs = map.call(from(canActivate), function (c) {
            var /** @type {?} */ guard = _this.getToken(c, future);
            var /** @type {?} */ observable;
            if (guard.canActivate) {
                observable = wrapIntoObservable(guard.canActivate(future, _this.future));
            }
            else {
                observable = wrapIntoObservable(guard(future, _this.future));
            }
            return first.call(observable);
        });
        return andObservables(obs);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    PreActivation.prototype.runCanActivateChild = function (path) {
        var _this = this;
        var /** @type {?} */ future = path[path.length - 1];
        var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)
            .reverse()
            .map(function (p) { return _this.extractCanActivateChild(p); })
            .filter(function (_) { return _ !== null; });
        return andObservables(map.call(from(canActivateChildGuards), function (d) {
            var /** @type {?} */ obs = map.call(from(d.guards), function (c) {
                var /** @type {?} */ guard = _this.getToken(c, c.node);
                var /** @type {?} */ observable;
                if (guard.canActivateChild) {
                    observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(future, _this.future));
                }
                return first.call(observable);
            });
            return andObservables(obs);
        }));
    };
    /**
     * @param {?} p
     * @return {?}
     */
    PreActivation.prototype.extractCanActivateChild = function (p) {
        var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
        if (!canActivateChild || canActivateChild.length === 0)
            return null;
        return { node: p, guards: canActivateChild };
    };
    /**
     * @param {?} component
     * @param {?} curr
     * @return {?}
     */
    PreActivation.prototype.runCanDeactivate = function (component, curr) {
        var _this = this;
        var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
        if (!canDeactivate || canDeactivate.length === 0)
            return of(true);
        var /** @type {?} */ canDeactivate$ = mergeMap.call(from(canDeactivate), function (c) {
            var /** @type {?} */ guard = _this.getToken(c, curr);
            var /** @type {?} */ observable;
            if (guard.canDeactivate) {
                observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
            }
            else {
                observable = wrapIntoObservable(guard(component, curr, _this.curr));
            }
            return first.call(observable);
        });
        return every.call(canDeactivate$, function (result) { return result === true; });
    };
    /**
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.runResolve = function (future) {
        var /** @type {?} */ resolve = future._resolve;
        return map.call(this.resolveNode(resolve, future), function (resolvedData) {
            future._resolvedData = resolvedData;
            future.data = merge$1(future.data, inheritedParamsDataResolve(future).resolve);
            return null;
        });
    };
    /**
     * @param {?} resolve
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.resolveNode = function (resolve, future) {
        var _this = this;
        return waitForMap(resolve, function (k, v) {
            var /** @type {?} */ resolver = _this.getToken(v, future);
            return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :
                wrapIntoObservable(resolver(future, _this.future));
        });
    };
    /**
     * @param {?} token
     * @param {?} snapshot
     * @return {?}
     */
    PreActivation.prototype.getToken = function (token, snapshot) {
        var /** @type {?} */ config = closestLoadedConfig(snapshot);
        var /** @type {?} */ injector = config ? config.injector : this.injector;
        return injector.get(token);
    };
    return PreActivation;
}());
var ActivateRoutes = (function () {
    /**
     * @param {?} routeReuseStrategy
     * @param {?} futureState
     * @param {?} currState
     */
    function ActivateRoutes(routeReuseStrategy, futureState, currState) {
        this.routeReuseStrategy = routeReuseStrategy;
        this.futureState = futureState;
        this.currState = currState;
    }
    /**
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.activate = function (parentOutletMap) {
        var /** @type {?} */ futureRoot = this.futureState._root;
        var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;
        this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
        advanceActivatedRoute(this.futureState.root);
        this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(function (c) {
            _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
            delete prevChildren[c.value.outlet];
        });
        forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} outletMap
     * @return {?}
     */
    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        // reusing the node
        if (future === curr) {
            // If we have a normal route, we need to go through an outlet.
            if (future.component) {
                var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);
                this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
            }
            else {
                this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
            }
        }
        else {
            if (curr) {
                this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
            }
        }
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        // reusing the node
        if (future === curr) {
            // advance the route to push the parameters
            advanceActivatedRoute(future);
            // If we have a normal route, we need to go through an outlet.
            if (future.component) {
                var /** @type {?} */ outlet = getOutlet(parentOutletMap, future);
                this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
            }
            else {
                this.activateChildRoutes(futureNode, currNode, parentOutletMap);
            }
        }
        else {
            // if we have a normal route, we need to advance the route
            // and place the component into the outlet. After that recurse.
            if (future.component) {
                advanceActivatedRoute(future);
                var /** @type {?} */ outlet = getOutlet(parentOutletMap, futureNode.value);
                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                    var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));
                    this.routeReuseStrategy.store(future.snapshot, null);
                    outlet.attach(stored.componentRef, stored.route.value);
                    advanceActivatedRouteNodeAndItsChildren(stored.route);
                }
                else {
                    var /** @type {?} */ outletMap = new RouterOutletMap();
                    this.placeComponentIntoOutlet(outletMap, future, outlet);
                    this.activateChildRoutes(futureNode, null, outletMap);
                }
            }
            else {
                advanceActivatedRoute(future);
                this.activateChildRoutes(futureNode, null, parentOutletMap);
            }
        }
    };
    /**
     * @param {?} outletMap
     * @param {?} future
     * @param {?} outlet
     * @return {?}
     */
    ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
        var /** @type {?} */ resolved = ([{ provide: ActivatedRoute, useValue: future }, {
                provide: RouterOutletMap,
                useValue: outletMap
            }]);
        var /** @type {?} */ config = parentLoadedConfig(future.snapshot);
        var /** @type {?} */ resolver = null;
        var /** @type {?} */ injector = null;
        if (config) {
            injector = config.injectorFactory(outlet.locationInjector);
            resolver = config.factoryResolver;
            resolved.push({ provide: ComponentFactoryResolver, useValue: resolver });
        }
        else {
            injector = outlet.locationInjector;
            resolver = outlet.locationFactoryResolver;
        }
        outlet.activate(future, resolver, injector, ReflectiveInjector.resolve(resolved), outletMap);
    };
    /**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {
        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
            this.detachAndStoreRouteSubtree(route, parentOutletMap);
        }
        else {
            this.deactiveRouteAndOutlet(route, parentOutletMap);
        }
    };
    /**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {
        var /** @type {?} */ outlet = getOutlet(parentOutletMap, route.value);
        var /** @type {?} */ componentRef = outlet.detach();
        this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });
    };
    /**
     * @param {?} route
     * @param {?} parentOutletMap
     * @return {?}
     */
    ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(route);
        var /** @type {?} */ outlet = null;
        // getOutlet throws when cannot find the right outlet,
        // which can happen if an outlet was in an NgIf and was removed
        try {
            outlet = getOutlet(parentOutletMap, route.value);
        }
        catch (e) {
            return;
        }
        var /** @type {?} */ childOutletMap = outlet.outletMap;
        forEach(prevChildren, function (v, k) {
            if (route.value.component) {
                _this.deactiveRouteAndItsChildren(v, childOutletMap);
            }
            else {
                _this.deactiveRouteAndItsChildren(v, parentOutletMap);
            }
        });
        if (outlet && outlet.isActivated) {
            outlet.deactivate();
        }
    };
    return ActivateRoutes;
}());
/**
 * @param {?} node
 * @return {?}
 */
function advanceActivatedRouteNodeAndItsChildren(node) {
    advanceActivatedRoute(node.value);
    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function parentLoadedConfig(snapshot) {
    var /** @type {?} */ s = snapshot.parent;
    while (s) {
        var /** @type {?} */ c = s._routeConfig;
        if (c && c._loadedConfig)
            return c._loadedConfig;
        if (c && c.component)
            return null;
        s = s.parent;
    }
    return null;
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function closestLoadedConfig(snapshot) {
    if (!snapshot)
        return null;
    var /** @type {?} */ s = snapshot.parent;
    while (s) {
        var /** @type {?} */ c = s._routeConfig;
        if (c && c._loadedConfig)
            return c._loadedConfig;
        s = s.parent;
    }
    return null;
}
/**
 * @param {?} node
 * @return {?}
 */
function nodeChildrenAsMap(node) {
    return node ? node.children.reduce(function (m, c) {
        m[c.value.outlet] = c;
        return m;
    }, {}) : {};
}
/**
 * @param {?} outletMap
 * @param {?} route
 * @return {?}
 */
function getOutlet(outletMap, route) {
    var /** @type {?} */ outlet = outletMap._outlets[route.outlet];
    if (!outlet) {
        var /** @type {?} */ componentName = ((route.component)).name;
        if (route.outlet === PRIMARY_OUTLET) {
            throw new Error("Cannot find primary outlet to load '" + componentName + "'");
        }
        else {
            throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
        }
    }
    return outlet;
}
/**
 * @param {?} commands
 * @return {?}
 */
function validateCommands(commands) {
    for (var /** @type {?} */ i = 0; i < commands.length; i++) {
        var /** @type {?} */ cmd = commands[i];
        if (cmd == null) {
            throw new Error("The requested path contains " + cmd + " segment at index " + i);
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * Consider the following route configuration:
  * `[{ path: 'user/:name', component: UserCmp }]`
  * *
  * When linking to this `user/:name` route, you can write:
  * `<a routerLink='/user/bob'>link to user component</a>`
  * *
  * *
  * The RouterLink directives let you link to specific parts of your app.
  * *
  * When the link is static, you can use the directive as follows:
  * `<a routerLink="/user/bob">link to user component</a>`
  * *
  * If you use dynamic values to generate the link, you can pass an array of path
  * segments, followed by the params for each segment.
  * *
  * For instance `['/team', teamId, 'user', userName, {details: true}]`
  * means that we want to generate a link to `/team/11/user/bob;details=true`.
  * *
  * Multiple static segments can be merged into one
  * (e.g., `['/team/11/user', userName, {details: true}]`).
  * *
  * The first segment name can be prepended with `/`, `./`, or `../`:
  * * If the first segment begins with `/`, the router will look up the route from the root of the
  * app.
  * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
  * instead look in the children of the current activated route.
  * * And if the first segment begins with `../`, the router will go up one level.
  * *
  * You can set query params and fragment as follows:
  * *
  * ```
  * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
  * link to user component
  * </a>
  * ```
  * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
  * *
  * You can also tell the directive to preserve the current query params and fragment:
  * *
  * ```
  * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
  * link to user component
  * </a>
  * ```
  * *
  * The router link directive always treats the provided input as a delta to the current url.
  * *
  * For instance, if the current url is `/user/(box//aux:team)`.
  * *
  * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
  * `/user/(jim//aux:team)`.
  * *
  * *
  * See {@link Router.createUrlTree} for more information.
  * *
 */
var RouterLink = (function () {
    /**
     * @param {?} router
     * @param {?} route
     */
    function RouterLink(router, route) {
        this.router = router;
        this.route = route;
        this.commands = [];
    }
    Object.defineProperty(RouterLink.prototype, "routerLink", {
        /**
         * @param {?} commands
         * @return {?}
         */
        set: function (commands) {
            if (commands != null) {
                this.commands = Array.isArray(commands) ? commands : [commands];
            }
            else {
                this.commands = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterLink.prototype.onClick = function () {
        var /** @type {?} */ extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return true;
    };
    Object.defineProperty(RouterLink.prototype, "urlTree", {
        /**
         * @return {?}
         */
        get: function () {
            return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: attrBoolValue(this.preserveQueryParams),
                preserveFragment: attrBoolValue(this.preserveFragment),
            });
        },
        enumerable: true,
        configurable: true
    });
    RouterLink.decorators = [
        { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },
    ];
    /** @nocollapse */
    RouterLink.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
    ]; };
    RouterLink.propDecorators = {
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'routerLink': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click',] },],
    };
    return RouterLink;
}());
/**
 *  *
  * See {@link RouterLink} for more information.
  * *
  * *
 */
var RouterLinkWithHref = (function () {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} locationStrategy
     */
    function RouterLinkWithHref(router, route, locationStrategy) {
        var _this = this;
        this.router = router;
        this.route = route;
        this.locationStrategy = locationStrategy;
        this.commands = [];
        this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
                _this.updateTargetUrlAndHref();
            }
        });
    }
    Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
        /**
         * @param {?} commands
         * @return {?}
         */
        set: function (commands) {
            if (commands != null) {
                this.commands = Array.isArray(commands) ? commands : [commands];
            }
            else {
                this.commands = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
    /**
     * @return {?}
     */
    RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @return {?}
     */
    RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
        if (button !== 0 || ctrlKey || metaKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target != '_self') {
            return true;
        }
        var /** @type {?} */ extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return false;
    };
    /**
     * @return {?}
     */
    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    };
    Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
        /**
         * @return {?}
         */
        get: function () {
            return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: attrBoolValue(this.preserveQueryParams),
                preserveFragment: attrBoolValue(this.preserveFragment),
            });
        },
        enumerable: true,
        configurable: true
    });
    RouterLinkWithHref.decorators = [
        { type: Directive, args: [{ selector: 'a[routerLink]' },] },
    ];
    /** @nocollapse */
    RouterLinkWithHref.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
        { type: LocationStrategy, },
    ]; };
    RouterLinkWithHref.propDecorators = {
        'target': [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'href': [{ type: HostBinding },],
        'routerLink': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],
    };
    return RouterLinkWithHref;
}());
/**
 * @param {?} s
 * @return {?}
 */
function attrBoolValue(s) {
    return s === '' || !!s;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
  * *
  * ```
  * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
  * ```
  * *
  * *
  * The RouterLinkActive directive lets you add a CSS class to an element when the link's route
  * becomes active.
  * *
  * Consider the following example:
  * *
  * ```
  * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
  * ```
  * *
  * When the url is either '/user' or '/user/bob', the active-link class will
  * be added to the `a` tag. If the url changes, the class will be removed.
  * *
  * You can set more than one class, as follows:
  * *
  * ```
  * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
  * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
  * ```
  * *
  * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
  * only when the url matches the link exactly.
  * *
  * ```
  * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
  * true}">Bob</a>
  * ```
  * *
  * You can assign the RouterLinkActive instance to a template variable and directly check
  * the `isActive` status.
  * ```
  * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
  * Bob {{ rla.isActive ? '(already open)' : ''}}
  * </a>
  * ```
  * *
  * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
  * *
  * ```
  * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
  * <a routerLink="/user/jim">Jim</a>
  * <a routerLink="/user/bob">Bob</a>
  * </div>
  * ```
  * *
  * This will set the active-link class on the div tag if the url is either '/user/jim' or
  * '/user/bob'.
  * *
  * *
 */
var RouterLinkActive = (function () {
    /**
     * @param {?} router
     * @param {?} element
     * @param {?} renderer
     */
    function RouterLinkActive(router, element, renderer) {
        var _this = this;
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.classes = [];
        this.routerLinkActiveOptions = { exact: false };
        this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
                _this.update();
            }
        });
    }
    Object.defineProperty(RouterLinkActive.prototype, "isActive", {
        /**
         * @return {?}
         */
        get: function () { return this.hasActiveLink(); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.links.changes.subscribe(function (s) { return _this.update(); });
        this.linksWithHrefs.changes.subscribe(function (s) { return _this.update(); });
        this.update();
    };
    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
        /**
         * @param {?} data
         * @return {?}
         */
        set: function (data) {
            if (Array.isArray(data)) {
                this.classes = (data);
            }
            else {
                this.classes = data.split(' ');
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.update = function () {
        var _this = this;
        if (!this.links || !this.linksWithHrefs || !this.router.navigated)
            return;
        var /** @type {?} */ isActive = this.hasActiveLink();
        this.classes.forEach(function (c) {
            if (c) {
                _this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
            }
        });
    };
    /**
     * @param {?} router
     * @return {?}
     */
    RouterLinkActive.prototype.isLinkActive = function (router) {
        var _this = this;
        return function (link) {
            return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
        };
    };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.hasActiveLink = function () {
        return this.links.some(this.isLinkActive(this.router)) ||
            this.linksWithHrefs.some(this.isLinkActive(this.router));
    };
    RouterLinkActive.decorators = [
        { type: Directive, args: [{
                    selector: '[routerLinkActive]',
                    exportAs: 'routerLinkActive',
                },] },
    ];
    /** @nocollapse */
    RouterLinkActive.ctorParameters = function () { return [
        { type: Router, },
        { type: ElementRef, },
        { type: Renderer, },
    ]; };
    RouterLinkActive.propDecorators = {
        'links': [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],
        'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],
        'routerLinkActiveOptions': [{ type: Input },],
        'routerLinkActive': [{ type: Input },],
    };
    return RouterLinkActive;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  state.
  * *
  * *
  * ```
  * <router-outlet></router-outlet>
  * <router-outlet name='left'></router-outlet>
  * <router-outlet name='right'></router-outlet>
  * ```
  * *
  * A router outlet will emit an activate event any time a new component is being instantiated,
  * and a deactivate event when it is being destroyed.
  * *
  * ```
  * <router-outlet
  * (activate)='onActivate($event)'
  * (deactivate)='onDeactivate($event)'></router-outlet>
  * ```
  * *
 */
var RouterOutlet = (function () {
    /**
     * @param {?} parentOutletMap
     * @param {?} location
     * @param {?} resolver
     * @param {?} name
     */
    function RouterOutlet(parentOutletMap, location, resolver, name) {
        this.parentOutletMap = parentOutletMap;
        this.location = location;
        this.resolver = resolver;
        this.name = name;
        this.activateEvents = new EventEmitter();
        this.deactivateEvents = new EventEmitter();
        parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
    }
    /**
     * @return {?}
     */
    RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };
    Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
        /**
         * @return {?}
         */
        get: function () { return this.location.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
        /**
         * @return {?}
         */
        get: function () { return this.resolver; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
        /**
         * @return {?}
         */
        get: function () { return !!this.activated; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "component", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            return this.activated.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            return this._activatedRoute;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterOutlet.prototype.detach = function () {
        if (!this.activated)
            throw new Error('Outlet is not activated');
        this.location.detach();
        var /** @type {?} */ r = this.activated;
        this.activated = null;
        this._activatedRoute = null;
        return r;
    };
    /**
     * @param {?} ref
     * @param {?} activatedRoute
     * @return {?}
     */
    RouterOutlet.prototype.attach = function (ref, activatedRoute) {
        this.activated = ref;
        this._activatedRoute = activatedRoute;
        this.location.insert(ref.hostView);
    };
    /**
     * @return {?}
     */
    RouterOutlet.prototype.deactivate = function () {
        if (this.activated) {
            var /** @type {?} */ c = this.component;
            this.activated.destroy();
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
        }
    };
    /**
     * @param {?} activatedRoute
     * @param {?} resolver
     * @param {?} injector
     * @param {?} providers
     * @param {?} outletMap
     * @return {?}
     */
    RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this.outletMap = outletMap;
        this._activatedRoute = activatedRoute;
        var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;
        var /** @type {?} */ component = (snapshot._routeConfig.component);
        var /** @type {?} */ factory = resolver.resolveComponentFactory(component);
        var /** @type {?} */ inj = ReflectiveInjector.fromResolvedProviders(providers, injector);
        this.activated = this.location.createComponent(factory, this.location.length, inj, []);
        this.activated.changeDetectorRef.detectChanges();
        this.activateEvents.emit(this.activated.instance);
    };
    RouterOutlet.decorators = [
        { type: Directive, args: [{ selector: 'router-outlet' },] },
    ];
    /** @nocollapse */
    RouterOutlet.ctorParameters = function () { return [
        { type: RouterOutletMap, },
        { type: ViewContainerRef, },
        { type: ComponentFactoryResolver, },
        { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },
    ]; };
    RouterOutlet.propDecorators = {
        'activateEvents': [{ type: Output, args: ['activate',] },],
        'deactivateEvents': [{ type: Output, args: ['deactivate',] },],
    };
    return RouterOutlet;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  *
 * @abstract
 */
var RouteReuseStrategy = (function () {
    function RouteReuseStrategy() {
    }
    /**
     *  Determines if this route (and its subtree) should be detached to be reused later
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldDetach = function (route) { };
    /**
     *  Stores the detached route
     * @abstract
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    RouteReuseStrategy.prototype.store = function (route, handle) { };
    /**
     *  Determines if this route (and its subtree) should be reattached
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldAttach = function (route) { };
    /**
     *  Retrieves the previously stored route
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.retrieve = function (route) { };
    /**
     *  Determines if a route should be reused
     * @abstract
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };
    return RouteReuseStrategy;
}());

var getDOM$1 = __platform_browser_private__.getDOM;

/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctKey}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return this.lift(new FilterOperator(predicate, thisArg));
}
class FilterOperator {
    constructor(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    call(subscriber, source) {
        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    }
}
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
class FilterSubscriber extends Subscriber {
    constructor(destination, predicate, thisArg) {
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
        this.predicate = predicate;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    _next(value) {
        let result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    }
}

/**
*@license
*Copyright Google Inc. All Rights Reserved.
*
*Use of this source code is governed by an MIT-style license that can be
*found in the LICENSE file at https://angular.io/license
*/
/**
 *  *
 * @abstract
 */
var PreloadingStrategy = (function () {
    function PreloadingStrategy() {
    }
    /**
     * @abstract
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    PreloadingStrategy.prototype.preload = function (route, fn) { };
    return PreloadingStrategy;
}());
/**
 *  *
  * *
  * ```
  * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
  * ```
  * *
 */
var PreloadAllModules = (function () {
    function PreloadAllModules() {
    }
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    PreloadAllModules.prototype.preload = function (route, fn) {
        return _catch.call(fn(), function () { return of(null); });
    };
    return PreloadAllModules;
}());
/**
 *  *
  * *
  * This strategy is enabled by default.
  * *
 */
var NoPreloading = (function () {
    function NoPreloading() {
    }
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    NoPreloading.prototype.preload = function (route, fn) { return of(null); };
    return NoPreloading;
}());
/**
 *  The preloader optimistically loads all router configurations to
  * make navigations into lazily-loaded sections of the application faster.
  * *
  * The preloader runs in the background. When the router bootstraps, the preloader
  * starts listening to all navigation events. After every such event, the preloader
  * will check if any configurations can be loaded lazily.
  * *
  * If a route is protected by `canLoad` guards, the preloaded will not load it.
  * *
 */
var RouterPreloader = (function () {
    /**
     * @param {?} router
     * @param {?} moduleLoader
     * @param {?} compiler
     * @param {?} injector
     * @param {?} preloadingStrategy
     */
    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
        this.router = router;
        this.injector = injector;
        this.preloadingStrategy = preloadingStrategy;
        this.loader = new RouterConfigLoader(moduleLoader, compiler);
    }
    
    /**
     * @return {?}
     */
    RouterPreloader.prototype.setUpPreloading = function () {
        var _this = this;
        var /** @type {?} */ navigations = filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });
        this.subscription = concatMap.call(navigations, function () { return _this.preload(); }).subscribe(function (v) { });
    };
    /**
     * @return {?}
     */
    RouterPreloader.prototype.preload = function () { return this.processRoutes(this.injector, this.router.config); };
    /**
     * @return {?}
     */
    RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @param {?} injector
     * @param {?} routes
     * @return {?}
     */
    RouterPreloader.prototype.processRoutes = function (injector, routes) {
        var /** @type {?} */ res = [];
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var c = routes_1[_i];
            // we already have the config loaded, just recurce
            if (c.loadChildren && !c.canLoad && ((c))._loadedConfig) {
                var /** @type {?} */ childConfig = ((c))._loadedConfig;
                res.push(this.processRoutes(childConfig.injector, childConfig.routes));
            }
            else if (c.loadChildren && !c.canLoad) {
                res.push(this.preloadConfig(injector, c));
            }
            else if (c.children) {
                res.push(this.processRoutes(injector, c.children));
            }
        }
        return mergeAll.call(from(res));
    };
    /**
     * @param {?} injector
     * @param {?} route
     * @return {?}
     */
    RouterPreloader.prototype.preloadConfig = function (injector, route) {
        var _this = this;
        return this.preloadingStrategy.preload(route, function () {
            var /** @type {?} */ loaded = _this.loader.load(injector, route.loadChildren);
            return mergeMap.call(loaded, function (config) {
                var /** @type {?} */ c = route;
                c._loadedConfig = config;
                return _this.processRoutes(config.injector, config.routes);
            });
        });
    };
    RouterPreloader.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    RouterPreloader.ctorParameters = function () { return [
        { type: Router, },
        { type: NgModuleFactoryLoader, },
        { type: Compiler, },
        { type: Injector, },
        { type: PreloadingStrategy, },
    ]; };
    return RouterPreloader;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @whatItDoes Contains a list of directives
 * @stable
 */
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
/**
 * @whatItDoes Is used in DI to configure the router.
 * @stable
 */
var ROUTER_CONFIGURATION = new OpaqueToken('ROUTER_CONFIGURATION');
/**
 * @docsNotRequired
 */
var ROUTER_FORROOT_GUARD = new OpaqueToken('ROUTER_FORROOT_GUARD');
var ROUTER_PROVIDERS = [
    Location,
    { provide: UrlSerializer, useClass: DefaultUrlSerializer },
    {
        provide: Router,
        useFactory: setupRouter,
        deps: [
            ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader,
            Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],
            [RouteReuseStrategy, new Optional()]
        ]
    },
    RouterOutletMap,
    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
    RouterPreloader,
    NoPreloading,
    PreloadAllModules,
    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },
];
/**
 * @return {?}
 */
function routerNgProbeToken() {
    return new NgProbeToken('Router', Router);
}
/**
 *  *
  * *
  * RouterModule can be imported multiple times: once per lazily-loaded bundle.
  * Since the router deals with a global shared resource--location, we cannot have
  * more than one router service active.
  * *
  * That is why there are two ways to create the module: `RouterModule.forRoot` and
  * `RouterModule.forChild`.
  * *
  * * `forRoot` creates a module that contains all the directives, the given routes, and the router
  * service itself.
  * * `forChild` creates a module that contains all the directives and the given routes, but does not
  * include the router service.
  * *
  * When registered at the root, the module should be used as follows
  * *
  * ```
  * imports: [RouterModule.forRoot(ROUTES)]
  * })
  * class MyNgModule {}
  * ```
  * *
  * For submodules and lazy loaded submodules the module should be used as follows:
  * *
  * ```
  * imports: [RouterModule.forChild(ROUTES)]
  * })
  * class MyNgModule {}
  * ```
  * *
  * *
  * Managing state transitions is one of the hardest parts of building applications. This is
  * especially true on the web, where you also need to ensure that the state is reflected in the URL.
  * In addition, we often want to split applications into multiple bundles and load them on demand.
  * Doing this transparently is not trivial.
  * *
  * The Angular 2 router solves these problems. Using the router, you can declaratively specify
  * application states, manage state transitions while taking care of the URL, and load bundles on
  * demand.
  * *
  * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an
  * overview of how the router should be used.
  * *
 */
var RouterModule = (function () {
    /**
     * @param {?} guard
     */
    function RouterModule(guard) {
    }
    /**
     *  Creates a module with all the router providers and directives. It also optionally sets up an
      * application listener to perform an initial navigation.
      * *
      * Options:
      * * `enableTracing` makes the router log all its internal events to the console.
      * * `useHash` enables the location strategy that uses the URL fragment instead of the history
      * API.
      * * `initialNavigation` disables the initial navigation.
      * * `errorHandler` provides a custom error handler.
     * @param {?} routes
     * @param {?=} config
     * @return {?}
     */
    RouterModule.forRoot = function (routes, config) {
        return {
            ngModule: RouterModule,
            providers: [
                ROUTER_PROVIDERS,
                provideRoutes(routes),
                {
                    provide: ROUTER_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[Router, new Optional(), new SkipSelf()]]
                },
                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },
                {
                    provide: LocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [
                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION
                    ]
                },
                {
                    provide: PreloadingStrategy,
                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
                        NoPreloading
                },
                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },
                provideRouterInitializer(),
            ],
        };
    };
    /**
     *  Creates a module with all the router directives and a provider registering routes.
     * @param {?} routes
     * @return {?}
     */
    RouterModule.forChild = function (routes) {
        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
    };
    RouterModule.decorators = [
        { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },
    ];
    /** @nocollapse */
    RouterModule.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },
    ]; };
    return RouterModule;
}());
/**
 * @param {?} platformLocationStrategy
 * @param {?} baseHref
 * @param {?=} options
 * @return {?}
 */
function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    if (options === void 0) { options = {}; }
    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :
        new PathLocationStrategy(platformLocationStrategy, baseHref);
}
/**
 * @param {?} router
 * @return {?}
 */
function provideForRootGuard(router) {
    if (router) {
        throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
    }
    return 'guarded';
}
/**
 *  *
  * *
  * ```
  * imports: [RouterModule.forChild(ROUTES)],
  * providers: [provideRoutes(EXTRA_ROUTES)]
  * })
  * class MyNgModule {}
  * ```
  * *
 * @param {?} routes
 * @return {?}
 */
function provideRoutes(routes) {
    return [
        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },
        { provide: ROUTES, multi: true, useValue: routes },
    ];
}
/**
 * @param {?} ref
 * @param {?} urlSerializer
 * @param {?} outletMap
 * @param {?} location
 * @param {?} injector
 * @param {?} loader
 * @param {?} compiler
 * @param {?} config
 * @param {?=} opts
 * @param {?=} urlHandlingStrategy
 * @param {?=} routeReuseStrategy
 * @return {?}
 */
function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
    if (opts === void 0) { opts = {}; }
    var /** @type {?} */ router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
    if (urlHandlingStrategy) {
        router.urlHandlingStrategy = urlHandlingStrategy;
    }
    if (routeReuseStrategy) {
        router.routeReuseStrategy = routeReuseStrategy;
    }
    if (opts.errorHandler) {
        router.errorHandler = opts.errorHandler;
    }
    if (opts.enableTracing) {
        var /** @type {?} */ dom_1 = getDOM$1();
        router.events.subscribe(function (e) {
            dom_1.logGroup("Router Event: " + ((e.constructor)).name);
            dom_1.log(e.toString());
            dom_1.log(e);
            dom_1.logGroupEnd();
        });
    }
    return router;
}
/**
 * @param {?} router
 * @return {?}
 */
function rootRoute(router) {
    return router.routerState.root;
}
/**
 * @param {?} router
 * @param {?} ref
 * @param {?} preloader
 * @param {?} opts
 * @return {?}
 */
function initialRouterNavigation(router, ref, preloader, opts) {
    return function (bootstrappedComponentRef) {
        if (bootstrappedComponentRef !== ref.components[0]) {
            return;
        }
        router.resetRootComponentType(ref.componentTypes[0]);
        preloader.setUpPreloading();
        if (opts.initialNavigation === false) {
            router.setUpLocationChangeListener();
        }
        else {
            router.initialNavigation();
        }
    };
}
/**
 * A token for the router initializer that will be called after the app is bootstrapped.
 *
 * @experimental
 */
var ROUTER_INITIALIZER = new OpaqueToken('Router Initializer');
/**
 * @return {?}
 */
function provideRouterInitializer() {
    return [
        {
            provide: ROUTER_INITIALIZER,
            useFactory: initialRouterNavigation,
            deps: [Router, ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]
        },
        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },
    ];
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @stable
 */
var VERSION$3 = new Version('3.4.3');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the router package.
 */

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

let AppComponent = class AppComponent {
};
AppComponent = __decorate([
    Component({
        selector: 'pm-app',
        template: `<router-outlet></router-outlet>
    <pm-footer></pm-footer>`
    })
], AppComponent);

class MenuItem {
    constructor(name, link, customClass, externalLink = false) {
        this.name = name;
        this.link = link;
        this.customClass = customClass;
        this.externalLink = externalLink;
    }
}

let HeaderComponent = class HeaderComponent {
    constructor() {
        this.theme = "theme-default";
        this.menuItems = [
            new MenuItem("Slamby", "/home", "logo", false),
            new MenuItem("Pricing", "/pricing", "", false),
            new MenuItem("Support", "/support", "", false),
            new MenuItem("For developers", "https://developers.slamby.com", "", true)
        ];
        this.isOpen = false;
        this.menuOpen = function () {
            if (this.isOpen) {
                this.isOpen = false;
            }
            else {
                this.isOpen = true;
            }
        };
    }
};
__decorate([
    Input()
], HeaderComponent.prototype, "theme", void 0);
HeaderComponent = __decorate([
    Component({
        selector: 'pm-header',
        template: `<section [class.sla-nav-menu-opened]="isOpen"><div class="container"><div class="sl-main"><ul class="sla-nav-header"><li class="logo"><a [routerLink]="['/home']"><span>Slamby</span></a></li><li class="menu-open-btn" (click)="menuOpen()"><a><i class="fa fa-bars" aria-hidden="true"></i></a></li></ul><ul class="sla-nav-menu-items"><li class="{{item.customClass}}" *ngFor="let item of menuItems"><a [routerLink]="[item.link]" template="ngIf !item.externalLink"><span>{{item.name}}</span></a><a *ngIf="item.externalLink" href="{{item.link}}" target="_blank"><span>{{item.name}} <i class="fa fa-external-link sla-external-link" aria-hidden="true"></i></span></a></li></ul></div></div></section><div [class.hidden-block]="isOpen"></div>`,
        styles: [`section{background-color:rgba(0,0,0,0.85);position:relative;height:44px;z-index:9999}section .sl-main{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin:0;padding:0}@media (min-width: 992px){section .sl-main{float:left;width:100%}}.logo{font-family:slamby-logo}.list,.sla-nav-header,.sla-nav-menu-items{margin:0;padding:0;list-style:none;display:flex;justify-content:space-between}.list li,.sla-nav-header li,.sla-nav-menu-items li{display:inline-block;position:relative;height:44px}.list li a,.sla-nav-header li a,.sla-nav-menu-items li a,.list li a:hover,.sla-nav-header li a:hover,.sla-nav-menu-items li a:hover,.list li a:active,.sla-nav-header li a:active,.sla-nav-menu-items li a:active{padding:0 15px 0 15px;text-decoration:none;color:white;font-size:16px;line-height:2.75;font-weight:300}.list li a .sla-external-link,.sla-nav-header li a .sla-external-link,.sla-nav-menu-items li a .sla-external-link,.list li a:hover .sla-external-link,.sla-nav-header li a:hover .sla-external-link,.sla-nav-menu-items li a:hover .sla-external-link,.list li a:active .sla-external-link,.sla-nav-header li a:active .sla-external-link,.sla-nav-menu-items li a:active .sla-external-link{font-size:12px}.sla-nav-header .menu-open-btn{cursor:pointer}@media (max-width: 991px){.sla-nav-menu-items{display:none}section.sla-nav-menu-opened{position:fixed;top:0px;height:100%;width:100%;overflow-y:hidden}section.sla-nav-menu-opened .sla-nav-menu-items{display:block}section.sla-nav-menu-opened .sla-nav-menu-items .logo{display:none !important}section.sla-nav-menu-opened .sla-nav-menu-items li{display:block !important;width:100%}section.sla-nav-menu-opened .sla-nav-menu-items li a{display:block;width:100%}section.sla-nav-menu-opened .sla-nav-menu-items li:hover{background-color:rgba(255,255,255,0.27)}.hidden-block{position:relative;display:block;height:44px;width:100%}}@media (min-width: 992px){.sla-nav-header{display:none}}
`]
    })
], HeaderComponent);

let FooterComponent = class FooterComponent {
};
FooterComponent = __decorate([
    Component({
        selector: 'pm-footer',
        template: `<div class="container">
    <div class="footer">
        <div class="message">Slamby 2016</div>
        <ul class="links">
            <li><a href="https://github.com/slamby" target="_blank">Github <i class="fa fa-external-link sla-external-link" aria-hidden="true"></i></a></li>
            <li><a href="https://developers.slamby.com" target="_blank">Slamby Developers <i class="fa fa-external-link sla-external-link" aria-hidden="true"></i></a></li>
            <li><a [routerLink]="['/partners']">Partners</a></li>
            <li><a [routerLink]="['/company']">Company</a></li>
            <li><a [routerLink]="['/legal']">Legal</a></li>
        </ul>
    </div>
</div>`,
        styles: [`.footer{margin-left:-15px;margin-right:-15px}.footer:before,.footer:after{content:" ";display:table}.footer:after{clear:both}.footer .message{position:relative;min-height:1px;padding-left:15px;padding-right:15px;padding-top:15px;margin-top:30px;color:grey;font-weight:100}@media (min-width: 768px){.footer .message{float:left;width:100%}}.footer .links{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:5px}@media (min-width: 768px){.footer .links{float:left;width:100%}}.footer .links li{display:inline-block;text-decoration:none;margin:0px 15px 0px 0px;font-weight:100}.footer .sla-external-link{padding-left:3px;font-size:10px}
`]
    })
], FooterComponent);

let NotFoundPageComponent = class NotFoundPageComponent {
};
NotFoundPageComponent = __decorate([
    Component({
        template: `<pm-header></pm-header><div class="container notFoundModule"><div class="row"><div class="col-md-12"><div class="box"><div class="icon"><i class="fa fa-frown-o" area-hidden="area-hidden"></i></div><h1>Page not found</h1></div></div></div></div>`,
        styles: [`.notFoundModule{text-align:center}.notFoundModule .box{margin-top:50px}.notFoundModule .box .icon i{font-size:70px;font-weight:100}
`]
    })
], NotFoundPageComponent);

let ThankYouComponent = class ThankYouComponent {
};
ThankYouComponent = __decorate([
    Component({
        template: `<pm-header></pm-header><div class="container notFoundModule"><div class="row"><div class="col-md-12"><div class="box"><div class="icon"><i class="fa fa-smile-o"></i></div><h1>Thank You</h1><p class="lead">Please check your email and confirm your request.</p></div></div></div></div>`,
        styles: [`.notFoundModule{text-align:center}.notFoundModule .box{margin-top:50px}.notFoundModule .box .icon i{font-size:70px;font-weight:100}
`]
    })
], ThankYouComponent);

let InsightComponent = class InsightComponent {
};
InsightComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<section class="header">
    <div class="container">
        <div class="message">
            <div class="head">
                <h1>A smart way to work</h1>
                <p class="lead">
                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quisquam accusamus quia, illo unde voluptate voluptates saepe. Commodi, molestias nihil laudantium officia hic. Hic dignissimos recusandae ullam, error fugit, dolores tempore!
                </p>
                <a href="https://insight.slamby.com" class="btn btn-default" angulartics2On="click" angularticsEvent="Download General" angularticsCategory="Insight" angularticsProperties="{label: 'General'}">Download</a>
                <div class="list">
                    <a href="https://instight.slamby.com/mac">Download for Mac</a>
                    <a href="https://instight.slamby.com/windows">Download for Windows</a>
                    <a href="https://instight.slamby.com/linux">Download for Linux</a>
                </div>
                <div class="github">
                    <a href="https://github.com/slamby/slamby-insight" target="_blank"><i class="fa fa-github" aria-hidden="true"></i></a>
                </div>
            </div>
        </div>
    </div>
</section>

<section>
    <div class="container">
        <form action="//slamby.us8.list-manage.com/subscribe/post?u=2cc8f967bed26c6531c44c771&amp;id=f805acd7c9" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate form" target="_blank" novalidate>
            <div class="form-group">
                <label for="mce-EMAIL">Email Address<span class="asterisk">*</span></label>
                <input type="email" value="" name="EMAIL" class="form-control" id="mce-EMAIL">
            </div>
            <div class="form-group">
                <label for="mce-FNAME">First Name </label>
                <input type="text" value="" name="FNAME" class="form-control" id="mce-FNAME">
            </div>
            <div class="form-group">
                <input type="submit" value="Submit" class="btn btn-default" angulartics2On="click" angularticsEvent="NewsletterSignUp" angularticsCategory="Marketing">
            </div>
        </form>
    </div>
</section>`,
        styles: [`section.header{background:#2e7bcf url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/insight/images/header.jpg") 0 0 repeat;margin-top:-50px}section.header .message{margin-left:-15px;margin-right:-15px}section.header .message:before,section.header .message:after{content:" ";display:table}section.header .message:after{clear:both}section.header .message .head{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;margin-bottom:5em}@media (min-width: 992px){section.header .message .head{float:left;width:66.66667%}}section.header .message .head h1{color:white;font-size:50px}section.header .message .head p.lead{color:white}section.header .message .head a.btn-default{background-color:transparent !important;border-color:white;color:white}section.header .message .head a.btn-default:hover{border-color:rgba(255,255,255,0.7)}section.header .message .head .list{margin-top:15px}section.header .message .head .list a{display:inline-block;color:white}section.header .message .head .list a:not(:last-of-type){margin-right:15px}section.header .message .head .github{margin-top:70px}section.header .message .head .github i{color:white;font-size:50px}
`]
    })
], InsightComponent);

let HomeComponent = class HomeComponent {
};
HomeComponent = __decorate([
    Component({
        template: `<!-- Html meta mixin--><!-- Link mixin--><!-- Script mixin for javascript links--><!-- cdn img tag with fallback--><pm-header></pm-header><section class="header"><div class="container"><div class="message"><div class="head"><h1>Smart machine learning for classifieds</h1><p class="lead">Slamby is a great tool for classifieds to do perfect machine learning. Category recommendation, keyword-extraction, duplicate search, matchmaking.</p><p class="lead">Open-source, SaaS, on-premise install.</p></div><div class="signup-form"><h2>Get more information</h2><form class="validate form" action="//slamby.us8.list-manage.com/subscribe/post?u=2cc8f967bed26c6531c44c771&amp;amp;id=74a478b46d" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form"><div class="form-group"><input class="form-control" type="email" required="required" value="" name="EMAIL" placeholder="E-mail address" angulartics2On="click" angularticsCategory="home-page" angularticsEvent="newsletter-emailField-clicked" id="mce-EMAIL"/></div><div class="form-group"><input class="form-control" type="text" required="required" value="" name="FNAME" placeholder="First name" id="mce-FNAME"/></div><div class="form-group"><input class="form-control" type="text" required="required" value="" placeholder="Last name" id="mce-LNAME"/></div><div class="form-group"><input class="btn btn-default form-control" type="submit" required="required" value="Get more        information" angulartics2On="click" angularticsCategory="Marketing" angularticsEvent="NewsletterSignUp-clicked"/></div></form></div></div></div></section><section class="customers"><div class="container"><div class="holder"><div class="item jofogas"></div><div class="item schibsted"></div><div class="item lazada"></div></div></div></section>`,
        styles: [`section.header{background: url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/header.jpg") 0 0 repeat;background-position:center;margin-top:-50px}section.header .message{margin-left:-15px;margin-right:-15px;padding-bottom:5em}section.header .message:before,section.header .message:after{content:" ";display:table}section.header .message:after{clear:both}section.header .message .head{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;margin-bottom:5em}@media (min-width: 992px){section.header .message .head{float:left;width:50%}}section.header .message .head h1{color:white;font-size:50px}section.header .message .head p.lead{color:white}section.header .message .head a.btn-default{background-color:transparent !important;border-color:white;color:white}section.header .message .head a.btn-default:hover{border-color:rgba(255,255,255,0.7)}section.header .message .head .list{margin-top:15px}section.header .message .head .list a{display:inline-block;color:white}section.header .message .head .list a:not(:last-of-type){margin-right:15px}section.header .message .head .github{margin-top:70px}section.header .message .head .github i{color:white;font-size:50px}section.header .message .signup-form{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;color:white}@media (min-width: 992px){section.header .message .signup-form{float:left;width:33.33333%}}@media (min-width: 992px){section.header .message .signup-form{margin-left:8.33333%}}section.header .message .signup-form .form-group{margin-top:5px}.customers{margin-top:30px}.customers .holder{margin-left:-15px;margin-right:-15px}.customers .holder:before,.customers .holder:after{content:" ";display:table}.customers .holder:after{clear:both}.customers .holder .item{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;min-height:150px}@media (min-width: 768px){.customers .holder .item{float:left;width:33.33333%}}.customers .holder .jofogas{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/jofogas.jpg") 0 0 no-repeat;background-size:60%;background-position:center}.customers .holder .schibsted{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/schibsted.png") 0 0 no-repeat;background-size:60%;background-position:center}.customers .holder .lazada{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/lazada.png") 0 0 no-repeat;background-size:60%;background-position:center}
`]
    })
], HomeComponent);

let SubmenuComponent = class SubmenuComponent {
};
SubmenuComponent = __decorate([
    Component({
        selector: 'submenu',
        template: `<div class="container">
    <div class="row">
        <div class="col-md-12">
            <a href="#">Overview</a>
            <a href="#">Download</a>
            <a href="#">Technical</a>
        </div>
    </div>
</div>`,
        styles: [`.container .row{padding:30px 0px 30px 0px;text-align:center}@media (min-width: 768px){.container .row{text-align:right}}a:not(:last-of-type){margin-right:15px}
`]
    })
], SubmenuComponent);

class Price {
    constructor(name, tier, core, memory, storage, wholesale, technicalFee, slambyLicenseFee, retailPrice) {
        this.name = name;
        this.tier = tier;
        this.core = core;
        this.memory = memory;
        this.storage = storage;
        this.wholesale = wholesale;
        this.technicalFee = technicalFee;
        this.slambyLicenseFee = slambyLicenseFee;
        this.retailPrice = retailPrice;
    }
}

let PricingComponent = class PricingComponent {
    constructor() {
        this.pricingEurope = [
            new Price("a1", "basic", 1, 2, 40, 17.57, 8.79, 45, 71.36),
            new Price("a2", "basic", 2, 4, 60, 47.06, 23.53, 90, 160.59),
            new Price("a3", "basic", 4, 7, 120, 117.95, 294.88, 180, 356.93),
            new Price("d3 v2", "standard", 4, 14, 200, 165.64, 82.82, 180, 438.46),
            new Price("d4 v2", "standard", 8, 28, 400, 331.28, 165.64, 360, 856.92),
            new Price("d11 v2", "standard", 2, 14, 100, 116.07, 58.04, 90, 264.11),
            new Price("d13 v2", "standard", 8, 56, 400, 464.91, 232.46, 360, 1057.37),
            new Price("d14 v2", "standard", 16, 112, 800, 929.83, 464.92, 720, 2114.75),
        ];
        this.pricingAsian = [
            new Price("a1", "basic", 1, 2, 40, 23.21, 11.61, 45, 79.82),
            new Price("a2", "basic", 2, 4, 60, 47.06, 23.53, 90, 179 - 40),
            new Price("a3", "basic", 4, 7, 120, 117.95, 294.88, 180, 398.34),
            new Price("d3 v2", "standard", 4, 14, 200, 165.64, 82.82, 180, 477.3),
            new Price("d4 v2", "standard", 8, 28, 400, 331.28, 165.64, 360, 953.85),
            new Price("d11 v2", "standard", 2, 14, 100, 116.07, 58.04, 90, 269.76),
            new Price("d13 v2", "standard", 8, 56, 400, 464.91, 232.46, 360, 1079.96),
            new Price("d14 v2", "standard", 16, 112, 800, 929.83, 464.92, 720, 2159.93),
        ];
        this.test = [1, 2, 3, 4, 5];
    }
};
PricingComponent = __decorate([
    Component({
        template: `<pm-header></pm-header><section class="main"><div class="container"><div class="body"><div class="main-message"><h1>45 € / core / month</h1><p class="lead">Start using Slamby for a price of a cup of coffee per core. Use it as a SaaS or install it on your machine.</p><p class="lead">No query limit, no memory limit</p><p><a class="btn btn-default btn-lg" [routerLink]="['/getting-started']" angulartics2On="click" angularticsEvent="getting-started-click" angularticsCategory="pricing-page">Getting started</a></p></div></div></div></section><div class="container"><div class="row"><div class="col-md-12"><h1 class="page-header">Pricing</h1><p class="lead">Our product is available for both private hosting and SaaS. You can easily download and install it on your machine, or purchase it as a monthly service.</p><p class="lead">For private hosting, you can download and install Slamby API and register it with an open-source license for free, and you can purchase a core-based license for commercial use.</p><p class="lead">For SaaS, you can select a required instance size and buy it with a monthly payment. The prices cover the standard Slamby license per core + hosting fee.</p></div></div></div><div class="container"><div class="row"><div class="col-md-12"><h1 class="page-header">Core pricing</h1></div><div class="col-md-6"><p class="lead">Standard Slamby API pricing, based on the  processor core number. There is no query, usage, storage and memory limitation.</p></div><div class="col-md-6"><table class="table table-striped"><thead><tr><th>Name</th><th>Description</th><th>price</th></tr></thead><tbody><tr><td>1 core license</td><td>unlimited memory, unlimited storage</td><td>45 € / processor core / month</td></tr></tbody></table></div></div></div><div class="container"><div class="row"><div class="col-md-12"><h2 class="page-header">Support</h2></div><div class="col-md-6"><p class="lead">For professional use select one of our available support options based on the available communication channels and SLA.</p><p class="lead">Currently, we have three type of support options. Each Slamby instance has a basic support option that includes community-based - forum support.</p><p><a href="mailto:sales@slamby.com" angulartics2On="click" angularticsCategory="pricing-page" angularticsEvent="support-get-mode-information">Get more information</a></p><p>Community support:<a href="https://groups.google.com/forum/#!forum/slamby" target="_blank">https://groups.google.com/forum/#!forum/slamby</a></p></div><div class="col-md-6"><table class="table table-striped"><thead><tr><th>Name</th><th>Description</th><th>price</th></tr></thead><tbody><tr><td>Basic</td><td><a href="https://groups.google.com/forum/#!forum/slamby" target="_blank">Community only</a>,no SLA</td><td>Free</td></tr><tr><td>Professional</td><td>Next workday, email</td><td>2000 € yearly / instance</td></tr><tr><td>Production</td><td>Direct developer and technical access, 5 hours SLA, email, skype, phone.</td><td>6000 € yearly / instance</td></tr></tbody></table></div><div class="container pricing"><div class="row"><div class="col-md-12"><h2 class="page-header">SaaS pricing</h2><p class="lead">Purchase Slamby as software as a service. Select one of our hosting locations and one suitable size of the instance. Prices based on the resource size + core based Slamby license fee.</p><p><a class="btn btn-default" href="mailto:sales@slamby.com" angulartics2On="click" angularticsCategory="pricing-page" angularticsEvent="sas-contact-sales">Contact sales</a></p><p>Prices are in € per month</p><h3>European</h3><table class="table table-striped"><thead><tr><th>Name</th><th>Core</th><th>Memory</th><th class="hidden-xs">Storage</th><th class="hidden-xs hiddne-sm">Technical fee</th><th class="hidden-xs hidden-sm">License fee</th><th>Retail price</th></tr></thead><tbody><tr *ngFor="let item of pricingEurope"><td>{{item.name}}</td><td>{{item.core}}</td><td>{{item.memory}}</td><td class="hidden-xs">{{item.storage}}</td><td class="hidden-xs hidden-sm">{{item.technicalFee}} €</td><td class="hidden-xs hidden-sm">{{item.slambyLicenseFee}} €</td><td>{{item.retailPrice}} €</td></tr></tbody></table></div></div><div class="row"><div class="col-md-12"><h3>Asian</h3><table class="table table-striped"><thead><tr><th>Name</th><th>Core</th><th>Memory</th><th class="hidden-xs">Storage</th><th class="hidden-xs hiddne-sm">Technical fee</th><th class="hidden-xs hidden-sm">License fee</th><th>Retail price</th></tr></thead><tbody><tr *ngFor="let item of pricingAsian"><td>{{item.name}}</td><td>{{item.core}}</td><td>{{item.memory}}</td><td class="hidden-xs">{{item.storage}}</td><td class="hidden-xs hidden-sm">{{item.technicalFee}} €</td><td class="hidden-xs hidden-sm">{{item.slambyLicenseFee}} €</td><td>{{item.retailPrice}} €</td></tr></tbody></table></div></div></div></div></div>`,
        styles: [`section.main{margin-top:-50px;background:linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.3)),url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/pricing/bg2.jpg");background-repeat:repeat}section.main .body{margin-left:-15px;margin-right:-15px}section.main .body:before,section.main .body:after{content:" ";display:table}section.main .body:after{clear:both}section.main .body .main-message{position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;background-color:rgba(255,255,255,0.97);margin-top:13em;margin-bottom:9em}@media (min-width: 768px){section.main .body .main-message{float:left;width:66.66667%}}@media (min-width: 992px){section.main .body .main-message{float:left;width:50%}}.pricing table td:first-of-type{text-transform:capitalize}.pricing table td:last-of-type{font-weight:500}
`]
    })
], PricingComponent);

let GettingStartedComponent = class GettingStartedComponent {
};
GettingStartedComponent = __decorate([
    Component({
        template: `<pm-header></pm-header><div class="container"><div class="menu"><!--.list-groupa(pageScroll class="list-group-item") API install
a(pageScroll class="list-group-item") API activation
a(pageScroll class="list-group-item") Slamby Insight
a(pageScroll class="list-group-item") Integration
a(pageScroll class="list-group-item") Documentation
a(pageScroll class="list-group-item") Support--></div><div class="body"><h1>Getting started</h1><p class="lead">Welcome to Slamby. Congratulation, you made the very first step to work with our awesome products. You are almost done, but before getting started working with your Slamby product, here are a few useful information.</p><h2>API install</h2><p>You can use your Slamby API as a SaaS, or you can download, and host is by yourself. When you want to host it by yourself, the first thing you need to manage is the installation. To install Slamby API, please check the product readme and the installation guide.</p><p>Product documentation: <a href="https://github.com/slamby/slamby-api" target="_blank">https://github.com/slamby/slamby-api</a></p><p>Using Docker Compose, here are the installation steps:</p><ol><li>Install Docker on your machine: <a href="https://docs.docker.com/engine/installation" target="">Official Docker installation guide</a>  </li><li>Install Docker Compose on your machine (minimum 1.9.0 required): <a href="https://docs.docker.com/compose/install" target="_blank">Official Docker Compose installation guide</a></li><li>Download our Docker Compose file<br><code>$ curl -L "https://github.com/slamby/slamby-api/releases/download/v1.2.0/docker-compose.yml" > docker-compose.yml </code></li><li>Compose the containers (run next to the compose file)<br><pre>$ docker-compose up -d </pre></li><li>Your server is installed. Check that if it's working correctly </li></ol><h2>API activation</h2><p>Open your Slamby API server at http://api_url/setup.</p><p>Great, you have an installed Slamby API. Now your first step is the activation process.<br>During the setup process you need to:</p><ul><li>Request a Slamby License, </li><li>Copy your Slamby API License, </li><li>and set the secret (password) for your Slamby API. </li><li>Continue with the API activation.</li></ul><p>License</p><p>For open-source projects, you can use an open-source license for free, or for commercial purpose you can use a commercial license.</p><p>For open-source license, you can request one from the setup wizard directly by typing your e-mail address and click the Request a License button. Our license service will generate an open-sourced license for you and will send it via email to the given email address.</p><p>When your product or company is not open-sourced you cannot use Slamby API with open-source license; you need to purchase a commercial license. The pricing is based on the processor core number.</p><p>For pricing details, please check our pricing <a href="https://www.slamby.com/pricing">https://www.slamby.com/pricing</a></p><p>For purchasing a commercial license contact our <a href="sales@slamby.com">sales@slamby.com</a></p><h2>Using Slamby Insight to manage your API</h2><p>For you Slamby API we have an excellent desktop application that makes the management jobs smoother, faster and easier. You can download it from here:</p><p> <a class="btn btn-default" href="https://insight.slamby.com/download" angulartics2On="click" angularticsCategory="getting-started-page" angularticsEvent="insight-download-btn">Download.</a></p><p>For more information about how to use Insight check the online tutorial here: <a href="https://developers.slamby.com/docs/Insight/" target="_blank">https://developers.slamby.com/docs/Insight/</a></p><h2>Integration (SDKs)</h2><p>Now you have a working Slamby API, but how can you integrate it into your business processes? Slamby API has a very detailed Rest API that you can easily manage. For the full API documentation, please check the API developers page here: <a href="https://developers.slamby.com/docs/API/" target="_blank">https://developers.slamby.com/docs/API/</a></p><p>A lovely gift from Slamby</p><p>We would like to make your job easier; that's why we work on five different SDKs. Please check the available versions, sources, and the readmes.</p><table class="table table-striped"><thead><tr><td>SDK Name</td><td>Download link and readme</td></tr></thead><tbody><tr><td>.Net</td><td><a href="https://github.com/slamby/slamby-sdk-net" target="_blank">https://github.com/slamby/slamby-sdk-net</a></td></tr><tr><td>JavaScript</td><td><a href="https://github.com/slamby/slamby-sdk-javascript" target="_blank">https://github.com/slamby/slamby-sdk-javascript</a> </td></tr><tr><td>Python</td><td><a href="https://github.com/slamby/slamby-sdk-python" target="_blank">https://github.com/slamby/slamby-sdk-python</a></td></tr><tr><td>PHP</td><td><a href="https://github.com/slamby/slamby-sdk-php" target="_blank">https://github.com/slamby/slamby-sdk-php</a></td></tr><tr><td>Angular 2</td><td><a href="https://github.com/slamby/slamby-sdk-angular2" target="_blank">https://github.com/slamby/slamby-sdk-angular2</a> </td></tr></tbody></table><h2>Product documentation</h2><p>Here we go, all the Slamby products are now installed. But how can you use them? When you do an API integration, or you need to know specific settings, then please check the API documentation on our developer site: <a href="https://developers.slamby.com/docs/API" target="_blank">https://developers.slamby.com/docs/API</a> <br/> or, check the other products documentation as well <a href="https://developers.slamby.com" target="_blank">https://developers.slamby.com</a></p><h2>Support</h2><p>Slamby support mailing list for basic support: <a href="https://groups.google.com/forum/#!forum/slamby" target="_blank">https://groups.google.com/forum/#!forum/slamby</a></p><p>Each Slamby license includes a basic support with absolutely no SLA. This means you can access our support via our online support mailing list and you can ask for help from our community. In this case, the reaction time is not guaranteed, and there is no direct access to our technical experts.</p><p>When you need a professional support, please purchase one. Each professional support contains short-time SLAs and response time. Each professional support gives you direct access to our technical experts.</p><p>For more details, please check our available support options here: <a href="https://www.slamby.com/support" target="_blank">https://www.slamby.com/support</a></p><p>And contact our sales: <a href="sales@slamby.com">sales@slamby.com</a></p></div></div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:16.66667%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:83.33333%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], GettingStartedComponent);

let PartnersComponent = class PartnersComponent {
};
PartnersComponent = __decorate([
    Component({
        template: `<!-- Html meta mixin--><!-- Link mixin--><!-- Script mixin for javascript links--><!-- cdn img tag with fallback--><pm-header></pm-header><div class="container"><div class="row"><div class="col-md-12"><h1>Partners</h1><p class="lead">Creating a better product requires teamwork, partnerships and collaboration. We are grateful to work together with such amazing partners.</p></div></div><div class="row"><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/microsoft.png'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/microsoft.png" alt="Microsoft"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/icma.jpg'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/icma.jpg" alt="ICMA"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/tradehouse.png'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/tradehouse.png" alt="Hungarian Tradehouse"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/digital-factory.png'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/digital-factory.png" alt="Digital Factory"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/fiware.png'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/fiware.png" alt="Fiware"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/ceubs.jpg'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ceubs.jpg" alt="CEU Business School"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/ceed-tech.png'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ceed-tech.png" alt="CEED Tech"/></div><div class="item"><img class="img-responsive" onerror="this.onerror=null;this.src='/assets/images/partners/ce-en.jpg'" src="https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ce-en.jpg" alt="CE EN"/></div></div></div>`,
        styles: [`.item{position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;padding:30px}@media (min-width: 768px){.item{float:left;width:50%}}@media (min-width: 992px){.item{float:left;width:25%}}
`]
    })
], PartnersComponent);

let CompanyComponent = class CompanyComponent {
    constructor() {
        this.join = function () {
            alert("Ok");
        };
    }
};
CompanyComponent = __decorate([
    Component({
        template: `<pm-header theme="theme-light"></pm-header>

<section class="main">
    <div class="container">
        <div class="message">
            <h1>Hi<br>we are Slamby</h1>
            <p class="lead">Hard work, great team, gorgeous vision. Building the best data management products from the heart.</p>
        </div>
    </div>
</section>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Our vision</h2>
            <p class="lead">We are passionate in creating the best data processing solutions. Following our vision, we are working to become the biggest data processing center over Europe.</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h2>From the begining</h2>
            <p class="lead">Slamby was started in 2011, and officially incorporated on 11th October 2013.</p>
            <p class="lead">Our first vision was to build a sophisticated, smart technology that by reading and understanding written text - can protect children from adult online content. Building the first machine-learning technology Slamby realized its capability to extend its market, providing improved data-processing solutions for industrial clients.</p>
           <p class="lead">In 2013 Slamby continued its RnD activity and built several products to international companies.</p>
           <p class="lead">In 2014 Slamby released its first machine learning solution for e-commerce market, it was called Slamby Classifier - the first truly language independent classification engine with high accuracy level.</p>
           <p class="lead">In 2015 Slamby became a significant global data processing solution provider, serving clients over 9 countries.</p>
           <p class="lead">In 2016 Slamby continued its expansion with increased RnD activity & product development. We changed our product development strategy, transforming our products into open-source, providing a wide range of free solutions that make us even better. Instead of providing a shared solution, we continue our developments creating the best personalized, dedicated data processing servers serving both cloud and on-premise needs as well.</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <h2>Join us</h2>
            <p class="lead">We are looking for passionate talents. If you like to join us, please check our latest available positions, or schedule an appointment to meet the Team.</p>
            <p>
                <a href="mailto:jobs@slamby.com" class="btn btn-default btn-lg" angulartics2On="click" angularticsCategory="company-page" angularticsEvent="join-btn-pushed">Join</a>
            </p>
        </div>
    </div>
</div>`,
        styles: [`.main{background:linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.5)),url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/company/team.jpg") 0 0 no-repeat;background-size:cover;margin-top:-50px;padding-top:400px;padding-bottom:50px}.main .message{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;color:white;background-color:rgba(0,0,0,0.4)}@media (min-width: 992px){.main .message{float:left;width:50%}}
`]
    })
], CompanyComponent);

let PrivacyPolicyComponent = class PrivacyPolicyComponent {
};
PrivacyPolicyComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>Slamby website privacy policy</h1>
        <p class="lead">Legal information & notices</p>
        <h2>General</h2>
        <p>Slamby operates https://www.slamby.com, https://developers.slamby.com (the "Sites"). This page informs you of our policies regarding the collection, use and disclosure of Personal Information we receive from users of the Sites.</p>
        <p>We use your Personal or Company Information only for providing and improving the Sites, our products, and our services. By using the Sites, you agree to the collection and use of information in accordance with this policy.</p>
        <h2>Information collection and use</h2>
        <p>While using our Site, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you. Personally, identifiable information may include but is not limited to your name ("Personal Information").</p>
        <p>We collect information from you when you register on our site, subscribe to our newsletter or fill out any online form.</p>
        <p>When ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, company/business details or mailing address. You may, however, visit our site anonymously.</p>
        <h2>What information do we collect?</h2>
        <p>We collect information from you when you register on our site, subscribe to our newsletter or fill out any online form.</p>
        <p>When ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, company/business details or mailing address. You may, however, visit our site anonymously.</p>
        <h2>Log data</h2>
        <p>Like many site operators, we collect information that your browser sends whenever you visit our Site ("Log Data"). This Log Data may include information such as your computer's Internet Protocol ("IP") address, browser type, browser version, the pages of our Site that you visit, the time and date of your visit, the time spent on those pages and other statistics.</p>
        <p>In addition, we may use third-party services such as Google Analytics that collect, monitor and analyze this data.</p>
        <h2>Communications</h2>
        <p>We may use your Personal Information to contact you with newsletters, marketing or promotional materials.</p>
        <h2>Do we use cookies?</h2>
        <p>Yes, we do. Cookies are files with small amount of data, which may include an anonymous unique identifier.</p>
        <p>Cookies are sent to your browser from a website and stored on your computer's hard drive.</p>
        <p>Like many sites, we use "cookies" to collect information. You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Site.</p>
        <h2>How do we use the collected data?</h2>
        <p>Any collected information from you may be used in one of the following ways:</p>
        <ul>
            <li>To personalize your experience</li>
            <li>To improve our websites</li>
            <li>To improve customer service</li>
            <li>To automated emails for administrative purpose</li>
            <li>To send surveys, or promotion emails</li>
            <li>To send newsletters</li>
        </ul>
        <p>Your provided email address may be used to send you information, respond to inquiries.</p>
        <h2>Security</h2>
        <p>The security of your Personal Information is important to us, but remember that no method of transmission over the Internet, or method of electronic storage, is 100% secure. While we strive to use commercially acceptable means to protect your Personal Information, we cannot guarantee its absolute security.</p>
        <h2>Changes</h2>
        <p>This Privacy Policy is effective as of (add date) and will remain in effect except with respect to any changes in its provisions in the future, which will be in effect immediately after being posted on this page.</p>
        <p>We reserve the right to update or change our Privacy Policy at any time and you should check this Privacy Policy periodically. Your continued use of the Service after we post any modifications to the Privacy Policy on this page will constitute your acknowledgment of the modifications and your consent to abide and be bound by the modified Privacy Policy.</p>
        <p>If we make any material changes to this Privacy Policy, we will notify you either through the email address you have provided us or by placing a prominent notice on our website.</p>
        <h2>Consent</h2>
        <p>By using our Sites, you consent to our privacy policy.</p>
        <h2>Contact us</h2>
        <p>If you have any questions about this Privacy Policy, please contact us. <a href="mailto:hello@slamby.com">hello@slamby.com</a></p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], PrivacyPolicyComponent);

let LegalMenuComponent = class LegalMenuComponent {
};
LegalMenuComponent = __decorate([
    Component({
        selector: 'legalMenu',
        template: `<div class="menu">
    <div class="list-group">
        <a [routerLink]="['/legal/privacy-policy']" class="list-group-item">Privacy policy</a>
        <a [routerLink]="['/legal/commercial-license']" class="list-group-item">Commercial license</a>
        <a [routerLink]="['/legal/commercial-license-oem']" class="list-group-item">Commercial license (OEM)</a>
        <a [routerLink]="['/legal/open-source-license']" class="list-group-item">Open-source license</a>
        <a [routerLink]="['/legal/gnu-agpl-license']" class="list-group-item">GNU Affero General Public License</a>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], LegalMenuComponent);

let LegalComponent = class LegalComponent {
};
LegalComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>Legal</h1>
        <p class="lead">Please select from our available legal pages.</p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], LegalComponent);

let CommercialLicenseComponent = class CommercialLicenseComponent {
};
CommercialLicenseComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>End user license agreement</h1>
        <p class="lead">You should carefully read the following end user license agreement before installing this software. By installing, copying, or otherwise using the software, you agree to be bound by the terms of this agreement. if you do not agree to the terms of this agreement, please contact slamby at https://www.slamby.com to arrange a full refund.</p>
        <p>This software, and any files that are delivered to you by Slamby-Semantics Ltd (referred to herein as “Slamby”). (via on-line transmission or otherwise) to "patch," update, or otherwise modify the software program, as well as any printed materials and any on-line or electronic documentation (the "Manual"), and any and all copies and derivative works of such software program and materials (collectively the "Software") are the copyrighted work of Slamby, or its suppliers and licensors (collectively referred to herein as "Licensor"). All use of the Software is governed by the terms of this End User License Agreement ("License Agreement" or "Agreement"). The Software is distributed solely for use by authorized individuals or entities according to the terms of the License Agreement. Any use, reproduction or redistribution of the Software not expressly authorized by the terms of the License Agreement is expressly prohibited.</p>
        <h2>Ownership</h2>
        <p>All title, ownership rights and intellectual property rights in and to the Software and all copies thereof (including, but not limited to, any titles, computer code, artwork, any related documentation, executable code, shared libraries, proprietary computer protocols and "applets" incorporated into the Software) are owned or expressly licensed by Licensor. The Software is protected by the copyright laws of Hungary, international copyright treaties and conventions, and other laws. All rights are reserved. The Software may contain certain licensed materials, and the licensors of those materials may enforce their rights in the event of any violation of this License Agreement.</p>
        <p>Each license purchased for this Software allows once instance of the Software to be used. You may not use multiple instances of the Software without obtaining, in advance, a new license or licenses for the new instance or instances and/or express written permission from Slamby. You may only permanently transfer ownership of the Software and all parts thereof, and all of your rights and obligations under the License Agreement, to another individual or entity, once you have notified Slamby. In this case, Slamby will issue a license for the new individual or entity once it has been established that old instance is no longer in use.</p>
        <p>For the specific case of license(s) purchased for redistribution of this Software as part of licensee’s products, no notification to Slamby. shall be required and the license shall automatically transfer so long as the old instance is not in use by the licensee.</p>
        <h2>Responsibilities of end user</h2>
        <p>Subject to the Grant of License hereinabove, you may NOT, in whole or in part, copy, photocopy, reproduce, translate, reverse engineer, derive source code, modify, disassemble, decompile, or create derivative works based on the Software, or remove any proprietary notices or labels on the Software, with the exception of the non-compiled source files provided with the Software, including but not limited to template files and script files, which may be modified for use on the user specified in part “Ownership” only. Failure to comply with the restrictions and limitations contained in this Section 2 shall result in immediate, automatic termination of the license granted hereunder and may subject you to civil and/or criminal liability. Notwithstanding the foregoing, you may make one (1) copy of the Software and the Manuals for archival purposes only.</p>
        <h2>Termination</h2>
        <p>This License Agreement is effective until terminated. You may terminate the License Agreement at any time by (i) removing the Software from your hard drive, and (ii) notify Licensor of your intention to terminate this License Agreement. Licensor may, at its discretion, terminate this License agreement in the event that you fail to comply with the terms and conditions contained herein. In such event, you must either take immediate action to ensure that you are compliant with this License Agreement or cease all usage of the Software within 30 days from being notified of the termination of License agreement by the Licensor. Upon termination of this Agreement for any reason, all licenses granted herein shall immediately terminate.</p>
        <h2>Limitation of liability</h2>
        <p>NEITHER LICENSOR NOR ITS PARENT, SUBSIDIARIES OR AFFILIATES SHALL BE LIABLE IN ANY WAY FOR LOSS OR DAMAGE OF ANY KIND RESULTING FROM THE USE OF THE SOFTWARE, INCLUDING, BUT NOT LIMITED TO, LOSS OF DATA, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES OR LOSSES. FURTHER, LICENSOR SHALL NOT BE LIABLE IN ANY WAY FOR THE LOSS OR DAMAGE TO PRODUCT DATA, LAYOUTS, TEMPLATES, ARTWORK, PRICING, PREDICTION, ANALYSIS AND OTHER INFORMATION STORED BY THE SOFTWARE. LICENSOR SHALL NOT BE RESPONSIBLE FOR ANY INTERRUPTIONS OF SERVICE, INCLUDING, BUT NOT LIMITED TO, ISP DISRUPTIONS, SOFTWARE OR HARDWARE FAILURES OR ANY OTHER EVENT WHICH MAY RESULT IN A LOSS OF DATA OR DISRUPTION OF SERVICE. IN NO EVENT WILL LICENSOR BE LIABLE TO YOU FOR ANY INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES. Some countries and regions do not allow the exclusion or limitation of incidental or consequential damages, so the above limitations may not apply to you.</p>
        <h2>Equitable remedies</h2>
        <p>You hereby agree that Licensor would be irreparably damaged if the terms of this License Agreement were not specifically enforced, and therefore you agree that Licensor shall be entitled, without bond, other security, or proof of damages, to appropriate equitable remedies with respect to breaches of this License Agreement, in addition to such other remedies as Licensor may otherwise have available to it under applicable laws. In the event any litigation is brought by either party in connection with this License Agreement, the prevailing party in such litigation shall be entitled to recover from the other party all the costs, attorneys' fees and other expenses incurred by such prevailing party in the litigation.</p>
        <h2>Changes to the Agreement</h2>
        <p>Slamby reserves the right, at its sole discretion, to change, modify, add to, supplement or delete any of the terms and conditions of this License Agreement when Slamby upgrades the Software, effective upon prior notice as follows: Slamby will post notification of any such changes to this License Agreement on the Slamby.com website and will post the revised version of this License Agreement in this location, and may provide such other notice as Slamby may elect in its sole discretion, which may include by email, postal mail or pop-up screen.</p>
        <p>If any future changes to this License Agreement are unacceptable to you or cause you to no longer be in compliance with this License Agreement, you may terminate this License Agreement in accordance with Section 3 herein. Your installation and use of any updated or modifications to the Software following notice of changes to this Agreement as described above will mean you accept any and all such changes. You may continue to use your pre-existing installation of the Software under the original License Agreement if you so notify Slamby. within 30 days of the change in the license. Slamby may change, modify, suspend, or discontinue any aspect of the Software at any time. Slamby may also impose limits on certain features or restrict your access to parts or all of the Software without notice or liability. You have no interest, monetary or otherwise, in any feature or content contained in the Software.</p>
        <h2>Miscellaneous</h2>
        <p>This License Agreement shall be deemed to have been made and executed in Hungary without regard to conflicts of law provisions, and any dispute arising hereunder shall be resolved in accordance with the law of Hungary. You agree that any claim asserted in any legal proceeding by one of the parties against the other shall be commenced and maintained in Hungary, having subject matter jurisdiction with respect to the dispute between the parties. In the event that any provision of this License Agreement shall be held by a court or other tribunal of competent jurisdiction to be unenforceable, such provision will be enforced to the maximum extent permissible, and the remaining portions of this License Agreement shall remain in full force and effect. This License Agreement constitutes and contains the entire agreement between the parties with respect to the subject matter hereof and supersedes any prior oral or written agreements.</p>
        <p>I hereby acknowledge that I have read and understand the foregoing License Agreement and agree that the action of installing the Software is an acknowledgment of my agreement to be bound by the terms and conditions of the License Agreement contained herein.</p>
        <p>2013-2016 Slamby-Semantics Ltd. All rights reserved.</p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], CommercialLicenseComponent);

let CommercialLicenseOemComponent = class CommercialLicenseOemComponent {
};
CommercialLicenseOemComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>Extension to the slamby api commercial license for royalty free distribution (oem)</h1>
        <h2>1. Definitions</h2>
        <p>When used in this Agreement, the following terms shall have the respective meanings indicated, such meanings to be applicable to both the singular and plural forms of the terms defined:</p>
        <ul>
            <li>“We” or “Us” or “Slamby” or “Our” or the “Company” refers to Slamby-Semantics Ltd.</li>
            <li>“You” and “Your” and “User” refers to the entity and/or individual person, natural or legal, consenting to, and entering into, this Agreement.</li>
            <li>"Licensor" means Slamby.</li>
            <li>"Software" means (a) all of the contents of the files, disk(s), disk image(s), Docker containers or other media with which this Agreement is provided, including but not limited to ((i) digital images (ii) related explanatory written materials or files ("Documentation"); and (iii) fonts; and (b) upgrades, modified versions, updates, additions, and copies of the Software, if any, licensed to you by Slamby (collectively, "Updates").</li>
            <li>"Use" or "Using" means to access, install, download, copy or otherwise benefit from using the functionality of the Software.</li>
            <li>"Licensee" means You or Your Company, unless otherwise indicated.</li>
            <li>"System" means Windows OS, GNU/Linux or Mac OS X, Docker or any virtual machine.</li>
        </ul>
        <h2>2. General Use</h2>
        <p>As long as the Licensee complies with the terms of this extension of End User License Agreement (the "Agreement") and the Agreement itself, the Licensor grants the Licensee a non-exclusive right to install and Use the Software for the purposes described in the Documentation under the following conditions:</p>
        <p>The Software may be installed and used by the Licensee for business, commercial and money-earning purposes.</p>
        <p>This License can be deployed on any number of systems.</p>
        <p>The Software under this License may be incorporated into software/hardware projects sold by the Licensee.</p>
        <p>The Licensee may physically or electronically distribute the Software to his manufacturing and service partners but only as an intermediary product, requiring incorporation of the Software into the software or hardware developed by the Licensee in cases when the manufacturing process involves the Licensee's partner's job to complete the project before distributing it to end-users.</p>
        <p>The Licensee or his manufacturing and service partners may reproduce and physically or electronically distribute the Software only as an integral part of or incorporated into their software or hardware product.</p>
        <p>This License entitles the Licensee to the unlimited redistribution of the Licensor's technology as a part of the Licensee's product.</p>
        <p>This License is royalty-free, i.e. the Licensee does not need to pay a fee per every order of his product with the incorporated Licensor's technology.</p>
        <p>This License cannot be used by the Licensee to develop a software application that would compete with products marketed by the Licensor.</p>
        <h2>3. Intellectual Property Rights</h2>
        <p>3.1 This License does not transmit any intellectual rights on the Software. The Software and any copies that the Licensee is authorized by the Licensor to make are the intellectual property of and are owned by the Licensor.</p>
        <p>3.2 The Software is protected by copyright, including without limitation by Copyright Law and international treaty provisions.</p>
        <p>3.3 Any copies that the Licensee is permitted to make pursuant to this Agreement must contain the same copyright and other proprietary notices that appear on or in the Software.</p>
        <p>3.4 Any information supplied by the Licensor or obtained by the Licensee, as permitted hereunder, may only be used by the Licensee for the purpose described herein and may not be disclosed to any third party or used to create any software which is substantially similar to the expression of the Software.</p>
        <p>3.5 Trademarks shall be used in accordance with accepted trademark practice, including identification of trademarks owners' names. Trademarks can only be used to identify printed output produced by the Software and such use of any trademark does not give the Licensee any rights of ownership in that trademark.</p>
        <h2>License Transfer</h2>
        <p>4.1 This License is non-transferable. The Licensee may not transfer the rights to Use the Software to third parties (another person or legal entity).</p>
        <p>4.2 The Licensee may not rent, lease, sub-license, lend or transfer any versions or copies of the Software to third parties (another person or legal entity).</p>
        <p>4.3 The Licensee may make a back-up copy of the Software, provided a backup copy is not installed or used on any system not belonging to the Licensee. The Licensee may not transfer the rights to install or use a backup copy of the Software to third parties (another person or legal entity).</p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], CommercialLicenseOemComponent);

let OpenSourceLicenseComponent = class OpenSourceLicenseComponent {
};
OpenSourceLicenseComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>Slamby API open-source software license</h1>
        <p class="lead">Slamby API is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License.</p>
        <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.</p>
        <p>You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/agpl-3.0.html.</p>
        <h2>Commercial license</h2>
        <p class="lead">In addition to this license, Slamby API is offered under a commercial license. You can learn more about this option by contacting us at sales@slamby.com.</p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], OpenSourceLicenseComponent);

let GnuAgplLicenseComponent = class GnuAgplLicenseComponent {
};
GnuAgplLicenseComponent = __decorate([
    Component({
        template: `<pm-header></pm-header>

<div class="container">
    <legalMenu></legalMenu>
    <div class="body">
        <h1>Gnu affero general public license</h1>
        <p class="lead">Version 3, 19 November 2007</p>

        <p>Copyright &copy; 2007 Free Software Foundation,
        Inc. &lt;<a href="http://fsf.org/" target="_blank">http://fsf.org/</a>&gt;
        <br />
        Everyone is permitted to copy and distribute verbatim copies
        of this license document, but changing it is not allowed.</p>

        <h2><a name="preamble"></a>Preamble</h2>

        <p>The GNU Affero General Public License is a free, copyleft license
        for software and other kinds of works, specifically designed to ensure
        cooperation with the community in the case of network server software.</p>

        <p>The licenses for most software and other practical works are
        designed to take away your freedom to share and change the works.  By
        contrast, our General Public Licenses are intended to guarantee your
        freedom to share and change all versions of a program--to make sure it
        remains free software for all its users.</p>

        <p>When we speak of free software, we are referring to freedom, not
        price.  Our General Public Licenses are designed to make sure that you
        have the freedom to distribute copies of free software (and charge for
        them if you wish), that you receive source code or can get it if you
        want it, that you can change the software or use pieces of it in new
        free programs, and that you know you can do these things.</p>

        <p>Developers that use our General Public Licenses protect your rights
        with two steps: (1) assert copyright on the software, and (2) offer
        you this License which gives you legal permission to copy, distribute
        and/or modify the software.</p>

        <p>A secondary benefit of defending all users' freedom is that
        improvements made in alternate versions of the program, if they
        receive widespread use, become available for other developers to
        incorporate.  Many developers of free software are heartened and
        encouraged by the resulting cooperation.  However, in the case of
        software used on network servers, this result may fail to come about.
        The GNU General Public License permits making a modified version and
        letting the public access it on a server without ever releasing its
        source code to the public.</p>

        <p>The GNU Affero General Public License is designed specifically to
        ensure that, in such cases, the modified source code becomes available
        to the community.  It requires the operator of a network server to
        provide the source code of the modified version running there to the
        users of that server.  Therefore, public use of a modified version, on
        a publicly accessible server, gives the public access to the source
        code of the modified version.</p>

        <p>An older license, called the Affero General Public License and
        published by Affero, was designed to accomplish similar goals.  This is
        a different license, not a version of the Affero GPL, but Affero has
        released a new version of the Affero GPL which permits relicensing under
        this license.</p>

        <p>The precise terms and conditions for copying, distribution and
        modification follow.</p>

        <h2><a name="terms"></a>TERMS AND CONDITIONS</h2>

        <h3><a name="section0"></a>0. Definitions.</h3>

        <p>&quot;This License&quot; refers to version 3 of the GNU Affero General Public
        License.</p>

        <p>&quot;Copyright&quot; also means copyright-like laws that apply to other kinds
        of works, such as semiconductor masks.</p>

        <p>&quot;The Program&quot; refers to any copyrightable work licensed under this
        License.  Each licensee is addressed as &quot;you&quot;.  &quot;Licensees&quot; and
        &quot;recipients&quot; may be individuals or organizations.</p>

        <p>To &quot;modify&quot; a work means to copy from or adapt all or part of the work
        in a fashion requiring copyright permission, other than the making of an
        exact copy.  The resulting work is called a &quot;modified version&quot; of the
        earlier work or a work &quot;based on&quot; the earlier work.</p>

        <p>A &quot;covered work&quot; means either the unmodified Program or a work based
        on the Program.</p>

        <p>To &quot;propagate&quot; a work means to do anything with it that, without
        permission, would make you directly or secondarily liable for
        infringement under applicable copyright law, except executing it on a
        computer or modifying a private copy.  Propagation includes copying,
        distribution (with or without modification), making available to the
        public, and in some countries other activities as well.</p>

        <p>To &quot;convey&quot; a work means any kind of propagation that enables other
        parties to make or receive copies.  Mere interaction with a user through
        a computer network, with no transfer of a copy, is not conveying.</p>

        <p>An interactive user interface displays &quot;Appropriate Legal Notices&quot;
        to the extent that it includes a convenient and prominently visible
        feature that (1) displays an appropriate copyright notice, and (2)
        tells the user that there is no warranty for the work (except to the
        extent that warranties are provided), that licensees may convey the
        work under this License, and how to view a copy of this License.  If
        the interface presents a list of user commands or options, such as a
        menu, a prominent item in the list meets this criterion.</p>

        <h3><a name="section1"></a>1. Source Code.</h3>

        <p>The &quot;source code&quot; for a work means the preferred form of the work
        for making modifications to it.  &quot;Object code&quot; means any non-source
        form of a work.</p>

        <p>A &quot;Standard Interface&quot; means an interface that either is an official
        standard defined by a recognized standards body, or, in the case of
        interfaces specified for a particular programming language, one that
        is widely used among developers working in that language.</p>

        <p>The &quot;System Libraries&quot; of an executable work include anything, other
        than the work as a whole, that (a) is included in the normal form of
        packaging a Major Component, but which is not part of that Major
        Component, and (b) serves only to enable use of the work with that
        Major Component, or to implement a Standard Interface for which an
        implementation is available to the public in source code form.  A
        &quot;Major Component&quot;, in this context, means a major essential component
        (kernel, window system, and so on) of the specific operating system
        (if any) on which the executable work runs, or a compiler used to
        produce the work, or an object code interpreter used to run it.</p>

        <p>The &quot;Corresponding Source&quot; for a work in object code form means all
        the source code needed to generate, install, and (for an executable
        work) run the object code and to modify the work, including scripts to
        control those activities.  However, it does not include the work's
        System Libraries, or general-purpose tools or generally available free
        programs which are used unmodified in performing those activities but
        which are not part of the work.  For example, Corresponding Source
        includes interface definition files associated with source files for
        the work, and the source code for shared libraries and dynamically
        linked subprograms that the work is specifically designed to require,
        such as by intimate data communication or control flow between those
        subprograms and other parts of the work.</p>

        <p>The Corresponding Source need not include anything that users
        can regenerate automatically from other parts of the Corresponding
        Source.</p>

        <p>The Corresponding Source for a work in source code form is that
        same work.</p>

        <h3><a name="section2"></a>2. Basic Permissions.</h3>

        <p>All rights granted under this License are granted for the term of
        copyright on the Program, and are irrevocable provided the stated
        conditions are met.  This License explicitly affirms your unlimited
        permission to run the unmodified Program.  The output from running a
        covered work is covered by this License only if the output, given its
        content, constitutes a covered work.  This License acknowledges your
        rights of fair use or other equivalent, as provided by copyright law.</p>

        <p>You may make, run and propagate covered works that you do not
        convey, without conditions so long as your license otherwise remains
        in force.  You may convey covered works to others for the sole purpose
        of having them make modifications exclusively for you, or provide you
        with facilities for running those works, provided that you comply with
        the terms of this License in conveying all material for which you do
        not control copyright.  Those thus making or running the covered works
        for you must do so exclusively on your behalf, under your direction
        and control, on terms that prohibit them from making any copies of
        your copyrighted material outside their relationship with you.</p>

        <p>Conveying under any other circumstances is permitted solely under
        the conditions stated below.  Sublicensing is not allowed; section 10
        makes it unnecessary.</p>

        <h3><a name="section3"></a>3. Protecting Users' Legal Rights From Anti-Circumvention Law.</h3>

        <p>No covered work shall be deemed part of an effective technological
        measure under any applicable law fulfilling obligations under article
        11 of the WIPO copyright treaty adopted on 20 December 1996, or
        similar laws prohibiting or restricting circumvention of such
        measures.</p>

        <p>When you convey a covered work, you waive any legal power to forbid
        circumvention of technological measures to the extent such circumvention
        is effected by exercising rights under this License with respect to
        the covered work, and you disclaim any intention to limit operation or
        modification of the work as a means of enforcing, against the work's
        users, your or third parties' legal rights to forbid circumvention of
        technological measures.</p>

        <h3><a name="section4"></a>4. Conveying Verbatim Copies.</h3>

        <p>You may convey verbatim copies of the Program's source code as you
        receive it, in any medium, provided that you conspicuously and
        appropriately publish on each copy an appropriate copyright notice;
        keep intact all notices stating that this License and any
        non-permissive terms added in accord with section 7 apply to the code;
        keep intact all notices of the absence of any warranty; and give all
        recipients a copy of this License along with the Program.</p>

        <p>You may charge any price or no price for each copy that you convey,
        and you may offer support or warranty protection for a fee.</p>

        <h3><a name="section5"></a>5. Conveying Modified Source Versions.</h3>

        <p>You may convey a work based on the Program, or the modifications to
        produce it from the Program, in the form of source code under the
        terms of section 4, provided that you also meet all of these conditions:</p>

        <ul>

        <li>a) The work must carry prominent notices stating that you modified
            it, and giving a relevant date.</li>

        <li>b) The work must carry prominent notices stating that it is
            released under this License and any conditions added under section
            7.  This requirement modifies the requirement in section 4 to
            &quot;keep intact all notices&quot;.</li>

        <li>c) You must license the entire work, as a whole, under this
            License to anyone who comes into possession of a copy.  This
            License will therefore apply, along with any applicable section 7
            additional terms, to the whole of the work, and all its parts,
            regardless of how they are packaged.  This License gives no
            permission to license the work in any other way, but it does not
            invalidate such permission if you have separately received it.</li>

        <li>d) If the work has interactive user interfaces, each must display
            Appropriate Legal Notices; however, if the Program has interactive
            interfaces that do not display Appropriate Legal Notices, your
            work need not make them do so.</li>

        </ul>

        <p>A compilation of a covered work with other separate and independent
        works, which are not by their nature extensions of the covered work,
        and which are not combined with it such as to form a larger program,
        in or on a volume of a storage or distribution medium, is called an
        &quot;aggregate&quot; if the compilation and its resulting copyright are not
        used to limit the access or legal rights of the compilation's users
        beyond what the individual works permit.  Inclusion of a covered work
        in an aggregate does not cause this License to apply to the other
        parts of the aggregate.</p>

        <h3><a name="section6"></a>6. Conveying Non-Source Forms.</h3>

        <p>You may convey a covered work in object code form under the terms
        of sections 4 and 5, provided that you also convey the
        machine-readable Corresponding Source under the terms of this License,
        in one of these ways:</p>

        <ul>

        <li>a) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by the
            Corresponding Source fixed on a durable physical medium
            customarily used for software interchange.</li>

        <li>b) Convey the object code in, or embodied in, a physical product
            (including a physical distribution medium), accompanied by a
            written offer, valid for at least three years and valid for as
            long as you offer spare parts or customer support for that product
            model, to give anyone who possesses the object code either (1) a
            copy of the Corresponding Source for all the software in the
            product that is covered by this License, on a durable physical
            medium customarily used for software interchange, for a price no
            more than your reasonable cost of physically performing this
            conveying of source, or (2) access to copy the
            Corresponding Source from a network server at no charge.</li>

        <li>c) Convey individual copies of the object code with a copy of the
            written offer to provide the Corresponding Source.  This
            alternative is allowed only occasionally and noncommercially, and
            only if you received the object code with such an offer, in accord
            with subsection 6b.</li>

        <li>d) Convey the object code by offering access from a designated
            place (gratis or for a charge), and offer equivalent access to the
            Corresponding Source in the same way through the same place at no
            further charge.  You need not require recipients to copy the
            Corresponding Source along with the object code.  If the place to
            copy the object code is a network server, the Corresponding Source
            may be on a different server (operated by you or a third party)
            that supports equivalent copying facilities, provided you maintain
            clear directions next to the object code saying where to find the
            Corresponding Source.  Regardless of what server hosts the
            Corresponding Source, you remain obligated to ensure that it is
            available for as long as needed to satisfy these requirements.</li>

        <li>e) Convey the object code using peer-to-peer transmission, provided
            you inform other peers where the object code and Corresponding
            Source of the work are being offered to the general public at no
            charge under subsection 6d.</li>

        </ul>

        <p>A separable portion of the object code, whose source code is excluded
        from the Corresponding Source as a System Library, need not be
        included in conveying the object code work.</p>

        <p>A &quot;User Product&quot; is either (1) a &quot;consumer product&quot;, which means any
        tangible personal property which is normally used for personal, family,
        or household purposes, or (2) anything designed or sold for incorporation
        into a dwelling.  In determining whether a product is a consumer product,
        doubtful cases shall be resolved in favor of coverage.  For a particular
        product received by a particular user, &quot;normally used&quot; refers to a
        typical or common use of that class of product, regardless of the status
        of the particular user or of the way in which the particular user
        actually uses, or expects or is expected to use, the product.  A product
        is a consumer product regardless of whether the product has substantial
        commercial, industrial or non-consumer uses, unless such uses represent
        the only significant mode of use of the product.</p>

        <p>&quot;Installation Information&quot; for a User Product means any methods,
        procedures, authorization keys, or other information required to install
        and execute modified versions of a covered work in that User Product from
        a modified version of its Corresponding Source.  The information must
        suffice to ensure that the continued functioning of the modified object
        code is in no case prevented or interfered with solely because
        modification has been made.</p>

        <p>If you convey an object code work under this section in, or with, or
        specifically for use in, a User Product, and the conveying occurs as
        part of a transaction in which the right of possession and use of the
        User Product is transferred to the recipient in perpetuity or for a
        fixed term (regardless of how the transaction is characterized), the
        Corresponding Source conveyed under this section must be accompanied
        by the Installation Information.  But this requirement does not apply
        if neither you nor any third party retains the ability to install
        modified object code on the User Product (for example, the work has
        been installed in ROM).</p>

        <p>The requirement to provide Installation Information does not include a
        requirement to continue to provide support service, warranty, or updates
        for a work that has been modified or installed by the recipient, or for
        the User Product in which it has been modified or installed.  Access to a
        network may be denied when the modification itself materially and
        adversely affects the operation of the network or violates the rules and
        protocols for communication across the network.</p>

        <p>Corresponding Source conveyed, and Installation Information provided,
        in accord with this section must be in a format that is publicly
        documented (and with an implementation available to the public in
        source code form), and must require no special password or key for
        unpacking, reading or copying.</p>

        <h3><a name="section7"></a>7. Additional Terms.</h3>

        <p>&quot;Additional permissions&quot; are terms that supplement the terms of this
        License by making exceptions from one or more of its conditions.
        Additional permissions that are applicable to the entire Program shall
        be treated as though they were included in this License, to the extent
        that they are valid under applicable law.  If additional permissions
        apply only to part of the Program, that part may be used separately
        under those permissions, but the entire Program remains governed by
        this License without regard to the additional permissions.</p>

        <p>When you convey a copy of a covered work, you may at your option
        remove any additional permissions from that copy, or from any part of
        it.  (Additional permissions may be written to require their own
        removal in certain cases when you modify the work.)  You may place
        additional permissions on material, added by you to a covered work,
        for which you have or can give appropriate copyright permission.</p>

        <p>Notwithstanding any other provision of this License, for material you
        add to a covered work, you may (if authorized by the copyright holders of
        that material) supplement the terms of this License with terms:</p>

        <ul>

        <li>a) Disclaiming warranty or limiting liability differently from the
            terms of sections 15 and 16 of this License; or</li>

        <li>b) Requiring preservation of specified reasonable legal notices or
            author attributions in that material or in the Appropriate Legal
            Notices displayed by works containing it; or</li>

        <li>c) Prohibiting misrepresentation of the origin of that material, or
            requiring that modified versions of such material be marked in
            reasonable ways as different from the original version; or</li>

        <li>d) Limiting the use for publicity purposes of names of licensors or
            authors of the material; or</li>

        <li>e) Declining to grant rights under trademark law for use of some
            trade names, trademarks, or service marks; or</li>

        <li>f) Requiring indemnification of licensors and authors of that
            material by anyone who conveys the material (or modified versions of
            it) with contractual assumptions of liability to the recipient, for
            any liability that these contractual assumptions directly impose on
            those licensors and authors.</li>

        </ul>

        <p>All other non-permissive additional terms are considered &quot;further
        restrictions&quot; within the meaning of section 10.  If the Program as you
        received it, or any part of it, contains a notice stating that it is
        governed by this License along with a term that is a further restriction,
        you may remove that term.  If a license document contains a further
        restriction but permits relicensing or conveying under this License, you
        may add to a covered work material governed by the terms of that license
        document, provided that the further restriction does not survive such
        relicensing or conveying.</p>

        <p>If you add terms to a covered work in accord with this section, you
        must place, in the relevant source files, a statement of the
        additional terms that apply to those files, or a notice indicating
        where to find the applicable terms.</p>

        <p>Additional terms, permissive or non-permissive, may be stated in the
        form of a separately written license, or stated as exceptions;
        the above requirements apply either way.</p>

        <h3><a name="section8"></a>8. Termination.</h3>

        <p>You may not propagate or modify a covered work except as expressly
        provided under this License.  Any attempt otherwise to propagate or
        modify it is void, and will automatically terminate your rights under
        this License (including any patent licenses granted under the third
        paragraph of section 11).</p>

        <p>However, if you cease all violation of this License, then your
        license from a particular copyright holder is reinstated (a)
        provisionally, unless and until the copyright holder explicitly and
        finally terminates your license, and (b) permanently, if the copyright
        holder fails to notify you of the violation by some reasonable means
        prior to 60 days after the cessation.</p>

        <p>Moreover, your license from a particular copyright holder is
        reinstated permanently if the copyright holder notifies you of the
        violation by some reasonable means, this is the first time you have
        received notice of violation of this License (for any work) from that
        copyright holder, and you cure the violation prior to 30 days after
        your receipt of the notice.</p>

        <p>Termination of your rights under this section does not terminate the
        licenses of parties who have received copies or rights from you under
        this License.  If your rights have been terminated and not permanently
        reinstated, you do not qualify to receive new licenses for the same
        material under section 10.</p>

        <h3><a name="section9"></a>9. Acceptance Not Required for Having Copies.</h3>

        <p>You are not required to accept this License in order to receive or
        run a copy of the Program.  Ancillary propagation of a covered work
        occurring solely as a consequence of using peer-to-peer transmission
        to receive a copy likewise does not require acceptance.  However,
        nothing other than this License grants you permission to propagate or
        modify any covered work.  These actions infringe copyright if you do
        not accept this License.  Therefore, by modifying or propagating a
        covered work, you indicate your acceptance of this License to do so.</p>

        <h3><a name="section10"></a>10. Automatic Licensing of Downstream Recipients.</h3>

        <p>Each time you convey a covered work, the recipient automatically
        receives a license from the original licensors, to run, modify and
        propagate that work, subject to this License.  You are not responsible
        for enforcing compliance by third parties with this License.</p>

        <p>An &quot;entity transaction&quot; is a transaction transferring control of an
        organization, or substantially all assets of one, or subdividing an
        organization, or merging organizations.  If propagation of a covered
        work results from an entity transaction, each party to that
        transaction who receives a copy of the work also receives whatever
        licenses to the work the party's predecessor in interest had or could
        give under the previous paragraph, plus a right to possession of the
        Corresponding Source of the work from the predecessor in interest, if
        the predecessor has it or can get it with reasonable efforts.</p>

        <p>You may not impose any further restrictions on the exercise of the
        rights granted or affirmed under this License.  For example, you may
        not impose a license fee, royalty, or other charge for exercise of
        rights granted under this License, and you may not initiate litigation
        (including a cross-claim or counterclaim in a lawsuit) alleging that
        any patent claim is infringed by making, using, selling, offering for
        sale, or importing the Program or any portion of it.</p>

        <h3><a name="section11"></a>11. Patents.</h3>

        <p>A &quot;contributor&quot; is a copyright holder who authorizes use under this
        License of the Program or a work on which the Program is based.  The
        work thus licensed is called the contributor's &quot;contributor version&quot;.</p>

        <p>A contributor's &quot;essential patent claims&quot; are all patent claims
        owned or controlled by the contributor, whether already acquired or
        hereafter acquired, that would be infringed by some manner, permitted
        by this License, of making, using, or selling its contributor version,
        but do not include claims that would be infringed only as a
        consequence of further modification of the contributor version.  For
        purposes of this definition, &quot;control&quot; includes the right to grant
        patent sublicenses in a manner consistent with the requirements of
        this License.</p>

        <p>Each contributor grants you a non-exclusive, worldwide, royalty-free
        patent license under the contributor's essential patent claims, to
        make, use, sell, offer for sale, import and otherwise run, modify and
        propagate the contents of its contributor version.</p>

        <p>In the following three paragraphs, a &quot;patent license&quot; is any express
        agreement or commitment, however denominated, not to enforce a patent
        (such as an express permission to practice a patent or covenant not to
        sue for patent infringement).  To &quot;grant&quot; such a patent license to a
        party means to make such an agreement or commitment not to enforce a
        patent against the party.</p>

        <p>If you convey a covered work, knowingly relying on a patent license,
        and the Corresponding Source of the work is not available for anyone
        to copy, free of charge and under the terms of this License, through a
        publicly available network server or other readily accessible means,
        then you must either (1) cause the Corresponding Source to be so
        available, or (2) arrange to deprive yourself of the benefit of the
        patent license for this particular work, or (3) arrange, in a manner
        consistent with the requirements of this License, to extend the patent
        license to downstream recipients.  &quot;Knowingly relying&quot; means you have
        actual knowledge that, but for the patent license, your conveying the
        covered work in a country, or your recipient's use of the covered work
        in a country, would infringe one or more identifiable patents in that
        country that you have reason to believe are valid.</p>

        <p>If, pursuant to or in connection with a single transaction or
        arrangement, you convey, or propagate by procuring conveyance of, a
        covered work, and grant a patent license to some of the parties
        receiving the covered work authorizing them to use, propagate, modify
        or convey a specific copy of the covered work, then the patent license
        you grant is automatically extended to all recipients of the covered
        work and works based on it.</p>

        <p>A patent license is &quot;discriminatory&quot; if it does not include within
        the scope of its coverage, prohibits the exercise of, or is
        conditioned on the non-exercise of one or more of the rights that are
        specifically granted under this License.  You may not convey a covered
        work if you are a party to an arrangement with a third party that is
        in the business of distributing software, under which you make payment
        to the third party based on the extent of your activity of conveying
        the work, and under which the third party grants, to any of the
        parties who would receive the covered work from you, a discriminatory
        patent license (a) in connection with copies of the covered work
        conveyed by you (or copies made from those copies), or (b) primarily
        for and in connection with specific products or compilations that
        contain the covered work, unless you entered into that arrangement,
        or that patent license was granted, prior to 28 March 2007.</p>

        <p>Nothing in this License shall be construed as excluding or limiting
        any implied license or other defenses to infringement that may
        otherwise be available to you under applicable patent law.</p>

        <h3><a name="section12"></a>12. No Surrender of Others' Freedom.</h3>

        <p>If conditions are imposed on you (whether by court order, agreement or
        otherwise) that contradict the conditions of this License, they do not
        excuse you from the conditions of this License.  If you cannot convey a
        covered work so as to satisfy simultaneously your obligations under this
        License and any other pertinent obligations, then as a consequence you may
        not convey it at all.  For example, if you agree to terms that obligate you
        to collect a royalty for further conveying from those to whom you convey
        the Program, the only way you could satisfy both those terms and this
        License would be to refrain entirely from conveying the Program.</p>

        <h3><a name="section13"></a>13. Remote Network Interaction; Use with the GNU General Public License.</h3>

        <p>Notwithstanding any other provision of this License, if you modify the
        Program, your modified version must prominently offer all users
        interacting with it remotely through a computer network (if your version
        supports such interaction) an opportunity to receive the Corresponding
        Source of your version by providing access to the Corresponding Source
        from a network server at no charge, through some standard or customary
        means of facilitating copying of software.  This Corresponding Source
        shall include the Corresponding Source for any work covered by version 3
        of the GNU General Public License that is incorporated pursuant to the
        following paragraph.</p>

        <p>Notwithstanding any other provision of this License, you have permission
        to link or combine any covered work with a work licensed under version 3
        of the GNU General Public License into a single combined work, and to
        convey the resulting work.  The terms of this License will continue to
        apply to the part which is the covered work, but the work with which it is
        combined will remain governed by version 3 of the GNU General Public
        License.</p>

        <h3><a name="section14"></a>14. Revised Versions of this License.</h3>

        <p>The Free Software Foundation may publish revised and/or new versions of
        the GNU Affero General Public License from time to time.  Such new
        versions will be similar in spirit to the present version, but may differ
        in detail to address new problems or concerns.</p>

        <p>Each version is given a distinguishing version number.  If the
        Program specifies that a certain numbered version of the GNU Affero
        General Public License &quot;or any later version&quot; applies to it, you have
        the option of following the terms and conditions either of that
        numbered version or of any later version published by the Free
        Software Foundation.  If the Program does not specify a version number
        of the GNU Affero General Public License, you may choose any version
        ever published by the Free Software Foundation.</p>

        <p>If the Program specifies that a proxy can decide which future
        versions of the GNU Affero General Public License can be used, that
        proxy's public statement of acceptance of a version permanently
        authorizes you to choose that version for the Program.</p>

        <p>Later license versions may give you additional or different
        permissions.  However, no additional obligations are imposed on any
        author or copyright holder as a result of your choosing to follow a
        later version.</p>

        <h3><a name="section15"></a>15. Disclaimer of Warranty.</h3>

        <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
        APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
        HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM &quot;AS IS&quot; WITHOUT WARRANTY
        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
        ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>

        <h3><a name="section16"></a>16. Limitation of Liability.</h3>

        <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
        WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
        THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
        GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
        USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
        DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
        PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
        EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
        SUCH DAMAGES.</p>

        <h3><a name="section17"></a>17. Interpretation of Sections 15 and 16.</h3>

        <p>If the disclaimer of warranty and limitation of liability provided
        above cannot be given local legal effect according to their terms,
        reviewing courts shall apply local law that most closely approximates
        an absolute waiver of all civil liability in connection with the
        Program, unless a warranty or assumption of liability accompanies a
        copy of the Program in return for a fee.</p>

        <p>END OF TERMS AND CONDITIONS</p>

        <h2><a name="howto"></a>How to Apply These Terms to Your New Programs</h2>

        <p>If you develop a new program, and you want it to be of the greatest
        possible use to the public, the best way to achieve this is to make it
        free software which everyone can redistribute and change under these terms.</p>

        <p>To do so, attach the following notices to the program.  It is safest
        to attach them to the start of each source file to most effectively
        state the exclusion of warranty; and each file should have at least
        the &quot;copyright&quot; line and a pointer to where the full notice is found.</p>

        <pre>&lt;one line to give the program's name and a brief idea of what it does.&gt;
    Copyright (C) &lt;year&gt;  &lt;name of author&gt;

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
        </pre>

        <p>Also add information on how to contact you by electronic and paper mail.</p>

        <p>If your software can interact with users remotely through a computer
        network, you should also make sure that it provides a way for users to
        get its source.  For example, if your program is a web application, its
        interface could display a &quot;Source&quot; link that leads users to an archive
        of the code.  There are many ways you could offer source, and different
        solutions will be better for different programs; see section 13 for the
        specific requirements.</p>

        <p>You should also get your employer (if you work as a programmer) or school,
        if any, to sign a &quot;copyright disclaimer&quot; for the program, if necessary.
        For more information on this, and how to apply and follow the GNU AGPL, see
        &lt;<a href="http://www.gnu.org/licenses/" target="_blank">http://www.gnu.org/licenses/</a>&gt;.</p>
    </div>
</div>`,
        styles: [`.menu{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu{float:left;width:25%}}.menu .list-group{margin-top:30px}.body{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body{float:left;width:75%}}.body h1:first-of-type{margin-top:30px}
`]
    })
], GnuAgplLicenseComponent);

class Faq {
    constructor(question, answer) {
        this.question = question;
        this.answer = answer;
    }
}

let SupportComponent = class SupportComponent {
    constructor() {
        this.search = function (text) {
            this.faqResult = [];
            if (text) {
                for (let item of this.faq) {
                    if (item.question.toUpperCase().includes(text.toUpperCase())) {
                        this.faqResult.push(item);
                    }
                }
            }
            else {
                for (let item of this.faq) {
                    this.faqResult.push(item);
                }
            }
        };
        this.faqResult = [];
        this.faq = [
            new Faq("What is document classification?", "Document classification is one of the biggest deal among companies who own big data. The task is to assign a document to one or more classes or categories manually or automatically. The documents to be classified may be texts, images, music, etc. Slamby offers fully automated text classification in any language as the highest accuracy rate available in the market and as a most common use case, Slamby classifies product database of online stores related to their category database."),
            new Faq("What is Machine Learning?", "Machine learning is a subfield of computer science that gives computers the ability to learn without being explicitly programmed. Machine learning explores the study and construction of algorithms that can learn from and make predictions on data."),
            new Faq("What is Slamby?", "Slamby provides language independent document classification solutions with the highest accuracy on a dedicated server that allows companies easily classify and manage their documents."),
            new Faq("What is Slamby Server (API)?", "It is an instant, built-in data processing server. Upload your data and create smart functions to process your data. Category recommendation, keyword extraction, matchmaking, search."),
            new Faq("What is Slamby Insight?", "Slamby Insight is a free desktop application. You can easily access and manage your Slamby API. The main purpose using Slamby Insight is to increase your productivity of your Slamby server with an easy usage."),
            new Faq("What is Slamby TAU?", "Slamby TAU is an integrated data management (open-source) software, using Slamby SDK, communicating real-time with Slamby Server, dedicated for data scientists and managers. Quick real-time data access, data analysis, and data-processing. The main purpose of using Slamby TAU is to increase your productivity of your Slamby server with an easy usage. See more here."),
            new Faq("What is Slamby Twister?", "Slamby Twister is an advanced level text classification technology, built to provide high accurate and language-independent solution specially designed for e-commerce market. Developed by Slamby"),
            new Faq("Is it absolutely language-independent? What about Chinese?", "Yes. Slamby Twister can make a perfect category recommendation in all languages providing the same accuracy level as well as in Asian languages. Such as; Chinese, Malay, Thai, Vietnamese than in others."),
            new Faq("What is/are the difference(s) between Slamby and other solution providers?", "Slamby products are open-sourced products with full transparency. All the features for data processing are instant, your team can use Slamby for production within minutes. Slamby is available as SaaS, or you can download and install it on your machines or in your private cloud. Using Slamby you can use all of our software to support your team. Slamby API, SDKs and desktop applications are all for you."),
            new Faq("I have a Classified Ad Site, how can I get benefit from Slamby?", "On your Slamby server, you can store and manage your real-time data, automatize your data management workflows, and get smart insights from your data. By using Slamby services; you can build category recommendation engine, re-categorize your database (in need of re-structuring existing category tree), automize category moderation, detect duplicated products, build similar/related product recommendation engine and so on… Contact our sales team and let us evaluate your business model to inform you how we can empower your business."),
            new Faq("What is the expected accuracy rate for category recommendation?", "Using Slamby Twister algorithm, Slamby offers precise text categorization technology. Average accuracy level for Classified Ad Site using 2.000 categories and normal training dataset: 85-94%; working with clean training database: 94-99%."),
            new Faq("How can it be up to 99% accuracy? It means almost perfect categorization solution?", "Accuracy rate depends on the quality of the training dataset. You train the Slamby classifier using “training dataset” and quality means how well training data are categorized manually earlier. During the training period, Slamby assumes all the given data are correct excluded some exceptions. Slamby can manage minor mistakes in the training dataset. Shortly for the best data-processing result, the more data you upload, the most accurate results you will have."),
            new Faq("How can I integrate Slamby?", "No need for special admin site or complicated process! It works as an API, so it can be integrated into the existing processes in a very short time of period. (Slamby support team may assist you.) Available SDKs are PHP, Python,Net C#, Javascript/Node.js, TypeScript. See our Github page."),
            new Faq("How much does Slamby cost?", "You can start for 45 € / core / month and then, you can upgrade your server anytime depends on your need, see our pricing here."),
            new Faq("Which server size do I need?", "It depends on the data size you store; service numbers and request numbers. Generally, as more data, you wish to manage as bigger server you need, but it strongly depends on the planned usage, required SLA and response time. As a tip: for start use Slamby with minimum 2 processor cores and 4 GB ram, it should be enough for start."),
            new Faq("Does Slamby provide scalable servers?", "Managing data requires power and scalability. Using parallel working and dedicated servers, Slamby provides horizontal and vertical scalability at the same time."),
            new Faq("What does the SLA rate Slamby provide?", "SLA depends on the purchased server number. The basic level is 95%. Can be increased up to 99 % by using vertical servers."),
            new Faq("Can I upgrade or downgrade my Slamby Server using SaaS?", "Slamby offers perfect flexibility. You can upgrade or downgrade your server anytime."),
            new Faq("Can I download and install Slamby API on my machines?", "Yes, you can easily download and install it by 4 steps. Check our /getting-started tutorial."),
            new Faq("What is the query limit in Slamby?", "There is no query limit. Data is yours, server is yours."),
            new Faq("How can I cancel my contract?", "We are here to provide great solutions to empower your business. If you feel the opposite, you are free to terminate your contract anytime."),
            new Faq("Can Slamby assure my data security?", "Data privacy is very important to us and we do our best to protect your data and information. Therefore, Slamby offers dedicated servers to maximize your data security. Each customer has a dedicated Slamby server with dedicated resources and enterprise-grade hosting security. If you need the maximum data privacy, then install Slamby API inside on your machine(s) and do not let your data out of your company."),
            new Faq("What are Slamby’s terms and conditions and privacy policy?", "You can see our terms and conditions and privacy policy under our legal section.")
        ];
    }
    ngOnInit() {
        this.search("");
    }
};
SupportComponent = __decorate([
    Component({
        template: `<pm-header></pm-header><section class="qa"><div class="container"><div class="row"><div class="col-md-12"><h2 class="page-header">Frequently asked questions</h2></div><div class="col-md-6"><input type="search" #box (keyup)="search(box.value)" class="form-control" placeholder="Search for faq" /></div></div></div><div class="container"><div class="row"><div class="item" template="ngFor let item of faqResult"><h2>{{item.question}}</h2><p class="lead">{{item.answer}}</p></div></div></div></section>`,
        styles: [`section.qa .item{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){section.qa .item{float:left;width:50%}}
`],
    })
], SupportComponent);

let AppModule = class AppModule {
};
AppModule = __decorate([
    NgModule({
        imports: [
            BrowserModule,
            RouterModule.forRoot([
                {
                    path: '',
                    component: HomeComponent,
                    pathMatch: 'full'
                },
                {
                    path: 'home',
                    component: HomeComponent,
                    pathMatch: 'full'
                },
                {
                    path: 'insight',
                    component: InsightComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Insight" } }
                },
                {
                    path: 'pricing',
                    component: PricingComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Pricing", description: "Slamby pricing, on-premise, SaaS, core-based, open-source." } }
                },
                {
                    path: '404',
                    component: NotFoundPageComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Page not found", description: "The requested page is not found." } }
                },
                {
                    path: 'thank-you',
                    component: ThankYouComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Thank You" } }
                },
                {
                    path: 'getting-started',
                    component: GettingStartedComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Getting started", description: "Quick tutorial about Slamby install steps, pricing, licenses, support, SDKs, related softwares and Slamby Insight." } }
                },
                {
                    path: 'partners',
                    component: PartnersComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Partners", description: "Slamby partners who helped a lot to us." } }
                },
                {
                    path: 'company',
                    component: CompanyComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Company", description: "We love what we do, if you need more information about Slamby, just contact us anytime at hello@slamby.com" } }
                },
                {
                    path: 'legal',
                    component: LegalComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Legal" } }
                },
                {
                    path: 'legal/privacy-policy',
                    component: PrivacyPolicyComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Privacy policy" } }
                },
                {
                    path: 'legal/commercial-license',
                    component: CommercialLicenseComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Commercial license" } }
                },
                {
                    path: 'legal/commercial-license-oem',
                    component: CommercialLicenseOemComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Commercial license for OEMs" } }
                },
                {
                    path: 'legal/gnu-agpl-license',
                    component: GnuAgplLicenseComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "GNU AGPL V3 license" } }
                },
                {
                    path: 'legal/open-source-license',
                    component: OpenSourceLicenseComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Open-source license" } }
                },
                {
                    path: 'support',
                    component: SupportComponent,
                    pathMatch: 'full',
                    data: { meta: { title: "Support" } }
                },
                {
                    path: '**',
                    redirectTo: '/404'
                }
            ])
        ],
        declarations: [
            AppComponent,
            HeaderComponent,
            FooterComponent,
            NotFoundPageComponent,
            ThankYouComponent,
            GettingStartedComponent,
            InsightComponent,
            HomeComponent,
            SubmenuComponent,
            PricingComponent,
            PartnersComponent,
            CompanyComponent,
            PrivacyPolicyComponent,
            CommercialLicenseComponent,
            CommercialLicenseOemComponent,
            GnuAgplLicenseComponent,
            OpenSourceLicenseComponent,
            LegalComponent,
            LegalMenuComponent,
            SupportComponent
        ],
        providers: [],
        bootstrap: [AppComponent]
    })
], AppModule);

const styles = ['section.header[_ngcontent-%COMP%]{background: url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/header.jpg") 0 0 repeat;background-position:center;margin-top:-50px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{margin-left:-15px;margin-right:-15px;padding-bottom:5em}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:before, section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:after{content:" ";display:table}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:after{clear:both}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;margin-bottom:5em}@media (min-width: 992px){section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]{float:left;width:50%}}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{color:white;font-size:50px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   p.lead[_ngcontent-%COMP%]{color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   a.btn-default[_ngcontent-%COMP%]{background-color:transparent !important;border-color:white;color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   a.btn-default[_ngcontent-%COMP%]:hover{border-color:rgba(255,255,255,0.7)}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]{margin-top:15px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{display:inline-block;color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:not(:last-of-type){margin-right:15px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .github[_ngcontent-%COMP%]{margin-top:70px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .github[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:white;font-size:50px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .signup-form[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;color:white}@media (min-width: 992px){section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .signup-form[_ngcontent-%COMP%]{float:left;width:33.33333%}}@media (min-width: 992px){section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .signup-form[_ngcontent-%COMP%]{margin-left:8.33333%}}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .signup-form[_ngcontent-%COMP%]   .form-group[_ngcontent-%COMP%]{margin-top:5px}.customers[_ngcontent-%COMP%]{margin-top:30px}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]{margin-left:-15px;margin-right:-15px}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]:before, .customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]:after{content:" ";display:table}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]:after{clear:both}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;min-height:150px}@media (min-width: 768px){.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]{float:left;width:33.33333%}}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]   .jofogas[_ngcontent-%COMP%]{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/jofogas.jpg") 0 0 no-repeat;background-size:60%;background-position:center}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]   .schibsted[_ngcontent-%COMP%]{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/schibsted.png") 0 0 no-repeat;background-size:60%;background-position:center}.customers[_ngcontent-%COMP%]   .holder[_ngcontent-%COMP%]   .lazada[_ngcontent-%COMP%]{background:url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/home/lazada.png") 0 0 no-repeat;background-size:60%;background-position:center}'];

const styles$1 = ['section[_ngcontent-%COMP%]{background-color:rgba(0,0,0,0.85);position:relative;height:44px;z-index:9999}section[_ngcontent-%COMP%]   .sl-main[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin:0;padding:0}@media (min-width: 992px){section[_ngcontent-%COMP%]   .sl-main[_ngcontent-%COMP%]{float:left;width:100%}}.logo[_ngcontent-%COMP%]{font-family:slamby-logo}.list[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]{margin:0;padding:0;list-style:none;display:flex;justify-content:space-between}.list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline-block;position:relative;height:44px}.list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%], .list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover, .list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active, .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active, .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active{padding:0 15px 0 15px;text-decoration:none;color:white;font-size:16px;line-height:2.75;font-weight:300}.list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .sla-external-link[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .sla-external-link[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   .sla-external-link[_ngcontent-%COMP%], .list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover   .sla-external-link[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover   .sla-external-link[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:hover   .sla-external-link[_ngcontent-%COMP%], .list[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active   .sla-external-link[_ngcontent-%COMP%], .sla-nav-header[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active   .sla-external-link[_ngcontent-%COMP%], .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:active   .sla-external-link[_ngcontent-%COMP%]{font-size:12px}.sla-nav-header[_ngcontent-%COMP%]   .menu-open-btn[_ngcontent-%COMP%]{cursor:pointer}@media (max-width: 991px){.sla-nav-menu-items[_ngcontent-%COMP%]{display:none}section.sla-nav-menu-opened[_ngcontent-%COMP%]{position:fixed;top:0px;height:100%;width:100%;overflow-y:hidden}section.sla-nav-menu-opened[_ngcontent-%COMP%]   .sla-nav-menu-items[_ngcontent-%COMP%]{display:block}section.sla-nav-menu-opened[_ngcontent-%COMP%]   .sla-nav-menu-items[_ngcontent-%COMP%]   .logo[_ngcontent-%COMP%]{display:none !important}section.sla-nav-menu-opened[_ngcontent-%COMP%]   .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:block !important;width:100%}section.sla-nav-menu-opened[_ngcontent-%COMP%]   .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{display:block;width:100%}section.sla-nav-menu-opened[_ngcontent-%COMP%]   .sla-nav-menu-items[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover{background-color:rgba(255,255,255,0.27)}.hidden-block[_ngcontent-%COMP%]{position:relative;display:block;height:44px;width:100%}}@media (min-width: 992px){.sla-nav-header[_ngcontent-%COMP%]{display:none}}'];

class Wrapper_RouterLinkWithHref {
    constructor(p0, p1, p2) {
        this._changed = false;
        this._changes = {};
        this.context = new RouterLinkWithHref(p0, p1, p2);
        this._expr_0 = UNINITIALIZED;
        this._expr_1 = UNINITIALIZED;
        this._expr_2 = UNINITIALIZED;
        this._expr_3 = UNINITIALIZED;
        this._expr_4 = UNINITIALIZED;
        this._expr_5 = UNINITIALIZED;
        this._expr_6 = UNINITIALIZED;
        this._expr_7 = UNINITIALIZED;
        this._expr_8 = UNINITIALIZED;
        this._expr_9 = UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
    }
    check_target(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.target = currValue;
            this._changes['target'] = new SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    }
    check_queryParams(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.queryParams = currValue;
            this._changes['queryParams'] = new SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    }
    check_fragment(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.fragment = currValue;
            this._changes['fragment'] = new SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    }
    check_preserveQueryParams(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.preserveQueryParams = currValue;
            this._changes['preserveQueryParams'] = new SimpleChange(this._expr_3, currValue);
            this._expr_3 = currValue;
        }
    }
    check_preserveFragment(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.preserveFragment = currValue;
            this._changes['preserveFragment'] = new SimpleChange(this._expr_4, currValue);
            this._expr_4 = currValue;
        }
    }
    check_skipLocationChange(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.skipLocationChange = currValue;
            this._changes['skipLocationChange'] = new SimpleChange(this._expr_5, currValue);
            this._expr_5 = currValue;
        }
    }
    check_replaceUrl(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_6, currValue))) {
            this._changed = true;
            this.context.replaceUrl = currValue;
            this._changes['replaceUrl'] = new SimpleChange(this._expr_6, currValue);
            this._expr_6 = currValue;
        }
    }
    check_routerLink(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_7, currValue))) {
            this._changed = true;
            this.context.routerLink = currValue;
            this._changes['routerLink'] = new SimpleChange(this._expr_7, currValue);
            this._expr_7 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_8 = this.context.target;
        if (checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            view.renderer.setElementAttribute(el, 'target', ((currVal_8 == null) ? null : currVal_8.toString()));
            this._expr_8 = currVal_8;
        }
        const currVal_9 = this.context.href;
        if (checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            view.renderer.setElementProperty(el, 'href', view.viewUtils.sanitizer.sanitize(SecurityContext.URL, currVal_9));
            this._expr_9 = currVal_9;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context.onClick($event.button, $event.ctrlKey, $event.metaKey) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}

class Wrapper_NgIf {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new NgIf(p0, p1);
        this._expr_0 = UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_ngIf(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngIf = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}

class Wrapper_NgFor {
    constructor(p0, p1, p2, p3) {
        this._changed = false;
        this._changes = {};
        this.context = new NgFor(p0, p1, p2, p3);
        this._expr_0 = UNINITIALIZED;
        this._expr_1 = UNINITIALIZED;
        this._expr_2 = UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_ngForOf(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngForOf = currValue;
            this._changes['ngForOf'] = new SimpleChange(this._expr_0, currValue);
            this._expr_0 = currValue;
        }
    }
    check_ngForTrackBy(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.ngForTrackBy = currValue;
            this._changes['ngForTrackBy'] = new SimpleChange(this._expr_1, currValue);
            this._expr_1 = currValue;
        }
    }
    check_ngForTemplate(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.ngForTemplate = currValue;
            this._changes['ngForTemplate'] = new SimpleChange(this._expr_2, currValue);
            this._expr_2 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if (changed) {
                this.context.ngOnChanges(this._changes);
                this._changes = {};
            }
            this.context.ngDoCheck();
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}

class Wrapper_HeaderComponent {
    constructor() {
        this._changed = false;
        this.context = new HeaderComponent();
        this._expr_0 = UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_theme(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.theme = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_HeaderComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_HeaderComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HeaderComponent_Host0, renderType_HeaderComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'pm-header', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._HeaderComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const HeaderComponentNgFactory = new ComponentFactory('pm-header', View_HeaderComponent_Host0, HeaderComponent);
const styles_HeaderComponent = [styles$1];
class View_HeaderComponent2 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_HeaderComponent2, renderType_HeaderComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._arr_4 = pureProxy1((p0) => {
            return [p0];
        });
        this._expr_5 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'a', EMPTY_INLINE_ARRAY, null);
        this._RouterLinkWithHref_0_3 = new Wrapper_RouterLinkWithHref(this.parentView.parentView.parentView.injectorGet(Router, this.parentView.parentView.parentIndex), this.parentView.parentView.parentView.injectorGet(ActivatedRoute, this.parentView.parentView.parentIndex), this.parentView.parentView.parentView.injectorGet(LocationStrategy, this.parentView.parentView.parentIndex));
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'span', EMPTY_INLINE_ARRAY, null);
        this._text_2 = this.renderer.createText(this._el_1, '', null);
        var disposable_0 = subscribeToRenderElement(this, this._el_0, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._text_2
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === RouterLinkWithHref) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 2)))) {
            return this._RouterLinkWithHref_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = this._arr_4(this.parentView.context.$implicit.link);
        this._RouterLinkWithHref_0_3.check_routerLink(currVal_0_0_0, throwOnChange, false);
        this._RouterLinkWithHref_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._RouterLinkWithHref_0_3.checkHost(this, this, this._el_0, throwOnChange);
        const currVal_5 = inlineInterpolate(1, '', this.parentView.context.$implicit.name, '');
        if (checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setText(this._text_2, currVal_5);
            this._expr_5 = currVal_5;
        }
    }
    destroyInternal() {
        this._RouterLinkWithHref_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    handleEvent_0(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_0_3.handleEvent(eventName, $event) && result);
        return result;
    }
}
class View_HeaderComponent3 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_HeaderComponent3, renderType_HeaderComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_4 = UNINITIALIZED;
        this._expr_5 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'a', new InlineArray2(2, 'target', '_blank'), null);
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'span', EMPTY_INLINE_ARRAY, null);
        this._text_2 = this.renderer.createText(this._el_1, '', null);
        this._el_3 = createRenderElement(this.renderer, this._el_1, 'i', new InlineArray4(4, 'aria-hidden', 'true', 'class', 'fa fa-external-link sla-external-link'), null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._text_2,
            this._el_3
        ]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_4 = inlineInterpolate(1, '', this.parentView.context.$implicit.link, '');
        if (checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            this.renderer.setElementProperty(this._el_0, 'href', this.viewUtils.sanitizer.sanitize(SecurityContext.URL, currVal_4));
            this._expr_4 = currVal_4;
        }
        const currVal_5 = inlineInterpolate(1, '', this.parentView.context.$implicit.name, ' ');
        if (checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setText(this._text_2, currVal_5);
            this._expr_5 = currVal_5;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
class View_HeaderComponent1 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_HeaderComponent1, renderType_HeaderComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_9 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'li', EMPTY_INLINE_ARRAY, null);
        this._anchor_1 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_1 = new ViewContainer(1, 0, this, this._anchor_1);
        this._TemplateRef_1_5 = new TemplateRef_(this, 1, this._anchor_1);
        this._NgIf_1_6 = new Wrapper_NgIf(this._vc_1.vcRef, this._TemplateRef_1_5);
        this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0, null);
        this._vc_2 = new ViewContainer(2, 0, this, this._anchor_2);
        this._TemplateRef_2_5 = new TemplateRef_(this, 2, this._anchor_2);
        this._NgIf_2_6 = new Wrapper_NgIf(this._vc_2.vcRef, this._TemplateRef_2_5);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._anchor_1,
            this._anchor_2
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_5;
        }
        if (((token === NgIf) && (1 === requestNodeIndex))) {
            return this._NgIf_1_6.context;
        }
        if (((token === TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === NgIf) && (2 === requestNodeIndex))) {
            return this._NgIf_2_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1_0_0 = !this.context.$implicit.externalLink;
        this._NgIf_1_6.check_ngIf(currVal_1_0_0, throwOnChange, false);
        this._NgIf_1_6.ngDoCheck(this, this._anchor_1, throwOnChange);
        const currVal_2_0_0 = this.context.$implicit.externalLink;
        this._NgIf_2_6.check_ngIf(currVal_2_0_0, throwOnChange, false);
        this._NgIf_2_6.ngDoCheck(this, this._anchor_2, throwOnChange);
        this._vc_1.detectChangesInNestedViews(throwOnChange);
        this._vc_2.detectChangesInNestedViews(throwOnChange);
        const currVal_9 = inlineInterpolate(1, '', this.context.$implicit.customClass, '');
        if (checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementProperty(this._el_0, 'className', currVal_9);
            this._expr_9 = currVal_9;
        }
    }
    destroyInternal() {
        this._vc_1.destroyNestedViews();
        this._vc_2.destroyNestedViews();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 1)) {
            return new View_HeaderComponent2(this.viewUtils, this, 1, this._anchor_1, this._vc_1);
        }
        if ((nodeIndex == 2)) {
            return new View_HeaderComponent3(this.viewUtils, this, 2, this._anchor_2, this._vc_2);
        }
        return null;
    }
}
var renderType_HeaderComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_HeaderComponent, {});
class View_HeaderComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HeaderComponent0, renderType_HeaderComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
        this._expr_18 = UNINITIALIZED;
        this._arr_19 = pureProxy1((p0) => {
            return [p0];
        });
        this._expr_20 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'section', EMPTY_INLINE_ARRAY, null);
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'sl-main'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'ul', new InlineArray2(2, 'class', 'sla-nav-header'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'li', new InlineArray2(2, 'class', 'logo'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'a', EMPTY_INLINE_ARRAY, null);
        this._RouterLinkWithHref_5_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._el_6 = createRenderElement(this.renderer, this._el_5, 'span', EMPTY_INLINE_ARRAY, null);
        this._text_7 = this.renderer.createText(this._el_6, 'Slamby', null);
        this._el_8 = createRenderElement(this.renderer, this._el_3, 'li', new InlineArray2(2, 'class', 'menu-open-btn'), null);
        this._el_9 = createRenderElement(this.renderer, this._el_8, 'a', EMPTY_INLINE_ARRAY, null);
        this._el_10 = createRenderElement(this.renderer, this._el_9, 'i', new InlineArray4(4, 'aria-hidden', 'true', 'class', 'fa fa-bars'), null);
        this._el_11 = createRenderElement(this.renderer, this._el_2, 'ul', new InlineArray2(2, 'class', 'sla-nav-menu-items'), null);
        this._anchor_12 = this.renderer.createTemplateAnchor(this._el_11, null);
        this._vc_12 = new ViewContainer(12, 11, this, this._anchor_12);
        this._TemplateRef_12_5 = new TemplateRef_(this, 12, this._anchor_12);
        this._NgFor_12_6 = new Wrapper_NgFor(this._vc_12.vcRef, this._TemplateRef_12_5, this.parentView.injectorGet(IterableDiffers, this.parentIndex), this.ref);
        this._el_13 = createRenderElement(this.renderer, parentRenderNode, 'div', EMPTY_INLINE_ARRAY, null);
        var disposable_0 = subscribeToRenderElement(this, this._el_5, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_5));
        var disposable_1 = subscribeToRenderElement(this, this._el_8, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_8));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._el_9,
            this._el_10,
            this._el_11,
            this._anchor_12,
            this._el_13
        ]), [
            disposable_0,
            disposable_1
        ]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === RouterLinkWithHref) && ((5 <= requestNodeIndex) && (requestNodeIndex <= 7)))) {
            return this._RouterLinkWithHref_5_3.context;
        }
        if (((token === TemplateRef) && (12 === requestNodeIndex))) {
            return this._TemplateRef_12_5;
        }
        if (((token === NgFor) && (12 === requestNodeIndex))) {
            return this._NgFor_12_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_5_0_0 = this._arr_19('/home');
        this._RouterLinkWithHref_5_3.check_routerLink(currVal_5_0_0, throwOnChange, false);
        this._RouterLinkWithHref_5_3.ngDoCheck(this, this._el_5, throwOnChange);
        const currVal_12_0_0 = this.context.menuItems;
        this._NgFor_12_6.check_ngForOf(currVal_12_0_0, throwOnChange, false);
        this._NgFor_12_6.ngDoCheck(this, this._anchor_12, throwOnChange);
        this._vc_12.detectChangesInNestedViews(throwOnChange);
        const currVal_18 = this.context.isOpen;
        if (checkBinding(throwOnChange, this._expr_18, currVal_18)) {
            this.renderer.setElementClass(this._el_0, 'sla-nav-menu-opened', currVal_18);
            this._expr_18 = currVal_18;
        }
        this._RouterLinkWithHref_5_3.checkHost(this, this, this._el_5, throwOnChange);
        const currVal_20 = this.context.isOpen;
        if (checkBinding(throwOnChange, this._expr_20, currVal_20)) {
            this.renderer.setElementClass(this._el_13, 'hidden-block', currVal_20);
            this._expr_20 = currVal_20;
        }
    }
    destroyInternal() {
        this._vc_12.destroyNestedViews();
        this._RouterLinkWithHref_5_3.ngOnDestroy();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 12)) {
            return new View_HeaderComponent1(this.viewUtils, this, 12, this._anchor_12, this._vc_12);
        }
        return null;
    }
    handleEvent_5(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_5_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_8(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context.menuOpen() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}

class Wrapper_HomeComponent {
    constructor() {
        this._changed = false;
        this.context = new HomeComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_HomeComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_HomeComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HomeComponent_Host0, renderType_HomeComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_HomeComponent0(this.viewUtils, this, 0, this._el_0);
        this._HomeComponent_0_3 = new Wrapper_HomeComponent();
        this.compView_0.create(this._HomeComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._HomeComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HomeComponent) && (0 === requestNodeIndex))) {
            return this._HomeComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HomeComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const HomeComponentNgFactory = new ComponentFactory('ng-component', View_HomeComponent_Host0, HomeComponent);
const styles_HomeComponent = [styles];
var renderType_HomeComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_HomeComponent, {});
class View_HomeComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_HomeComponent0, renderType_HomeComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'header'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'message'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'head'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, 'Smart machine learning for classifieds', null);
        this._el_7 = createRenderElement(this.renderer, this._el_4, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_8 = this.renderer.createText(this._el_7, 'Slamby is a great tool for classifieds to do perfect machine learning. Category recommendation, keyword-extraction, duplicate search, matchmaking.', null);
        this._el_9 = createRenderElement(this.renderer, this._el_4, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_10 = this.renderer.createText(this._el_9, 'Open-source, SaaS, on-premise install.', null);
        this._el_11 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'signup-form'), null);
        this._el_12 = createRenderElement(this.renderer, this._el_11, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_13 = this.renderer.createText(this._el_12, 'Get more information', null);
        this._el_14 = createRenderElement(this.renderer, this._el_11, 'form', new InlineArray16(10, 'action', '//slamby.us8.list-manage.com/subscribe/post?u=2cc8f967bed26c6531c44c771&amp;id=74a478b46d', 'class', 'validate form', 'id', 'mc-embedded-subscribe-form', 'method', 'post', 'name', 'mc-embedded-subscribe-form'), null);
        this._el_15 = createRenderElement(this.renderer, this._el_14, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._el_16 = createRenderElement(this.renderer, this._el_15, 'input', new InlineArrayDynamic(20, 'angulartics2On', 'click', 'angularticsCategory', 'home-page', 'angularticsEvent', 'newsletter-emailField-clicked', 'class', 'form-control', 'id', 'mce-EMAIL', 'name', 'EMAIL', 'placeholder', 'E-mail address', 'required', 'required', 'type', 'email', 'value', ''), null);
        this._el_17 = createRenderElement(this.renderer, this._el_14, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._el_18 = createRenderElement(this.renderer, this._el_17, 'input', new InlineArray16(14, 'class', 'form-control', 'id', 'mce-FNAME', 'name', 'FNAME', 'placeholder', 'First name', 'required', 'required', 'type', 'text', 'value', ''), null);
        this._el_19 = createRenderElement(this.renderer, this._el_14, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._el_20 = createRenderElement(this.renderer, this._el_19, 'input', new InlineArray16(12, 'class', 'form-control', 'id', 'mce-LNAME', 'placeholder', 'Last name', 'required', 'required', 'type', 'text', 'value', ''), null);
        this._el_21 = createRenderElement(this.renderer, this._el_14, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._el_22 = createRenderElement(this.renderer, this._el_21, 'input', new InlineArray16(14, 'angulartics2On', 'click', 'angularticsCategory', 'Marketing', 'angularticsEvent', 'NewsletterSignUp-clicked', 'class', 'btn btn-default form-control', 'required', 'required', 'type', 'submit', 'value', 'Get more        information'), null);
        this._el_23 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'customers'), null);
        this._el_24 = createRenderElement(this.renderer, this._el_23, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_25 = createRenderElement(this.renderer, this._el_24, 'div', new InlineArray2(2, 'class', 'holder'), null);
        this._el_26 = createRenderElement(this.renderer, this._el_25, 'div', new InlineArray2(2, 'class', 'item jofogas'), null);
        this._el_27 = createRenderElement(this.renderer, this._el_25, 'div', new InlineArray2(2, 'class', 'item schibsted'), null);
        this._el_28 = createRenderElement(this.renderer, this._el_25, 'div', new InlineArray2(2, 'class', 'item lazada'), null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._el_15,
            this._el_16,
            this._el_17,
            this._el_18,
            this._el_19,
            this._el_20,
            this._el_21,
            this._el_22,
            this._el_23,
            this._el_24,
            this._el_25,
            this._el_26,
            this._el_27,
            this._el_28
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$2 = ['section.header[_ngcontent-%COMP%]{background:#2e7bcf url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/insight/images/header.jpg") 0 0 repeat;margin-top:-50px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{margin-left:-15px;margin-right:-15px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:before, section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:after{content:" ";display:table}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]:after{clear:both}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;margin-top:10em;margin-bottom:5em}@media (min-width: 992px){section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]{float:left;width:66.66667%}}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]{color:white;font-size:50px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   p.lead[_ngcontent-%COMP%]{color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   a.btn-default[_ngcontent-%COMP%]{background-color:transparent !important;border-color:white;color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   a.btn-default[_ngcontent-%COMP%]:hover{border-color:rgba(255,255,255,0.7)}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]{margin-top:15px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{display:inline-block;color:white}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .list[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]:not(:last-of-type){margin-right:15px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .github[_ngcontent-%COMP%]{margin-top:70px}section.header[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]   .head[_ngcontent-%COMP%]   .github[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{color:white;font-size:50px}'];

class Wrapper_InsightComponent {
    constructor() {
        this._changed = false;
        this.context = new InsightComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_InsightComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_InsightComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_InsightComponent_Host0, renderType_InsightComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_InsightComponent0(this.viewUtils, this, 0, this._el_0);
        this._InsightComponent_0_3 = new Wrapper_InsightComponent();
        this.compView_0.create(this._InsightComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._InsightComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === InsightComponent) && (0 === requestNodeIndex))) {
            return this._InsightComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._InsightComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const InsightComponentNgFactory = new ComponentFactory('ng-component', View_InsightComponent_Host0, InsightComponent);
const styles_InsightComponent = [styles$2];
var renderType_InsightComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_InsightComponent, {});
class View_InsightComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_InsightComponent0, renderType_InsightComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'header'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n        ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_4, 'div', new InlineArray2(2, 'class', 'message'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n            ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'div', new InlineArray2(2, 'class', 'head'), null);
        this._text_9 = this.renderer.createText(this._el_8, '\n                ', null);
        this._el_10 = createRenderElement(this.renderer, this._el_8, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_11 = this.renderer.createText(this._el_10, 'A smart way to work', null);
        this._text_12 = this.renderer.createText(this._el_8, '\n                ', null);
        this._el_13 = createRenderElement(this.renderer, this._el_8, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_14 = this.renderer.createText(this._el_13, '\n                    Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quisquam accusamus quia, illo unde voluptate voluptates saepe. Commodi, molestias nihil laudantium officia hic. Hic dignissimos recusandae ullam, error fugit, dolores tempore!\n                ', null);
        this._text_15 = this.renderer.createText(this._el_8, '\n                ', null);
        this._el_16 = createRenderElement(this.renderer, this._el_8, 'a', new InlineArray16(12, 'angulartics2On', 'click', 'angularticsCategory', 'Insight', 'angularticsEvent', 'Download General', 'angularticsProperties', '{label: \'General\'}', 'class', 'btn btn-default', 'href', 'https://insight.slamby.com'), null);
        this._text_17 = this.renderer.createText(this._el_16, 'Download', null);
        this._text_18 = this.renderer.createText(this._el_8, '\n                ', null);
        this._el_19 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'list'), null);
        this._text_20 = this.renderer.createText(this._el_19, '\n                    ', null);
        this._el_21 = createRenderElement(this.renderer, this._el_19, 'a', new InlineArray2(2, 'href', 'https://instight.slamby.com/mac'), null);
        this._text_22 = this.renderer.createText(this._el_21, 'Download for Mac', null);
        this._text_23 = this.renderer.createText(this._el_19, '\n                    ', null);
        this._el_24 = createRenderElement(this.renderer, this._el_19, 'a', new InlineArray2(2, 'href', 'https://instight.slamby.com/windows'), null);
        this._text_25 = this.renderer.createText(this._el_24, 'Download for Windows', null);
        this._text_26 = this.renderer.createText(this._el_19, '\n                    ', null);
        this._el_27 = createRenderElement(this.renderer, this._el_19, 'a', new InlineArray2(2, 'href', 'https://instight.slamby.com/linux'), null);
        this._text_28 = this.renderer.createText(this._el_27, 'Download for Linux', null);
        this._text_29 = this.renderer.createText(this._el_19, '\n                ', null);
        this._text_30 = this.renderer.createText(this._el_8, '\n                ', null);
        this._el_31 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'github'), null);
        this._text_32 = this.renderer.createText(this._el_31, '\n                    ', null);
        this._el_33 = createRenderElement(this.renderer, this._el_31, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-insight', 'target', '_blank'), null);
        this._el_34 = createRenderElement(this.renderer, this._el_33, 'i', new InlineArray4(4, 'aria-hidden', 'true', 'class', 'fa fa-github'), null);
        this._text_35 = this.renderer.createText(this._el_31, '\n                ', null);
        this._text_36 = this.renderer.createText(this._el_8, '\n            ', null);
        this._text_37 = this.renderer.createText(this._el_6, '\n        ', null);
        this._text_38 = this.renderer.createText(this._el_4, '\n    ', null);
        this._text_39 = this.renderer.createText(this._el_2, '\n', null);
        this._text_40 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_41 = createRenderElement(this.renderer, parentRenderNode, 'section', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, '\n    ', null);
        this._el_43 = createRenderElement(this.renderer, this._el_41, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_44 = this.renderer.createText(this._el_43, '\n        ', null);
        this._el_45 = createRenderElement(this.renderer, this._el_43, 'form', new InlineArray16(14, 'action', '//slamby.us8.list-manage.com/subscribe/post?u=2cc8f967bed26c6531c44c771&id=f805acd7c9', 'class', 'validate form', 'id', 'mc-embedded-subscribe-form', 'method', 'post', 'name', 'mc-embedded-subscribe-form', 'novalidate', '', 'target', '_blank'), null);
        this._text_46 = this.renderer.createText(this._el_45, '\n            ', null);
        this._el_47 = createRenderElement(this.renderer, this._el_45, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._text_48 = this.renderer.createText(this._el_47, '\n                ', null);
        this._el_49 = createRenderElement(this.renderer, this._el_47, 'label', new InlineArray2(2, 'for', 'mce-EMAIL'), null);
        this._text_50 = this.renderer.createText(this._el_49, 'Email Address', null);
        this._el_51 = createRenderElement(this.renderer, this._el_49, 'span', new InlineArray2(2, 'class', 'asterisk'), null);
        this._text_52 = this.renderer.createText(this._el_51, '*', null);
        this._text_53 = this.renderer.createText(this._el_47, '\n                ', null);
        this._el_54 = createRenderElement(this.renderer, this._el_47, 'input', new InlineArray16(10, 'class', 'form-control', 'id', 'mce-EMAIL', 'name', 'EMAIL', 'type', 'email', 'value', ''), null);
        this._text_55 = this.renderer.createText(this._el_47, '\n            ', null);
        this._text_56 = this.renderer.createText(this._el_45, '\n            ', null);
        this._el_57 = createRenderElement(this.renderer, this._el_45, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._text_58 = this.renderer.createText(this._el_57, '\n                ', null);
        this._el_59 = createRenderElement(this.renderer, this._el_57, 'label', new InlineArray2(2, 'for', 'mce-FNAME'), null);
        this._text_60 = this.renderer.createText(this._el_59, 'First Name ', null);
        this._text_61 = this.renderer.createText(this._el_57, '\n                ', null);
        this._el_62 = createRenderElement(this.renderer, this._el_57, 'input', new InlineArray16(10, 'class', 'form-control', 'id', 'mce-FNAME', 'name', 'FNAME', 'type', 'text', 'value', ''), null);
        this._text_63 = this.renderer.createText(this._el_57, '\n            ', null);
        this._text_64 = this.renderer.createText(this._el_45, '\n            ', null);
        this._el_65 = createRenderElement(this.renderer, this._el_45, 'div', new InlineArray2(2, 'class', 'form-group'), null);
        this._text_66 = this.renderer.createText(this._el_65, '\n                ', null);
        this._el_67 = createRenderElement(this.renderer, this._el_65, 'input', new InlineArray16(12, 'angulartics2On', 'click', 'angularticsCategory', 'Marketing', 'angularticsEvent', 'NewsletterSignUp', 'class', 'btn btn-default', 'type', 'submit', 'value', 'Submit'), null);
        this._text_68 = this.renderer.createText(this._el_65, '\n            ', null);
        this._text_69 = this.renderer.createText(this._el_45, '\n        ', null);
        this._text_70 = this.renderer.createText(this._el_43, '\n    ', null);
        this._text_71 = this.renderer.createText(this._el_41, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._text_12,
            this._el_13,
            this._text_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._el_21,
            this._text_22,
            this._text_23,
            this._el_24,
            this._text_25,
            this._text_26,
            this._el_27,
            this._text_28,
            this._text_29,
            this._text_30,
            this._el_31,
            this._text_32,
            this._el_33,
            this._el_34,
            this._text_35,
            this._text_36,
            this._text_37,
            this._text_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._el_43,
            this._text_44,
            this._el_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._el_49,
            this._text_50,
            this._el_51,
            this._text_52,
            this._text_53,
            this._el_54,
            this._text_55,
            this._text_56,
            this._el_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._text_61,
            this._el_62,
            this._text_63,
            this._text_64,
            this._el_65,
            this._text_66,
            this._el_67,
            this._text_68,
            this._text_69,
            this._text_70,
            this._text_71
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$3 = ['section.main[_ngcontent-%COMP%]{margin-top:-50px;background:linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.3)),url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/pricing/bg2.jpg");background-repeat:repeat}section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]{margin-left:-15px;margin-right:-15px}section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]:before, section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]:after{content:" ";display:table}section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]:after{clear:both}section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]   .main-message[_ngcontent-%COMP%]{position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;background-color:rgba(255,255,255,0.97);margin-top:13em;margin-bottom:9em}@media (min-width: 768px){section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]   .main-message[_ngcontent-%COMP%]{float:left;width:66.66667%}}@media (min-width: 992px){section.main[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]   .main-message[_ngcontent-%COMP%]{float:left;width:50%}}.pricing[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-of-type{text-transform:capitalize}.pricing[_ngcontent-%COMP%]   table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:last-of-type{font-weight:500}'];

class Wrapper_PricingComponent {
    constructor() {
        this._changed = false;
        this.context = new PricingComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_PricingComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_PricingComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PricingComponent_Host0, renderType_PricingComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_PricingComponent0(this.viewUtils, this, 0, this._el_0);
        this._PricingComponent_0_3 = new Wrapper_PricingComponent();
        this.compView_0.create(this._PricingComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._PricingComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === PricingComponent) && (0 === requestNodeIndex))) {
            return this._PricingComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._PricingComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const PricingComponentNgFactory = new ComponentFactory('ng-component', View_PricingComponent_Host0, PricingComponent);
const styles_PricingComponent = [styles$3];
class View_PricingComponent1 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_PricingComponent1, renderType_PricingComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_15 = UNINITIALIZED;
        this._expr_16 = UNINITIALIZED;
        this._expr_17 = UNINITIALIZED;
        this._expr_18 = UNINITIALIZED;
        this._expr_19 = UNINITIALIZED;
        this._expr_20 = UNINITIALIZED;
        this._expr_21 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_2 = this.renderer.createText(this._el_1, '', null);
        this._el_3 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_4 = this.renderer.createText(this._el_3, '', null);
        this._el_5 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, '', null);
        this._el_7 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs'), null);
        this._text_8 = this.renderer.createText(this._el_7, '', null);
        this._el_9 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_10 = this.renderer.createText(this._el_9, '', null);
        this._el_11 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_12 = this.renderer.createText(this._el_11, '', null);
        this._el_13 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_14 = this.renderer.createText(this._el_13, '', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._el_13,
            this._text_14
        ]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_15 = inlineInterpolate(1, '', this.context.$implicit.name, '');
        if (checkBinding(throwOnChange, this._expr_15, currVal_15)) {
            this.renderer.setText(this._text_2, currVal_15);
            this._expr_15 = currVal_15;
        }
        const currVal_16 = inlineInterpolate(1, '', this.context.$implicit.core, '');
        if (checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            this.renderer.setText(this._text_4, currVal_16);
            this._expr_16 = currVal_16;
        }
        const currVal_17 = inlineInterpolate(1, '', this.context.$implicit.memory, '');
        if (checkBinding(throwOnChange, this._expr_17, currVal_17)) {
            this.renderer.setText(this._text_6, currVal_17);
            this._expr_17 = currVal_17;
        }
        const currVal_18 = inlineInterpolate(1, '', this.context.$implicit.storage, '');
        if (checkBinding(throwOnChange, this._expr_18, currVal_18)) {
            this.renderer.setText(this._text_8, currVal_18);
            this._expr_18 = currVal_18;
        }
        const currVal_19 = inlineInterpolate(1, '', this.context.$implicit.technicalFee, ' €');
        if (checkBinding(throwOnChange, this._expr_19, currVal_19)) {
            this.renderer.setText(this._text_10, currVal_19);
            this._expr_19 = currVal_19;
        }
        const currVal_20 = inlineInterpolate(1, '', this.context.$implicit.slambyLicenseFee, ' €');
        if (checkBinding(throwOnChange, this._expr_20, currVal_20)) {
            this.renderer.setText(this._text_12, currVal_20);
            this._expr_20 = currVal_20;
        }
        const currVal_21 = inlineInterpolate(1, '', this.context.$implicit.retailPrice, ' €');
        if (checkBinding(throwOnChange, this._expr_21, currVal_21)) {
            this.renderer.setText(this._text_14, currVal_21);
            this._expr_21 = currVal_21;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
class View_PricingComponent2 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_PricingComponent2, renderType_PricingComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_15 = UNINITIALIZED;
        this._expr_16 = UNINITIALIZED;
        this._expr_17 = UNINITIALIZED;
        this._expr_18 = UNINITIALIZED;
        this._expr_19 = UNINITIALIZED;
        this._expr_20 = UNINITIALIZED;
        this._expr_21 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_2 = this.renderer.createText(this._el_1, '', null);
        this._el_3 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_4 = this.renderer.createText(this._el_3, '', null);
        this._el_5 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, '', null);
        this._el_7 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs'), null);
        this._text_8 = this.renderer.createText(this._el_7, '', null);
        this._el_9 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_10 = this.renderer.createText(this._el_9, '', null);
        this._el_11 = createRenderElement(this.renderer, this._el_0, 'td', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_12 = this.renderer.createText(this._el_11, '', null);
        this._el_13 = createRenderElement(this.renderer, this._el_0, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_14 = this.renderer.createText(this._el_13, '', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._el_13,
            this._text_14
        ]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_15 = inlineInterpolate(1, '', this.context.$implicit.name, '');
        if (checkBinding(throwOnChange, this._expr_15, currVal_15)) {
            this.renderer.setText(this._text_2, currVal_15);
            this._expr_15 = currVal_15;
        }
        const currVal_16 = inlineInterpolate(1, '', this.context.$implicit.core, '');
        if (checkBinding(throwOnChange, this._expr_16, currVal_16)) {
            this.renderer.setText(this._text_4, currVal_16);
            this._expr_16 = currVal_16;
        }
        const currVal_17 = inlineInterpolate(1, '', this.context.$implicit.memory, '');
        if (checkBinding(throwOnChange, this._expr_17, currVal_17)) {
            this.renderer.setText(this._text_6, currVal_17);
            this._expr_17 = currVal_17;
        }
        const currVal_18 = inlineInterpolate(1, '', this.context.$implicit.storage, '');
        if (checkBinding(throwOnChange, this._expr_18, currVal_18)) {
            this.renderer.setText(this._text_8, currVal_18);
            this._expr_18 = currVal_18;
        }
        const currVal_19 = inlineInterpolate(1, '', this.context.$implicit.technicalFee, ' €');
        if (checkBinding(throwOnChange, this._expr_19, currVal_19)) {
            this.renderer.setText(this._text_10, currVal_19);
            this._expr_19 = currVal_19;
        }
        const currVal_20 = inlineInterpolate(1, '', this.context.$implicit.slambyLicenseFee, ' €');
        if (checkBinding(throwOnChange, this._expr_20, currVal_20)) {
            this.renderer.setText(this._text_12, currVal_20);
            this._expr_20 = currVal_20;
        }
        const currVal_21 = inlineInterpolate(1, '', this.context.$implicit.retailPrice, ' €');
        if (checkBinding(throwOnChange, this._expr_21, currVal_21)) {
            this.renderer.setText(this._text_14, currVal_21);
            this._expr_21 = currVal_21;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
var renderType_PricingComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_PricingComponent, {});
class View_PricingComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PricingComponent0, renderType_PricingComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
        this._arr_167 = pureProxy1((p0) => {
            return [p0];
        });
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'main'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'main-message'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_6 = this.renderer.createText(this._el_5, '45 € / core / month', null);
        this._el_7 = createRenderElement(this.renderer, this._el_4, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_8 = this.renderer.createText(this._el_7, 'Start using Slamby for a price of a cup of coffee per core. Use it as a SaaS or install it on your machine.', null);
        this._el_9 = createRenderElement(this.renderer, this._el_4, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_10 = this.renderer.createText(this._el_9, 'No query limit, no memory limit', null);
        this._el_11 = createRenderElement(this.renderer, this._el_4, 'p', EMPTY_INLINE_ARRAY, null);
        this._el_12 = createRenderElement(this.renderer, this._el_11, 'a', new InlineArray8(8, 'angulartics2On', 'click', 'angularticsCategory', 'pricing-page', 'angularticsEvent', 'getting-started-click', 'class', 'btn btn-default btn-lg'), null);
        this._RouterLinkWithHref_12_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_13 = this.renderer.createText(this._el_12, 'Getting started', null);
        this._el_14 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_15 = createRenderElement(this.renderer, this._el_14, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_16 = createRenderElement(this.renderer, this._el_15, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_17 = createRenderElement(this.renderer, this._el_16, 'h1', new InlineArray2(2, 'class', 'page-header'), null);
        this._text_18 = this.renderer.createText(this._el_17, 'Pricing', null);
        this._el_19 = createRenderElement(this.renderer, this._el_16, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_20 = this.renderer.createText(this._el_19, 'Our product is available for both private hosting and SaaS. You can easily download and install it on your machine, or purchase it as a monthly service.', null);
        this._el_21 = createRenderElement(this.renderer, this._el_16, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_22 = this.renderer.createText(this._el_21, 'For private hosting, you can download and install Slamby API and register it with an open-source license for free, and you can purchase a core-based license for commercial use.', null);
        this._el_23 = createRenderElement(this.renderer, this._el_16, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_24 = this.renderer.createText(this._el_23, 'For SaaS, you can select a required instance size and buy it with a monthly payment. The prices cover the standard Slamby license per core + hosting fee.', null);
        this._el_25 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_26 = createRenderElement(this.renderer, this._el_25, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_27 = createRenderElement(this.renderer, this._el_26, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_28 = createRenderElement(this.renderer, this._el_27, 'h1', new InlineArray2(2, 'class', 'page-header'), null);
        this._text_29 = this.renderer.createText(this._el_28, 'Core pricing', null);
        this._el_30 = createRenderElement(this.renderer, this._el_26, 'div', new InlineArray2(2, 'class', 'col-md-6'), null);
        this._el_31 = createRenderElement(this.renderer, this._el_30, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_32 = this.renderer.createText(this._el_31, 'Standard Slamby API pricing, based on the  processor core number. There is no query, usage, storage and memory limitation.', null);
        this._el_33 = createRenderElement(this.renderer, this._el_26, 'div', new InlineArray2(2, 'class', 'col-md-6'), null);
        this._el_34 = createRenderElement(this.renderer, this._el_33, 'table', new InlineArray2(2, 'class', 'table table-striped'), null);
        this._el_35 = createRenderElement(this.renderer, this._el_34, 'thead', EMPTY_INLINE_ARRAY, null);
        this._el_36 = createRenderElement(this.renderer, this._el_35, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_37 = createRenderElement(this.renderer, this._el_36, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_38 = this.renderer.createText(this._el_37, 'Name', null);
        this._el_39 = createRenderElement(this.renderer, this._el_36, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_40 = this.renderer.createText(this._el_39, 'Description', null);
        this._el_41 = createRenderElement(this.renderer, this._el_36, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, 'price', null);
        this._el_43 = createRenderElement(this.renderer, this._el_34, 'tbody', EMPTY_INLINE_ARRAY, null);
        this._el_44 = createRenderElement(this.renderer, this._el_43, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_45 = createRenderElement(this.renderer, this._el_44, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_46 = this.renderer.createText(this._el_45, '1 core license', null);
        this._el_47 = createRenderElement(this.renderer, this._el_44, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_48 = this.renderer.createText(this._el_47, 'unlimited memory, unlimited storage', null);
        this._el_49 = createRenderElement(this.renderer, this._el_44, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_50 = this.renderer.createText(this._el_49, '45 € / processor core / month', null);
        this._el_51 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_52 = createRenderElement(this.renderer, this._el_51, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_53 = createRenderElement(this.renderer, this._el_52, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_54 = createRenderElement(this.renderer, this._el_53, 'h2', new InlineArray2(2, 'class', 'page-header'), null);
        this._text_55 = this.renderer.createText(this._el_54, 'Support', null);
        this._el_56 = createRenderElement(this.renderer, this._el_52, 'div', new InlineArray2(2, 'class', 'col-md-6'), null);
        this._el_57 = createRenderElement(this.renderer, this._el_56, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_58 = this.renderer.createText(this._el_57, 'For professional use select one of our available support options based on the available communication channels and SLA.', null);
        this._el_59 = createRenderElement(this.renderer, this._el_56, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_60 = this.renderer.createText(this._el_59, 'Currently, we have three type of support options. Each Slamby instance has a basic support option that includes community-based - forum support.', null);
        this._el_61 = createRenderElement(this.renderer, this._el_56, 'p', EMPTY_INLINE_ARRAY, null);
        this._el_62 = createRenderElement(this.renderer, this._el_61, 'a', new InlineArray8(8, 'angulartics2On', 'click', 'angularticsCategory', 'pricing-page', 'angularticsEvent', 'support-get-mode-information', 'href', 'mailto:sales@slamby.com'), null);
        this._text_63 = this.renderer.createText(this._el_62, 'Get more information', null);
        this._el_64 = createRenderElement(this.renderer, this._el_56, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_65 = this.renderer.createText(this._el_64, 'Community support:', null);
        this._el_66 = createRenderElement(this.renderer, this._el_64, 'a', new InlineArray4(4, 'href', 'https://groups.google.com/forum/#!forum/slamby', 'target', '_blank'), null);
        this._text_67 = this.renderer.createText(this._el_66, 'https://groups.google.com/forum/#!forum/slamby', null);
        this._el_68 = createRenderElement(this.renderer, this._el_52, 'div', new InlineArray2(2, 'class', 'col-md-6'), null);
        this._el_69 = createRenderElement(this.renderer, this._el_68, 'table', new InlineArray2(2, 'class', 'table table-striped'), null);
        this._el_70 = createRenderElement(this.renderer, this._el_69, 'thead', EMPTY_INLINE_ARRAY, null);
        this._el_71 = createRenderElement(this.renderer, this._el_70, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_72 = createRenderElement(this.renderer, this._el_71, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_73 = this.renderer.createText(this._el_72, 'Name', null);
        this._el_74 = createRenderElement(this.renderer, this._el_71, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_75 = this.renderer.createText(this._el_74, 'Description', null);
        this._el_76 = createRenderElement(this.renderer, this._el_71, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_77 = this.renderer.createText(this._el_76, 'price', null);
        this._el_78 = createRenderElement(this.renderer, this._el_69, 'tbody', EMPTY_INLINE_ARRAY, null);
        this._el_79 = createRenderElement(this.renderer, this._el_78, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_80 = createRenderElement(this.renderer, this._el_79, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_81 = this.renderer.createText(this._el_80, 'Basic', null);
        this._el_82 = createRenderElement(this.renderer, this._el_79, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_83 = createRenderElement(this.renderer, this._el_82, 'a', new InlineArray4(4, 'href', 'https://groups.google.com/forum/#!forum/slamby', 'target', '_blank'), null);
        this._text_84 = this.renderer.createText(this._el_83, 'Community only', null);
        this._text_85 = this.renderer.createText(this._el_82, ',no SLA', null);
        this._el_86 = createRenderElement(this.renderer, this._el_79, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_87 = this.renderer.createText(this._el_86, 'Free', null);
        this._el_88 = createRenderElement(this.renderer, this._el_78, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_89 = createRenderElement(this.renderer, this._el_88, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_90 = this.renderer.createText(this._el_89, 'Professional', null);
        this._el_91 = createRenderElement(this.renderer, this._el_88, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_92 = this.renderer.createText(this._el_91, 'Next workday, email', null);
        this._el_93 = createRenderElement(this.renderer, this._el_88, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_94 = this.renderer.createText(this._el_93, '2000 € yearly / instance', null);
        this._el_95 = createRenderElement(this.renderer, this._el_78, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_96 = createRenderElement(this.renderer, this._el_95, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_97 = this.renderer.createText(this._el_96, 'Production', null);
        this._el_98 = createRenderElement(this.renderer, this._el_95, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_99 = this.renderer.createText(this._el_98, 'Direct developer and technical access, 5 hours SLA, email, skype, phone.', null);
        this._el_100 = createRenderElement(this.renderer, this._el_95, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_101 = this.renderer.createText(this._el_100, '6000 € yearly / instance', null);
        this._el_102 = createRenderElement(this.renderer, this._el_52, 'div', new InlineArray2(2, 'class', 'container pricing'), null);
        this._el_103 = createRenderElement(this.renderer, this._el_102, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_104 = createRenderElement(this.renderer, this._el_103, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_105 = createRenderElement(this.renderer, this._el_104, 'h2', new InlineArray2(2, 'class', 'page-header'), null);
        this._text_106 = this.renderer.createText(this._el_105, 'SaaS pricing', null);
        this._el_107 = createRenderElement(this.renderer, this._el_104, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_108 = this.renderer.createText(this._el_107, 'Purchase Slamby as software as a service. Select one of our hosting locations and one suitable size of the instance. Prices based on the resource size + core based Slamby license fee.', null);
        this._el_109 = createRenderElement(this.renderer, this._el_104, 'p', EMPTY_INLINE_ARRAY, null);
        this._el_110 = createRenderElement(this.renderer, this._el_109, 'a', new InlineArray16(10, 'angulartics2On', 'click', 'angularticsCategory', 'pricing-page', 'angularticsEvent', 'sas-contact-sales', 'class', 'btn btn-default', 'href', 'mailto:sales@slamby.com'), null);
        this._text_111 = this.renderer.createText(this._el_110, 'Contact sales', null);
        this._el_112 = createRenderElement(this.renderer, this._el_104, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_113 = this.renderer.createText(this._el_112, 'Prices are in € per month', null);
        this._el_114 = createRenderElement(this.renderer, this._el_104, 'h3', EMPTY_INLINE_ARRAY, null);
        this._text_115 = this.renderer.createText(this._el_114, 'European', null);
        this._el_116 = createRenderElement(this.renderer, this._el_104, 'table', new InlineArray2(2, 'class', 'table table-striped'), null);
        this._el_117 = createRenderElement(this.renderer, this._el_116, 'thead', EMPTY_INLINE_ARRAY, null);
        this._el_118 = createRenderElement(this.renderer, this._el_117, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_119 = createRenderElement(this.renderer, this._el_118, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_120 = this.renderer.createText(this._el_119, 'Name', null);
        this._el_121 = createRenderElement(this.renderer, this._el_118, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_122 = this.renderer.createText(this._el_121, 'Core', null);
        this._el_123 = createRenderElement(this.renderer, this._el_118, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_124 = this.renderer.createText(this._el_123, 'Memory', null);
        this._el_125 = createRenderElement(this.renderer, this._el_118, 'th', new InlineArray2(2, 'class', 'hidden-xs'), null);
        this._text_126 = this.renderer.createText(this._el_125, 'Storage', null);
        this._el_127 = createRenderElement(this.renderer, this._el_118, 'th', new InlineArray2(2, 'class', 'hidden-xs hiddne-sm'), null);
        this._text_128 = this.renderer.createText(this._el_127, 'Technical fee', null);
        this._el_129 = createRenderElement(this.renderer, this._el_118, 'th', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_130 = this.renderer.createText(this._el_129, 'License fee', null);
        this._el_131 = createRenderElement(this.renderer, this._el_118, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_132 = this.renderer.createText(this._el_131, 'Retail price', null);
        this._el_133 = createRenderElement(this.renderer, this._el_116, 'tbody', EMPTY_INLINE_ARRAY, null);
        this._anchor_134 = this.renderer.createTemplateAnchor(this._el_133, null);
        this._vc_134 = new ViewContainer(134, 133, this, this._anchor_134);
        this._TemplateRef_134_5 = new TemplateRef_(this, 134, this._anchor_134);
        this._NgFor_134_6 = new Wrapper_NgFor(this._vc_134.vcRef, this._TemplateRef_134_5, this.parentView.injectorGet(IterableDiffers, this.parentIndex), this.ref);
        this._el_135 = createRenderElement(this.renderer, this._el_102, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_136 = createRenderElement(this.renderer, this._el_135, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_137 = createRenderElement(this.renderer, this._el_136, 'h3', EMPTY_INLINE_ARRAY, null);
        this._text_138 = this.renderer.createText(this._el_137, 'Asian', null);
        this._el_139 = createRenderElement(this.renderer, this._el_136, 'table', new InlineArray2(2, 'class', 'table table-striped'), null);
        this._el_140 = createRenderElement(this.renderer, this._el_139, 'thead', EMPTY_INLINE_ARRAY, null);
        this._el_141 = createRenderElement(this.renderer, this._el_140, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_142 = createRenderElement(this.renderer, this._el_141, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_143 = this.renderer.createText(this._el_142, 'Name', null);
        this._el_144 = createRenderElement(this.renderer, this._el_141, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_145 = this.renderer.createText(this._el_144, 'Core', null);
        this._el_146 = createRenderElement(this.renderer, this._el_141, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_147 = this.renderer.createText(this._el_146, 'Memory', null);
        this._el_148 = createRenderElement(this.renderer, this._el_141, 'th', new InlineArray2(2, 'class', 'hidden-xs'), null);
        this._text_149 = this.renderer.createText(this._el_148, 'Storage', null);
        this._el_150 = createRenderElement(this.renderer, this._el_141, 'th', new InlineArray2(2, 'class', 'hidden-xs hiddne-sm'), null);
        this._text_151 = this.renderer.createText(this._el_150, 'Technical fee', null);
        this._el_152 = createRenderElement(this.renderer, this._el_141, 'th', new InlineArray2(2, 'class', 'hidden-xs hidden-sm'), null);
        this._text_153 = this.renderer.createText(this._el_152, 'License fee', null);
        this._el_154 = createRenderElement(this.renderer, this._el_141, 'th', EMPTY_INLINE_ARRAY, null);
        this._text_155 = this.renderer.createText(this._el_154, 'Retail price', null);
        this._el_156 = createRenderElement(this.renderer, this._el_139, 'tbody', EMPTY_INLINE_ARRAY, null);
        this._anchor_157 = this.renderer.createTemplateAnchor(this._el_156, null);
        this._vc_157 = new ViewContainer(157, 156, this, this._anchor_157);
        this._TemplateRef_157_5 = new TemplateRef_(this, 157, this._anchor_157);
        this._NgFor_157_6 = new Wrapper_NgFor(this._vc_157.vcRef, this._TemplateRef_157_5, this.parentView.injectorGet(IterableDiffers, this.parentIndex), this.ref);
        var disposable_0 = subscribeToRenderElement(this, this._el_12, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_12));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10,
            this._el_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._el_15,
            this._el_16,
            this._el_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._el_21,
            this._text_22,
            this._el_23,
            this._text_24,
            this._el_25,
            this._el_26,
            this._el_27,
            this._el_28,
            this._text_29,
            this._el_30,
            this._el_31,
            this._text_32,
            this._el_33,
            this._el_34,
            this._el_35,
            this._el_36,
            this._el_37,
            this._text_38,
            this._el_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._el_43,
            this._el_44,
            this._el_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._el_49,
            this._text_50,
            this._el_51,
            this._el_52,
            this._el_53,
            this._el_54,
            this._text_55,
            this._el_56,
            this._el_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._el_61,
            this._el_62,
            this._text_63,
            this._el_64,
            this._text_65,
            this._el_66,
            this._text_67,
            this._el_68,
            this._el_69,
            this._el_70,
            this._el_71,
            this._el_72,
            this._text_73,
            this._el_74,
            this._text_75,
            this._el_76,
            this._text_77,
            this._el_78,
            this._el_79,
            this._el_80,
            this._text_81,
            this._el_82,
            this._el_83,
            this._text_84,
            this._text_85,
            this._el_86,
            this._text_87,
            this._el_88,
            this._el_89,
            this._text_90,
            this._el_91,
            this._text_92,
            this._el_93,
            this._text_94,
            this._el_95,
            this._el_96,
            this._text_97,
            this._el_98,
            this._text_99,
            this._el_100,
            this._text_101,
            this._el_102,
            this._el_103,
            this._el_104,
            this._el_105,
            this._text_106,
            this._el_107,
            this._text_108,
            this._el_109,
            this._el_110,
            this._text_111,
            this._el_112,
            this._text_113,
            this._el_114,
            this._text_115,
            this._el_116,
            this._el_117,
            this._el_118,
            this._el_119,
            this._text_120,
            this._el_121,
            this._text_122,
            this._el_123,
            this._text_124,
            this._el_125,
            this._text_126,
            this._el_127,
            this._text_128,
            this._el_129,
            this._text_130,
            this._el_131,
            this._text_132,
            this._el_133,
            this._anchor_134,
            this._el_135,
            this._el_136,
            this._el_137,
            this._text_138,
            this._el_139,
            this._el_140,
            this._el_141,
            this._el_142,
            this._text_143,
            this._el_144,
            this._text_145,
            this._el_146,
            this._text_147,
            this._el_148,
            this._text_149,
            this._el_150,
            this._text_151,
            this._el_152,
            this._text_153,
            this._el_154,
            this._text_155,
            this._el_156,
            this._anchor_157
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === RouterLinkWithHref) && ((12 <= requestNodeIndex) && (requestNodeIndex <= 13)))) {
            return this._RouterLinkWithHref_12_3.context;
        }
        if (((token === TemplateRef) && (134 === requestNodeIndex))) {
            return this._TemplateRef_134_5;
        }
        if (((token === NgFor) && (134 === requestNodeIndex))) {
            return this._NgFor_134_6.context;
        }
        if (((token === TemplateRef) && (157 === requestNodeIndex))) {
            return this._TemplateRef_157_5;
        }
        if (((token === NgFor) && (157 === requestNodeIndex))) {
            return this._NgFor_157_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_12_0_0 = this._arr_167('/getting-started');
        this._RouterLinkWithHref_12_3.check_routerLink(currVal_12_0_0, throwOnChange, false);
        this._RouterLinkWithHref_12_3.ngDoCheck(this, this._el_12, throwOnChange);
        const currVal_134_0_0 = this.context.pricingEurope;
        this._NgFor_134_6.check_ngForOf(currVal_134_0_0, throwOnChange, false);
        this._NgFor_134_6.ngDoCheck(this, this._anchor_134, throwOnChange);
        const currVal_157_0_0 = this.context.pricingAsian;
        this._NgFor_157_6.check_ngForOf(currVal_157_0_0, throwOnChange, false);
        this._NgFor_157_6.ngDoCheck(this, this._anchor_157, throwOnChange);
        this._vc_134.detectChangesInNestedViews(throwOnChange);
        this._vc_157.detectChangesInNestedViews(throwOnChange);
        this._RouterLinkWithHref_12_3.checkHost(this, this, this._el_12, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this._vc_134.destroyNestedViews();
        this._vc_157.destroyNestedViews();
        this.compView_0.destroy();
        this._RouterLinkWithHref_12_3.ngOnDestroy();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 134)) {
            return new View_PricingComponent1(this.viewUtils, this, 134, this._anchor_134, this._vc_134);
        }
        if ((nodeIndex == 157)) {
            return new View_PricingComponent2(this.viewUtils, this, 157, this._anchor_157, this._vc_157);
        }
        return null;
    }
    handleEvent_12(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_12_3.handleEvent(eventName, $event) && result);
        return result;
    }
}

const styles$4 = ['.notFoundModule[_ngcontent-%COMP%]{text-align:center}.notFoundModule[_ngcontent-%COMP%]   .box[_ngcontent-%COMP%]{margin-top:50px}.notFoundModule[_ngcontent-%COMP%]   .box[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:70px;font-weight:100}'];

class Wrapper_NotFoundPageComponent {
    constructor() {
        this._changed = false;
        this.context = new NotFoundPageComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_NotFoundPageComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_NotFoundPageComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NotFoundPageComponent_Host0, renderType_NotFoundPageComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_NotFoundPageComponent0(this.viewUtils, this, 0, this._el_0);
        this._NotFoundPageComponent_0_3 = new Wrapper_NotFoundPageComponent();
        this.compView_0.create(this._NotFoundPageComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._NotFoundPageComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === NotFoundPageComponent) && (0 === requestNodeIndex))) {
            return this._NotFoundPageComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._NotFoundPageComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const NotFoundPageComponentNgFactory = new ComponentFactory('ng-component', View_NotFoundPageComponent_Host0, NotFoundPageComponent);
const styles_NotFoundPageComponent = [styles$4];
var renderType_NotFoundPageComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_NotFoundPageComponent, {});
class View_NotFoundPageComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NotFoundPageComponent0, renderType_NotFoundPageComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container notFoundModule'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'box'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'div', new InlineArray2(2, 'class', 'icon'), null);
        this._el_6 = createRenderElement(this.renderer, this._el_5, 'i', new InlineArray4(4, 'area-hidden', 'area-hidden', 'class', 'fa fa-frown-o'), null);
        this._el_7 = createRenderElement(this.renderer, this._el_4, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_8 = this.renderer.createText(this._el_7, 'Page not found', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._el_6,
            this._el_7,
            this._text_8
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$5 = ['.notFoundModule[_ngcontent-%COMP%]{text-align:center}.notFoundModule[_ngcontent-%COMP%]   .box[_ngcontent-%COMP%]{margin-top:50px}.notFoundModule[_ngcontent-%COMP%]   .box[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:70px;font-weight:100}'];

class Wrapper_ThankYouComponent {
    constructor() {
        this._changed = false;
        this.context = new ThankYouComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_ThankYouComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_ThankYouComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_ThankYouComponent_Host0, renderType_ThankYouComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_ThankYouComponent0(this.viewUtils, this, 0, this._el_0);
        this._ThankYouComponent_0_3 = new Wrapper_ThankYouComponent();
        this.compView_0.create(this._ThankYouComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._ThankYouComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === ThankYouComponent) && (0 === requestNodeIndex))) {
            return this._ThankYouComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._ThankYouComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const ThankYouComponentNgFactory = new ComponentFactory('ng-component', View_ThankYouComponent_Host0, ThankYouComponent);
const styles_ThankYouComponent = [styles$5];
var renderType_ThankYouComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_ThankYouComponent, {});
class View_ThankYouComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_ThankYouComponent0, renderType_ThankYouComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container notFoundModule'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'box'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'div', new InlineArray2(2, 'class', 'icon'), null);
        this._el_6 = createRenderElement(this.renderer, this._el_5, 'i', new InlineArray2(2, 'class', 'fa fa-smile-o'), null);
        this._el_7 = createRenderElement(this.renderer, this._el_4, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_8 = this.renderer.createText(this._el_7, 'Thank You', null);
        this._el_9 = createRenderElement(this.renderer, this._el_4, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_10 = this.renderer.createText(this._el_9, 'Please check your email and confirm your request.', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._el_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._text_10
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$6 = ['.menu[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu[_ngcontent-%COMP%]{float:left;width:16.66667%}}.menu[_ngcontent-%COMP%]   .list-group[_ngcontent-%COMP%]{margin-top:30px}.body[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body[_ngcontent-%COMP%]{float:left;width:83.33333%}}.body[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]:first-of-type{margin-top:30px}'];

class Wrapper_GettingStartedComponent {
    constructor() {
        this._changed = false;
        this.context = new GettingStartedComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_GettingStartedComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_GettingStartedComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_GettingStartedComponent_Host0, renderType_GettingStartedComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_GettingStartedComponent0(this.viewUtils, this, 0, this._el_0);
        this._GettingStartedComponent_0_3 = new Wrapper_GettingStartedComponent();
        this.compView_0.create(this._GettingStartedComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._GettingStartedComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === GettingStartedComponent) && (0 === requestNodeIndex))) {
            return this._GettingStartedComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._GettingStartedComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const GettingStartedComponentNgFactory = new ComponentFactory('ng-component', View_GettingStartedComponent_Host0, GettingStartedComponent);
const styles_GettingStartedComponent = [styles$6];
var renderType_GettingStartedComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_GettingStartedComponent, {});
class View_GettingStartedComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_GettingStartedComponent0, renderType_GettingStartedComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'menu'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, 'Getting started', null);
        this._el_6 = createRenderElement(this.renderer, this._el_3, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_7 = this.renderer.createText(this._el_6, 'Welcome to Slamby. Congratulation, you made the very first step to work with our awesome products. You are almost done, but before getting started working with your Slamby product, here are a few useful information.', null);
        this._el_8 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'API install', null);
        this._el_10 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_11 = this.renderer.createText(this._el_10, 'You can use your Slamby API as a SaaS, or you can download, and host is by yourself. When you want to host it by yourself, the first thing you need to manage is the installation. To install Slamby API, please check the product readme and the installation guide.', null);
        this._el_12 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_13 = this.renderer.createText(this._el_12, 'Product documentation: ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_12, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-api', 'target', '_blank'), null);
        this._text_15 = this.renderer.createText(this._el_14, 'https://github.com/slamby/slamby-api', null);
        this._el_16 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_17 = this.renderer.createText(this._el_16, 'Using Docker Compose, here are the installation steps:', null);
        this._el_18 = createRenderElement(this.renderer, this._el_3, 'ol', EMPTY_INLINE_ARRAY, null);
        this._el_19 = createRenderElement(this.renderer, this._el_18, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_20 = this.renderer.createText(this._el_19, 'Install Docker on your machine: ', null);
        this._el_21 = createRenderElement(this.renderer, this._el_19, 'a', new InlineArray4(4, 'href', 'https://docs.docker.com/engine/installation', 'target', ''), null);
        this._text_22 = this.renderer.createText(this._el_21, 'Official Docker installation guide', null);
        this._text_23 = this.renderer.createText(this._el_19, '  ', null);
        this._el_24 = createRenderElement(this.renderer, this._el_18, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_25 = this.renderer.createText(this._el_24, 'Install Docker Compose on your machine (minimum 1.9.0 required): ', null);
        this._el_26 = createRenderElement(this.renderer, this._el_24, 'a', new InlineArray4(4, 'href', 'https://docs.docker.com/compose/install', 'target', '_blank'), null);
        this._text_27 = this.renderer.createText(this._el_26, 'Official Docker Compose installation guide', null);
        this._el_28 = createRenderElement(this.renderer, this._el_18, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_29 = this.renderer.createText(this._el_28, 'Download our Docker Compose file', null);
        this._el_30 = createRenderElement(this.renderer, this._el_28, 'br', EMPTY_INLINE_ARRAY, null);
        this._el_31 = createRenderElement(this.renderer, this._el_28, 'code', EMPTY_INLINE_ARRAY, null);
        this._text_32 = this.renderer.createText(this._el_31, '$ curl -L "https://github.com/slamby/slamby-api/releases/download/v1.2.0/docker-compose.yml" > docker-compose.yml ', null);
        this._el_33 = createRenderElement(this.renderer, this._el_18, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_34 = this.renderer.createText(this._el_33, 'Compose the containers (run next to the compose file)', null);
        this._el_35 = createRenderElement(this.renderer, this._el_33, 'br', EMPTY_INLINE_ARRAY, null);
        this._el_36 = createRenderElement(this.renderer, this._el_33, 'pre', EMPTY_INLINE_ARRAY, null);
        this._text_37 = this.renderer.createText(this._el_36, '$ docker-compose up -d ', null);
        this._el_38 = createRenderElement(this.renderer, this._el_18, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_39 = this.renderer.createText(this._el_38, 'Your server is installed. Check that if it\'s working correctly ', null);
        this._el_40 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_41 = this.renderer.createText(this._el_40, 'API activation', null);
        this._el_42 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_43 = this.renderer.createText(this._el_42, 'Open your Slamby API server at http://api_url/setup.', null);
        this._el_44 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_45 = this.renderer.createText(this._el_44, 'Great, you have an installed Slamby API. Now your first step is the activation process.', null);
        this._el_46 = createRenderElement(this.renderer, this._el_44, 'br', EMPTY_INLINE_ARRAY, null);
        this._text_47 = this.renderer.createText(this._el_44, 'During the setup process you need to:', null);
        this._el_48 = createRenderElement(this.renderer, this._el_3, 'ul', EMPTY_INLINE_ARRAY, null);
        this._el_49 = createRenderElement(this.renderer, this._el_48, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_50 = this.renderer.createText(this._el_49, 'Request a Slamby License, ', null);
        this._el_51 = createRenderElement(this.renderer, this._el_48, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_52 = this.renderer.createText(this._el_51, 'Copy your Slamby API License, ', null);
        this._el_53 = createRenderElement(this.renderer, this._el_48, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_54 = this.renderer.createText(this._el_53, 'and set the secret (password) for your Slamby API. ', null);
        this._el_55 = createRenderElement(this.renderer, this._el_48, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_56 = this.renderer.createText(this._el_55, 'Continue with the API activation.', null);
        this._el_57 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_58 = this.renderer.createText(this._el_57, 'License', null);
        this._el_59 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_60 = this.renderer.createText(this._el_59, 'For open-source projects, you can use an open-source license for free, or for commercial purpose you can use a commercial license.', null);
        this._el_61 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_62 = this.renderer.createText(this._el_61, 'For open-source license, you can request one from the setup wizard directly by typing your e-mail address and click the Request a License button. Our license service will generate an open-sourced license for you and will send it via email to the given email address.', null);
        this._el_63 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_64 = this.renderer.createText(this._el_63, 'When your product or company is not open-sourced you cannot use Slamby API with open-source license; you need to purchase a commercial license. The pricing is based on the processor core number.', null);
        this._el_65 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_66 = this.renderer.createText(this._el_65, 'For pricing details, please check our pricing ', null);
        this._el_67 = createRenderElement(this.renderer, this._el_65, 'a', new InlineArray2(2, 'href', 'https://www.slamby.com/pricing'), null);
        this._text_68 = this.renderer.createText(this._el_67, 'https://www.slamby.com/pricing', null);
        this._el_69 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_70 = this.renderer.createText(this._el_69, 'For purchasing a commercial license contact our ', null);
        this._el_71 = createRenderElement(this.renderer, this._el_69, 'a', new InlineArray2(2, 'href', 'sales@slamby.com'), null);
        this._text_72 = this.renderer.createText(this._el_71, 'sales@slamby.com', null);
        this._el_73 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_74 = this.renderer.createText(this._el_73, 'Using Slamby Insight to manage your API', null);
        this._el_75 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_76 = this.renderer.createText(this._el_75, 'For you Slamby API we have an excellent desktop application that makes the management jobs smoother, faster and easier. You can download it from here:', null);
        this._el_77 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_78 = this.renderer.createText(this._el_77, ' ', null);
        this._el_79 = createRenderElement(this.renderer, this._el_77, 'a', new InlineArray16(10, 'angulartics2On', 'click', 'angularticsCategory', 'getting-started-page', 'angularticsEvent', 'insight-download-btn', 'class', 'btn btn-default', 'href', 'https://insight.slamby.com/download'), null);
        this._text_80 = this.renderer.createText(this._el_79, 'Download.', null);
        this._el_81 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_82 = this.renderer.createText(this._el_81, 'For more information about how to use Insight check the online tutorial here: ', null);
        this._el_83 = createRenderElement(this.renderer, this._el_81, 'a', new InlineArray4(4, 'href', 'https://developers.slamby.com/docs/Insight/', 'target', '_blank'), null);
        this._text_84 = this.renderer.createText(this._el_83, 'https://developers.slamby.com/docs/Insight/', null);
        this._el_85 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_86 = this.renderer.createText(this._el_85, 'Integration (SDKs)', null);
        this._el_87 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_88 = this.renderer.createText(this._el_87, 'Now you have a working Slamby API, but how can you integrate it into your business processes? Slamby API has a very detailed Rest API that you can easily manage. For the full API documentation, please check the API developers page here: ', null);
        this._el_89 = createRenderElement(this.renderer, this._el_87, 'a', new InlineArray4(4, 'href', 'https://developers.slamby.com/docs/API/', 'target', '_blank'), null);
        this._text_90 = this.renderer.createText(this._el_89, 'https://developers.slamby.com/docs/API/', null);
        this._el_91 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_92 = this.renderer.createText(this._el_91, 'A lovely gift from Slamby', null);
        this._el_93 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_94 = this.renderer.createText(this._el_93, 'We would like to make your job easier; that\'s why we work on five different SDKs. Please check the available versions, sources, and the readmes.', null);
        this._el_95 = createRenderElement(this.renderer, this._el_3, 'table', new InlineArray2(2, 'class', 'table table-striped'), null);
        this._el_96 = createRenderElement(this.renderer, this._el_95, 'thead', EMPTY_INLINE_ARRAY, null);
        this._el_97 = createRenderElement(this.renderer, this._el_96, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_98 = createRenderElement(this.renderer, this._el_97, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_99 = this.renderer.createText(this._el_98, 'SDK Name', null);
        this._el_100 = createRenderElement(this.renderer, this._el_97, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_101 = this.renderer.createText(this._el_100, 'Download link and readme', null);
        this._el_102 = createRenderElement(this.renderer, this._el_95, 'tbody', EMPTY_INLINE_ARRAY, null);
        this._el_103 = createRenderElement(this.renderer, this._el_102, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_104 = createRenderElement(this.renderer, this._el_103, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_105 = this.renderer.createText(this._el_104, '.Net', null);
        this._el_106 = createRenderElement(this.renderer, this._el_103, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_107 = createRenderElement(this.renderer, this._el_106, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-sdk-net', 'target', '_blank'), null);
        this._text_108 = this.renderer.createText(this._el_107, 'https://github.com/slamby/slamby-sdk-net', null);
        this._el_109 = createRenderElement(this.renderer, this._el_102, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_110 = createRenderElement(this.renderer, this._el_109, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_111 = this.renderer.createText(this._el_110, 'JavaScript', null);
        this._el_112 = createRenderElement(this.renderer, this._el_109, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_113 = createRenderElement(this.renderer, this._el_112, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-sdk-javascript', 'target', '_blank'), null);
        this._text_114 = this.renderer.createText(this._el_113, 'https://github.com/slamby/slamby-sdk-javascript', null);
        this._text_115 = this.renderer.createText(this._el_112, ' ', null);
        this._el_116 = createRenderElement(this.renderer, this._el_102, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_117 = createRenderElement(this.renderer, this._el_116, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_118 = this.renderer.createText(this._el_117, 'Python', null);
        this._el_119 = createRenderElement(this.renderer, this._el_116, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_120 = createRenderElement(this.renderer, this._el_119, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-sdk-python', 'target', '_blank'), null);
        this._text_121 = this.renderer.createText(this._el_120, 'https://github.com/slamby/slamby-sdk-python', null);
        this._el_122 = createRenderElement(this.renderer, this._el_102, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_123 = createRenderElement(this.renderer, this._el_122, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_124 = this.renderer.createText(this._el_123, 'PHP', null);
        this._el_125 = createRenderElement(this.renderer, this._el_122, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_126 = createRenderElement(this.renderer, this._el_125, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-sdk-php', 'target', '_blank'), null);
        this._text_127 = this.renderer.createText(this._el_126, 'https://github.com/slamby/slamby-sdk-php', null);
        this._el_128 = createRenderElement(this.renderer, this._el_102, 'tr', EMPTY_INLINE_ARRAY, null);
        this._el_129 = createRenderElement(this.renderer, this._el_128, 'td', EMPTY_INLINE_ARRAY, null);
        this._text_130 = this.renderer.createText(this._el_129, 'Angular 2', null);
        this._el_131 = createRenderElement(this.renderer, this._el_128, 'td', EMPTY_INLINE_ARRAY, null);
        this._el_132 = createRenderElement(this.renderer, this._el_131, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby/slamby-sdk-angular2', 'target', '_blank'), null);
        this._text_133 = this.renderer.createText(this._el_132, 'https://github.com/slamby/slamby-sdk-angular2', null);
        this._text_134 = this.renderer.createText(this._el_131, ' ', null);
        this._el_135 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_136 = this.renderer.createText(this._el_135, 'Product documentation', null);
        this._el_137 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_138 = this.renderer.createText(this._el_137, 'Here we go, all the Slamby products are now installed. But how can you use them? When you do an API integration, or you need to know specific settings, then please check the API documentation on our developer site: ', null);
        this._el_139 = createRenderElement(this.renderer, this._el_137, 'a', new InlineArray4(4, 'href', 'https://developers.slamby.com/docs/API', 'target', '_blank'), null);
        this._text_140 = this.renderer.createText(this._el_139, 'https://developers.slamby.com/docs/API', null);
        this._text_141 = this.renderer.createText(this._el_137, ' ', null);
        this._el_142 = createRenderElement(this.renderer, this._el_137, 'br', EMPTY_INLINE_ARRAY, null);
        this._text_143 = this.renderer.createText(this._el_137, ' or, check the other products documentation as well ', null);
        this._el_144 = createRenderElement(this.renderer, this._el_137, 'a', new InlineArray4(4, 'href', 'https://developers.slamby.com', 'target', '_blank'), null);
        this._text_145 = this.renderer.createText(this._el_144, 'https://developers.slamby.com', null);
        this._el_146 = createRenderElement(this.renderer, this._el_3, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_147 = this.renderer.createText(this._el_146, 'Support', null);
        this._el_148 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_149 = this.renderer.createText(this._el_148, 'Slamby support mailing list for basic support: ', null);
        this._el_150 = createRenderElement(this.renderer, this._el_148, 'a', new InlineArray4(4, 'href', 'https://groups.google.com/forum/#!forum/slamby', 'target', '_blank'), null);
        this._text_151 = this.renderer.createText(this._el_150, 'https://groups.google.com/forum/#!forum/slamby', null);
        this._el_152 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_153 = this.renderer.createText(this._el_152, 'Each Slamby license includes a basic support with absolutely no SLA. This means you can access our support via our online support mailing list and you can ask for help from our community. In this case, the reaction time is not guaranteed, and there is no direct access to our technical experts.', null);
        this._el_154 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_155 = this.renderer.createText(this._el_154, 'When you need a professional support, please purchase one. Each professional support contains short-time SLAs and response time. Each professional support gives you direct access to our technical experts.', null);
        this._el_156 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_157 = this.renderer.createText(this._el_156, 'For more details, please check our available support options here: ', null);
        this._el_158 = createRenderElement(this.renderer, this._el_156, 'a', new InlineArray4(4, 'href', 'https://www.slamby.com/support', 'target', '_blank'), null);
        this._text_159 = this.renderer.createText(this._el_158, 'https://www.slamby.com/support', null);
        this._el_160 = createRenderElement(this.renderer, this._el_3, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_161 = this.renderer.createText(this._el_160, 'And contact our sales: ', null);
        this._el_162 = createRenderElement(this.renderer, this._el_160, 'a', new InlineArray2(2, 'href', 'sales@slamby.com'), null);
        this._text_163 = this.renderer.createText(this._el_162, 'sales@slamby.com', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._el_18,
            this._el_19,
            this._text_20,
            this._el_21,
            this._text_22,
            this._text_23,
            this._el_24,
            this._text_25,
            this._el_26,
            this._text_27,
            this._el_28,
            this._text_29,
            this._el_30,
            this._el_31,
            this._text_32,
            this._el_33,
            this._text_34,
            this._el_35,
            this._el_36,
            this._text_37,
            this._el_38,
            this._text_39,
            this._el_40,
            this._text_41,
            this._el_42,
            this._text_43,
            this._el_44,
            this._text_45,
            this._el_46,
            this._text_47,
            this._el_48,
            this._el_49,
            this._text_50,
            this._el_51,
            this._text_52,
            this._el_53,
            this._text_54,
            this._el_55,
            this._text_56,
            this._el_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._el_61,
            this._text_62,
            this._el_63,
            this._text_64,
            this._el_65,
            this._text_66,
            this._el_67,
            this._text_68,
            this._el_69,
            this._text_70,
            this._el_71,
            this._text_72,
            this._el_73,
            this._text_74,
            this._el_75,
            this._text_76,
            this._el_77,
            this._text_78,
            this._el_79,
            this._text_80,
            this._el_81,
            this._text_82,
            this._el_83,
            this._text_84,
            this._el_85,
            this._text_86,
            this._el_87,
            this._text_88,
            this._el_89,
            this._text_90,
            this._el_91,
            this._text_92,
            this._el_93,
            this._text_94,
            this._el_95,
            this._el_96,
            this._el_97,
            this._el_98,
            this._text_99,
            this._el_100,
            this._text_101,
            this._el_102,
            this._el_103,
            this._el_104,
            this._text_105,
            this._el_106,
            this._el_107,
            this._text_108,
            this._el_109,
            this._el_110,
            this._text_111,
            this._el_112,
            this._el_113,
            this._text_114,
            this._text_115,
            this._el_116,
            this._el_117,
            this._text_118,
            this._el_119,
            this._el_120,
            this._text_121,
            this._el_122,
            this._el_123,
            this._text_124,
            this._el_125,
            this._el_126,
            this._text_127,
            this._el_128,
            this._el_129,
            this._text_130,
            this._el_131,
            this._el_132,
            this._text_133,
            this._text_134,
            this._el_135,
            this._text_136,
            this._el_137,
            this._text_138,
            this._el_139,
            this._text_140,
            this._text_141,
            this._el_142,
            this._text_143,
            this._el_144,
            this._text_145,
            this._el_146,
            this._text_147,
            this._el_148,
            this._text_149,
            this._el_150,
            this._text_151,
            this._el_152,
            this._text_153,
            this._el_154,
            this._text_155,
            this._el_156,
            this._text_157,
            this._el_158,
            this._text_159,
            this._el_160,
            this._text_161,
            this._el_162,
            this._text_163
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$7 = ['.item[_ngcontent-%COMP%]{position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;min-height:1px;padding-left:15px;padding-right:15px;padding:30px}@media (min-width: 768px){.item[_ngcontent-%COMP%]{float:left;width:50%}}@media (min-width: 992px){.item[_ngcontent-%COMP%]{float:left;width:25%}}'];

class Wrapper_PartnersComponent {
    constructor() {
        this._changed = false;
        this.context = new PartnersComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_PartnersComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_PartnersComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PartnersComponent_Host0, renderType_PartnersComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_PartnersComponent0(this.viewUtils, this, 0, this._el_0);
        this._PartnersComponent_0_3 = new Wrapper_PartnersComponent();
        this.compView_0.create(this._PartnersComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._PartnersComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === PartnersComponent) && (0 === requestNodeIndex))) {
            return this._PartnersComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._PartnersComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const PartnersComponentNgFactory = new ComponentFactory('ng-component', View_PartnersComponent_Host0, PartnersComponent);
const styles_PartnersComponent = [styles$7];
var renderType_PartnersComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_PartnersComponent, {});
class View_PartnersComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PartnersComponent0, renderType_PartnersComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, 'Partners', null);
        this._el_6 = createRenderElement(this.renderer, this._el_3, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_7 = this.renderer.createText(this._el_6, 'Creating a better product requires teamwork, partnerships and collaboration. We are grateful to work together with such amazing partners.', null);
        this._el_8 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_9 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_10 = createRenderElement(this.renderer, this._el_9, 'img', new InlineArray8(8, 'alt', 'Microsoft', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/microsoft.png\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/microsoft.png'), null);
        this._el_11 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_12 = createRenderElement(this.renderer, this._el_11, 'img', new InlineArray8(8, 'alt', 'ICMA', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/icma.jpg\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/icma.jpg'), null);
        this._el_13 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_14 = createRenderElement(this.renderer, this._el_13, 'img', new InlineArray8(8, 'alt', 'Hungarian Tradehouse', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/tradehouse.png\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/tradehouse.png'), null);
        this._el_15 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_16 = createRenderElement(this.renderer, this._el_15, 'img', new InlineArray8(8, 'alt', 'Digital Factory', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/digital-factory.png\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/digital-factory.png'), null);
        this._el_17 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_18 = createRenderElement(this.renderer, this._el_17, 'img', new InlineArray8(8, 'alt', 'Fiware', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/fiware.png\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/fiware.png'), null);
        this._el_19 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_20 = createRenderElement(this.renderer, this._el_19, 'img', new InlineArray8(8, 'alt', 'CEU Business School', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/ceubs.jpg\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ceubs.jpg'), null);
        this._el_21 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_22 = createRenderElement(this.renderer, this._el_21, 'img', new InlineArray8(8, 'alt', 'CEED Tech', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/ceed-tech.png\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ceed-tech.png'), null);
        this._el_23 = createRenderElement(this.renderer, this._el_8, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_24 = createRenderElement(this.renderer, this._el_23, 'img', new InlineArray8(8, 'alt', 'CE EN', 'class', 'img-responsive', 'onerror', 'this.onerror=null;this.src=\'/assets/images/partners/ce-en.jpg\'', 'src', 'https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/partners/ce-en.jpg'), null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._el_9,
            this._el_10,
            this._el_11,
            this._el_12,
            this._el_13,
            this._el_14,
            this._el_15,
            this._el_16,
            this._el_17,
            this._el_18,
            this._el_19,
            this._el_20,
            this._el_21,
            this._el_22,
            this._el_23,
            this._el_24
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$8 = ['.main[_ngcontent-%COMP%]{background:linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.5)),url("https://cdn.rawgit.com/slamby/slamby-website/1.1.9/assets/images/company/team.jpg") 0 0 no-repeat;background-size:cover;margin-top:-50px;padding-top:400px;padding-bottom:50px}.main[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;position:relative;float:left;width:100%;min-height:1px;padding-left:15px;padding-right:15px;color:white;background-color:rgba(0,0,0,0.4)}@media (min-width: 992px){.main[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{float:left;width:50%}}'];

class Wrapper_CompanyComponent {
    constructor() {
        this._changed = false;
        this.context = new CompanyComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_CompanyComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_CompanyComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CompanyComponent_Host0, renderType_CompanyComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_CompanyComponent0(this.viewUtils, this, 0, this._el_0);
        this._CompanyComponent_0_3 = new Wrapper_CompanyComponent();
        this.compView_0.create(this._CompanyComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._CompanyComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === CompanyComponent) && (0 === requestNodeIndex))) {
            return this._CompanyComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._CompanyComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const CompanyComponentNgFactory = new ComponentFactory('ng-component', View_CompanyComponent_Host0, CompanyComponent);
const styles_CompanyComponent = [styles$8];
var renderType_CompanyComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_CompanyComponent, {});
class View_CompanyComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CompanyComponent0, renderType_CompanyComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', new InlineArray2(2, 'theme', 'theme-light'), null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'main'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_5 = this.renderer.createText(this._el_4, '\n        ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_4, 'div', new InlineArray2(2, 'class', 'message'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n            ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Hi', null);
        this._el_10 = createRenderElement(this.renderer, this._el_8, 'br', EMPTY_INLINE_ARRAY, null);
        this._text_11 = this.renderer.createText(this._el_8, 'we are Slamby', null);
        this._text_12 = this.renderer.createText(this._el_6, '\n            ', null);
        this._el_13 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_14 = this.renderer.createText(this._el_13, 'Hard work, great team, gorgeous vision. Building the best data management products from the heart.', null);
        this._text_15 = this.renderer.createText(this._el_6, '\n        ', null);
        this._text_16 = this.renderer.createText(this._el_4, '\n    ', null);
        this._text_17 = this.renderer.createText(this._el_2, '\n', null);
        this._text_18 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_19 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_20 = this.renderer.createText(this._el_19, '\n    ', null);
        this._el_21 = createRenderElement(this.renderer, this._el_19, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._text_22 = this.renderer.createText(this._el_21, '\n        ', null);
        this._el_23 = createRenderElement(this.renderer, this._el_21, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_24 = this.renderer.createText(this._el_23, '\n            ', null);
        this._el_25 = createRenderElement(this.renderer, this._el_23, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_26 = this.renderer.createText(this._el_25, 'Our vision', null);
        this._text_27 = this.renderer.createText(this._el_23, '\n            ', null);
        this._el_28 = createRenderElement(this.renderer, this._el_23, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_29 = this.renderer.createText(this._el_28, 'We are passionate in creating the best data processing solutions. Following our vision, we are working to become the biggest data processing center over Europe.', null);
        this._text_30 = this.renderer.createText(this._el_23, '\n        ', null);
        this._text_31 = this.renderer.createText(this._el_21, '\n    ', null);
        this._text_32 = this.renderer.createText(this._el_19, '\n    ', null);
        this._el_33 = createRenderElement(this.renderer, this._el_19, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._text_34 = this.renderer.createText(this._el_33, '\n        ', null);
        this._el_35 = createRenderElement(this.renderer, this._el_33, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_36 = this.renderer.createText(this._el_35, '\n            ', null);
        this._el_37 = createRenderElement(this.renderer, this._el_35, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_38 = this.renderer.createText(this._el_37, 'From the begining', null);
        this._text_39 = this.renderer.createText(this._el_35, '\n            ', null);
        this._el_40 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_41 = this.renderer.createText(this._el_40, 'Slamby was started in 2011, and officially incorporated on 11th October 2013.', null);
        this._text_42 = this.renderer.createText(this._el_35, '\n            ', null);
        this._el_43 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_44 = this.renderer.createText(this._el_43, 'Our first vision was to build a sophisticated, smart technology that by reading and understanding written text - can protect children from adult online content. Building the first machine-learning technology Slamby realized its capability to extend its market, providing improved data-processing solutions for industrial clients.', null);
        this._text_45 = this.renderer.createText(this._el_35, '\n           ', null);
        this._el_46 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_47 = this.renderer.createText(this._el_46, 'In 2013 Slamby continued its RnD activity and built several products to international companies.', null);
        this._text_48 = this.renderer.createText(this._el_35, '\n           ', null);
        this._el_49 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_50 = this.renderer.createText(this._el_49, 'In 2014 Slamby released its first machine learning solution for e-commerce market, it was called Slamby Classifier - the first truly language independent classification engine with high accuracy level.', null);
        this._text_51 = this.renderer.createText(this._el_35, '\n           ', null);
        this._el_52 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_53 = this.renderer.createText(this._el_52, 'In 2015 Slamby became a significant global data processing solution provider, serving clients over 9 countries.', null);
        this._text_54 = this.renderer.createText(this._el_35, '\n           ', null);
        this._el_55 = createRenderElement(this.renderer, this._el_35, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_56 = this.renderer.createText(this._el_55, 'In 2016 Slamby continued its expansion with increased RnD activity & product development. We changed our product development strategy, transforming our products into open-source, providing a wide range of free solutions that make us even better. Instead of providing a shared solution, we continue our developments creating the best personalized, dedicated data processing servers serving both cloud and on-premise needs as well.', null);
        this._text_57 = this.renderer.createText(this._el_35, '\n        ', null);
        this._text_58 = this.renderer.createText(this._el_33, '\n    ', null);
        this._text_59 = this.renderer.createText(this._el_19, '\n    ', null);
        this._el_60 = createRenderElement(this.renderer, this._el_19, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._text_61 = this.renderer.createText(this._el_60, '\n        ', null);
        this._el_62 = createRenderElement(this.renderer, this._el_60, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._text_63 = this.renderer.createText(this._el_62, '\n            ', null);
        this._el_64 = createRenderElement(this.renderer, this._el_62, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_65 = this.renderer.createText(this._el_64, 'Join us', null);
        this._text_66 = this.renderer.createText(this._el_62, '\n            ', null);
        this._el_67 = createRenderElement(this.renderer, this._el_62, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_68 = this.renderer.createText(this._el_67, 'We are looking for passionate talents. If you like to join us, please check our latest available positions, or schedule an appointment to meet the Team.', null);
        this._text_69 = this.renderer.createText(this._el_62, '\n            ', null);
        this._el_70 = createRenderElement(this.renderer, this._el_62, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_71 = this.renderer.createText(this._el_70, '\n                ', null);
        this._el_72 = createRenderElement(this.renderer, this._el_70, 'a', new InlineArray16(10, 'angulartics2On', 'click', 'angularticsCategory', 'company-page', 'angularticsEvent', 'join-btn-pushed', 'class', 'btn btn-default btn-lg', 'href', 'mailto:jobs@slamby.com'), null);
        this._text_73 = this.renderer.createText(this._el_72, 'Join', null);
        this._text_74 = this.renderer.createText(this._el_70, '\n            ', null);
        this._text_75 = this.renderer.createText(this._el_62, '\n        ', null);
        this._text_76 = this.renderer.createText(this._el_60, '\n    ', null);
        this._text_77 = this.renderer.createText(this._el_19, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._text_12,
            this._el_13,
            this._text_14,
            this._text_15,
            this._text_16,
            this._text_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._el_21,
            this._text_22,
            this._el_23,
            this._text_24,
            this._el_25,
            this._text_26,
            this._text_27,
            this._el_28,
            this._text_29,
            this._text_30,
            this._text_31,
            this._text_32,
            this._el_33,
            this._text_34,
            this._el_35,
            this._text_36,
            this._el_37,
            this._text_38,
            this._text_39,
            this._el_40,
            this._text_41,
            this._text_42,
            this._el_43,
            this._text_44,
            this._text_45,
            this._el_46,
            this._text_47,
            this._text_48,
            this._el_49,
            this._text_50,
            this._text_51,
            this._el_52,
            this._text_53,
            this._text_54,
            this._el_55,
            this._text_56,
            this._text_57,
            this._text_58,
            this._text_59,
            this._el_60,
            this._text_61,
            this._el_62,
            this._text_63,
            this._el_64,
            this._text_65,
            this._text_66,
            this._el_67,
            this._text_68,
            this._text_69,
            this._el_70,
            this._text_71,
            this._el_72,
            this._text_73,
            this._text_74,
            this._text_75,
            this._text_76,
            this._text_77
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_0_0_0 = 'theme-light';
        this._HeaderComponent_0_3.check_theme(currVal_0_0_0, throwOnChange, false);
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
}

const styles$9 = ['.menu[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.menu[_ngcontent-%COMP%]{float:left;width:25%}}.menu[_ngcontent-%COMP%]   .list-group[_ngcontent-%COMP%]{margin-top:30px}.body[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){.body[_ngcontent-%COMP%]{float:left;width:75%}}.body[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%]:first-of-type{margin-top:30px}'];

class Wrapper_LegalMenuComponent {
    constructor() {
        this._changed = false;
        this.context = new LegalMenuComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_LegalMenuComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_LegalMenuComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_LegalMenuComponent_Host0, renderType_LegalMenuComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'legalMenu', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_LegalMenuComponent0(this.viewUtils, this, 0, this._el_0);
        this._LegalMenuComponent_0_3 = new Wrapper_LegalMenuComponent();
        this.compView_0.create(this._LegalMenuComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._LegalMenuComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === LegalMenuComponent) && (0 === requestNodeIndex))) {
            return this._LegalMenuComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._LegalMenuComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const LegalMenuComponentNgFactory = new ComponentFactory('legalMenu', View_LegalMenuComponent_Host0, LegalMenuComponent);
const styles_LegalMenuComponent = [styles$9];
var renderType_LegalMenuComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_LegalMenuComponent, {});
class View_LegalMenuComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_LegalMenuComponent0, renderType_LegalMenuComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
        this._arr_25 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_26 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_27 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_28 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_29 = pureProxy1((p0) => {
            return [p0];
        });
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'menu'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = createRenderElement(this.renderer, this._el_0, 'div', new InlineArray2(2, 'class', 'list-group'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'a', new InlineArray2(2, 'class', 'list-group-item'), null);
        this._RouterLinkWithHref_4_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_5 = this.renderer.createText(this._el_4, 'Privacy policy', null);
        this._text_6 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_7 = createRenderElement(this.renderer, this._el_2, 'a', new InlineArray2(2, 'class', 'list-group-item'), null);
        this._RouterLinkWithHref_7_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_8 = this.renderer.createText(this._el_7, 'Commercial license', null);
        this._text_9 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_10 = createRenderElement(this.renderer, this._el_2, 'a', new InlineArray2(2, 'class', 'list-group-item'), null);
        this._RouterLinkWithHref_10_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_11 = this.renderer.createText(this._el_10, 'Commercial license (OEM)', null);
        this._text_12 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_13 = createRenderElement(this.renderer, this._el_2, 'a', new InlineArray2(2, 'class', 'list-group-item'), null);
        this._RouterLinkWithHref_13_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_14 = this.renderer.createText(this._el_13, 'Open-source license', null);
        this._text_15 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_16 = createRenderElement(this.renderer, this._el_2, 'a', new InlineArray2(2, 'class', 'list-group-item'), null);
        this._RouterLinkWithHref_16_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_17 = this.renderer.createText(this._el_16, 'GNU Affero General Public License', null);
        this._text_18 = this.renderer.createText(this._el_2, '\n    ', null);
        this._text_19 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = subscribeToRenderElement(this, this._el_4, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_4));
        var disposable_1 = subscribeToRenderElement(this, this._el_7, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_7));
        var disposable_2 = subscribeToRenderElement(this, this._el_10, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_10));
        var disposable_3 = subscribeToRenderElement(this, this._el_13, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_13));
        var disposable_4 = subscribeToRenderElement(this, this._el_16, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_16));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._text_9,
            this._el_10,
            this._text_11,
            this._text_12,
            this._el_13,
            this._text_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._text_18,
            this._text_19
        ]), [
            disposable_0,
            disposable_1,
            disposable_2,
            disposable_3,
            disposable_4
        ]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === RouterLinkWithHref) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 5)))) {
            return this._RouterLinkWithHref_4_3.context;
        }
        if (((token === RouterLinkWithHref) && ((7 <= requestNodeIndex) && (requestNodeIndex <= 8)))) {
            return this._RouterLinkWithHref_7_3.context;
        }
        if (((token === RouterLinkWithHref) && ((10 <= requestNodeIndex) && (requestNodeIndex <= 11)))) {
            return this._RouterLinkWithHref_10_3.context;
        }
        if (((token === RouterLinkWithHref) && ((13 <= requestNodeIndex) && (requestNodeIndex <= 14)))) {
            return this._RouterLinkWithHref_13_3.context;
        }
        if (((token === RouterLinkWithHref) && ((16 <= requestNodeIndex) && (requestNodeIndex <= 17)))) {
            return this._RouterLinkWithHref_16_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_4_0_0 = this._arr_25('/legal/privacy-policy');
        this._RouterLinkWithHref_4_3.check_routerLink(currVal_4_0_0, throwOnChange, false);
        this._RouterLinkWithHref_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        const currVal_7_0_0 = this._arr_26('/legal/commercial-license');
        this._RouterLinkWithHref_7_3.check_routerLink(currVal_7_0_0, throwOnChange, false);
        this._RouterLinkWithHref_7_3.ngDoCheck(this, this._el_7, throwOnChange);
        const currVal_10_0_0 = this._arr_27('/legal/commercial-license-oem');
        this._RouterLinkWithHref_10_3.check_routerLink(currVal_10_0_0, throwOnChange, false);
        this._RouterLinkWithHref_10_3.ngDoCheck(this, this._el_10, throwOnChange);
        const currVal_13_0_0 = this._arr_28('/legal/open-source-license');
        this._RouterLinkWithHref_13_3.check_routerLink(currVal_13_0_0, throwOnChange, false);
        this._RouterLinkWithHref_13_3.ngDoCheck(this, this._el_13, throwOnChange);
        const currVal_16_0_0 = this._arr_29('/legal/gnu-agpl-license');
        this._RouterLinkWithHref_16_3.check_routerLink(currVal_16_0_0, throwOnChange, false);
        this._RouterLinkWithHref_16_3.ngDoCheck(this, this._el_16, throwOnChange);
        this._RouterLinkWithHref_4_3.checkHost(this, this, this._el_4, throwOnChange);
        this._RouterLinkWithHref_7_3.checkHost(this, this, this._el_7, throwOnChange);
        this._RouterLinkWithHref_10_3.checkHost(this, this, this._el_10, throwOnChange);
        this._RouterLinkWithHref_13_3.checkHost(this, this, this._el_13, throwOnChange);
        this._RouterLinkWithHref_16_3.checkHost(this, this, this._el_16, throwOnChange);
    }
    destroyInternal() {
        this._RouterLinkWithHref_4_3.ngOnDestroy();
        this._RouterLinkWithHref_7_3.ngOnDestroy();
        this._RouterLinkWithHref_10_3.ngOnDestroy();
        this._RouterLinkWithHref_13_3.ngOnDestroy();
        this._RouterLinkWithHref_16_3.ngOnDestroy();
    }
    handleEvent_4(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_4_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_7(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_7_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_10(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_10_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_13(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_13_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_16(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_16_3.handleEvent(eventName, $event) && result);
        return result;
    }
}

class Wrapper_LegalComponent {
    constructor() {
        this._changed = false;
        this.context = new LegalComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_LegalComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_LegalComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_LegalComponent_Host0, renderType_LegalComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_LegalComponent0(this.viewUtils, this, 0, this._el_0);
        this._LegalComponent_0_3 = new Wrapper_LegalComponent();
        this.compView_0.create(this._LegalComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._LegalComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === LegalComponent) && (0 === requestNodeIndex))) {
            return this._LegalComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._LegalComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const LegalComponentNgFactory = new ComponentFactory('ng-component', View_LegalComponent_Host0, LegalComponent);
const styles_LegalComponent = [styles$9];
var renderType_LegalComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_LegalComponent, {});
class View_LegalComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_LegalComponent0, renderType_LegalComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Legal', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'Please select from our available legal pages.', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_14 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._text_14
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

class Wrapper_PrivacyPolicyComponent {
    constructor() {
        this._changed = false;
        this.context = new PrivacyPolicyComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_PrivacyPolicyComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_PrivacyPolicyComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PrivacyPolicyComponent_Host0, renderType_PrivacyPolicyComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_PrivacyPolicyComponent0(this.viewUtils, this, 0, this._el_0);
        this._PrivacyPolicyComponent_0_3 = new Wrapper_PrivacyPolicyComponent();
        this.compView_0.create(this._PrivacyPolicyComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._PrivacyPolicyComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === PrivacyPolicyComponent) && (0 === requestNodeIndex))) {
            return this._PrivacyPolicyComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._PrivacyPolicyComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const PrivacyPolicyComponentNgFactory = new ComponentFactory('ng-component', View_PrivacyPolicyComponent_Host0, PrivacyPolicyComponent);
const styles_PrivacyPolicyComponent = [styles$9];
var renderType_PrivacyPolicyComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_PrivacyPolicyComponent, {});
class View_PrivacyPolicyComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_PrivacyPolicyComponent0, renderType_PrivacyPolicyComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Slamby website privacy policy', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'Legal information & notices', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, 'General', null);
        this._text_16 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_17 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_18 = this.renderer.createText(this._el_17, 'Slamby operates https://www.slamby.com, https://developers.slamby.com (the "Sites"). This page informs you of our policies regarding the collection, use and disclosure of Personal Information we receive from users of the Sites.', null);
        this._text_19 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_20 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_21 = this.renderer.createText(this._el_20, 'We use your Personal or Company Information only for providing and improving the Sites, our products, and our services. By using the Sites, you agree to the collection and use of information in accordance with this policy.', null);
        this._text_22 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_23 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_24 = this.renderer.createText(this._el_23, 'Information collection and use', null);
        this._text_25 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_26 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_27 = this.renderer.createText(this._el_26, 'While using our Site, we may ask you to provide us with certain personally identifiable information that can be used to contact or identify you. Personally, identifiable information may include but is not limited to your name ("Personal Information").', null);
        this._text_28 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_29 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_30 = this.renderer.createText(this._el_29, 'We collect information from you when you register on our site, subscribe to our newsletter or fill out any online form.', null);
        this._text_31 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_32 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_33 = this.renderer.createText(this._el_32, 'When ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, company/business details or mailing address. You may, however, visit our site anonymously.', null);
        this._text_34 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_35 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_36 = this.renderer.createText(this._el_35, 'What information do we collect?', null);
        this._text_37 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_38 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_39 = this.renderer.createText(this._el_38, 'We collect information from you when you register on our site, subscribe to our newsletter or fill out any online form.', null);
        this._text_40 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_41 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, 'When ordering or registering on our site, as appropriate, you may be asked to enter your: name, e-mail address, company/business details or mailing address. You may, however, visit our site anonymously.', null);
        this._text_43 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_44 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_45 = this.renderer.createText(this._el_44, 'Log data', null);
        this._text_46 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_47 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_48 = this.renderer.createText(this._el_47, 'Like many site operators, we collect information that your browser sends whenever you visit our Site ("Log Data"). This Log Data may include information such as your computer\'s Internet Protocol ("IP") address, browser type, browser version, the pages of our Site that you visit, the time and date of your visit, the time spent on those pages and other statistics.', null);
        this._text_49 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_50 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_51 = this.renderer.createText(this._el_50, 'In addition, we may use third-party services such as Google Analytics that collect, monitor and analyze this data.', null);
        this._text_52 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_53 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_54 = this.renderer.createText(this._el_53, 'Communications', null);
        this._text_55 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_56 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_57 = this.renderer.createText(this._el_56, 'We may use your Personal Information to contact you with newsletters, marketing or promotional materials.', null);
        this._text_58 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_59 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_60 = this.renderer.createText(this._el_59, 'Do we use cookies?', null);
        this._text_61 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_62 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_63 = this.renderer.createText(this._el_62, 'Yes, we do. Cookies are files with small amount of data, which may include an anonymous unique identifier.', null);
        this._text_64 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_65 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_66 = this.renderer.createText(this._el_65, 'Cookies are sent to your browser from a website and stored on your computer\'s hard drive.', null);
        this._text_67 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_68 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_69 = this.renderer.createText(this._el_68, 'Like many sites, we use "cookies" to collect information. You can instruct your browser to refuse all cookies or to indicate when a cookie is being sent. However, if you do not accept cookies, you may not be able to use some portions of our Site.', null);
        this._text_70 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_71 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_72 = this.renderer.createText(this._el_71, 'How do we use the collected data?', null);
        this._text_73 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_74 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_75 = this.renderer.createText(this._el_74, 'Any collected information from you may be used in one of the following ways:', null);
        this._text_76 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_77 = createRenderElement(this.renderer, this._el_6, 'ul', EMPTY_INLINE_ARRAY, null);
        this._text_78 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_79 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_80 = this.renderer.createText(this._el_79, 'To personalize your experience', null);
        this._text_81 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_82 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_83 = this.renderer.createText(this._el_82, 'To improve our websites', null);
        this._text_84 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_85 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_86 = this.renderer.createText(this._el_85, 'To improve customer service', null);
        this._text_87 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_88 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_89 = this.renderer.createText(this._el_88, 'To automated emails for administrative purpose', null);
        this._text_90 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_91 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_92 = this.renderer.createText(this._el_91, 'To send surveys, or promotion emails', null);
        this._text_93 = this.renderer.createText(this._el_77, '\n            ', null);
        this._el_94 = createRenderElement(this.renderer, this._el_77, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_95 = this.renderer.createText(this._el_94, 'To send newsletters', null);
        this._text_96 = this.renderer.createText(this._el_77, '\n        ', null);
        this._text_97 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_98 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_99 = this.renderer.createText(this._el_98, 'Your provided email address may be used to send you information, respond to inquiries.', null);
        this._text_100 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_101 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_102 = this.renderer.createText(this._el_101, 'Security', null);
        this._text_103 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_104 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_105 = this.renderer.createText(this._el_104, 'The security of your Personal Information is important to us, but remember that no method of transmission over the Internet, or method of electronic storage, is 100% secure. While we strive to use commercially acceptable means to protect your Personal Information, we cannot guarantee its absolute security.', null);
        this._text_106 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_107 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_108 = this.renderer.createText(this._el_107, 'Changes', null);
        this._text_109 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_110 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_111 = this.renderer.createText(this._el_110, 'This Privacy Policy is effective as of (add date) and will remain in effect except with respect to any changes in its provisions in the future, which will be in effect immediately after being posted on this page.', null);
        this._text_112 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_113 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_114 = this.renderer.createText(this._el_113, 'We reserve the right to update or change our Privacy Policy at any time and you should check this Privacy Policy periodically. Your continued use of the Service after we post any modifications to the Privacy Policy on this page will constitute your acknowledgment of the modifications and your consent to abide and be bound by the modified Privacy Policy.', null);
        this._text_115 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_116 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_117 = this.renderer.createText(this._el_116, 'If we make any material changes to this Privacy Policy, we will notify you either through the email address you have provided us or by placing a prominent notice on our website.', null);
        this._text_118 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_119 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_120 = this.renderer.createText(this._el_119, 'Consent', null);
        this._text_121 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_122 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_123 = this.renderer.createText(this._el_122, 'By using our Sites, you consent to our privacy policy.', null);
        this._text_124 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_125 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_126 = this.renderer.createText(this._el_125, 'Contact us', null);
        this._text_127 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_128 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_129 = this.renderer.createText(this._el_128, 'If you have any questions about this Privacy Policy, please contact us. ', null);
        this._el_130 = createRenderElement(this.renderer, this._el_128, 'a', new InlineArray2(2, 'href', 'mailto:hello@slamby.com'), null);
        this._text_131 = this.renderer.createText(this._el_130, 'hello@slamby.com', null);
        this._text_132 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_133 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._el_23,
            this._text_24,
            this._text_25,
            this._el_26,
            this._text_27,
            this._text_28,
            this._el_29,
            this._text_30,
            this._text_31,
            this._el_32,
            this._text_33,
            this._text_34,
            this._el_35,
            this._text_36,
            this._text_37,
            this._el_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._text_43,
            this._el_44,
            this._text_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._text_49,
            this._el_50,
            this._text_51,
            this._text_52,
            this._el_53,
            this._text_54,
            this._text_55,
            this._el_56,
            this._text_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._text_61,
            this._el_62,
            this._text_63,
            this._text_64,
            this._el_65,
            this._text_66,
            this._text_67,
            this._el_68,
            this._text_69,
            this._text_70,
            this._el_71,
            this._text_72,
            this._text_73,
            this._el_74,
            this._text_75,
            this._text_76,
            this._el_77,
            this._text_78,
            this._el_79,
            this._text_80,
            this._text_81,
            this._el_82,
            this._text_83,
            this._text_84,
            this._el_85,
            this._text_86,
            this._text_87,
            this._el_88,
            this._text_89,
            this._text_90,
            this._el_91,
            this._text_92,
            this._text_93,
            this._el_94,
            this._text_95,
            this._text_96,
            this._text_97,
            this._el_98,
            this._text_99,
            this._text_100,
            this._el_101,
            this._text_102,
            this._text_103,
            this._el_104,
            this._text_105,
            this._text_106,
            this._el_107,
            this._text_108,
            this._text_109,
            this._el_110,
            this._text_111,
            this._text_112,
            this._el_113,
            this._text_114,
            this._text_115,
            this._el_116,
            this._text_117,
            this._text_118,
            this._el_119,
            this._text_120,
            this._text_121,
            this._el_122,
            this._text_123,
            this._text_124,
            this._el_125,
            this._text_126,
            this._text_127,
            this._el_128,
            this._text_129,
            this._el_130,
            this._text_131,
            this._text_132,
            this._text_133
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

class Wrapper_CommercialLicenseComponent {
    constructor() {
        this._changed = false;
        this.context = new CommercialLicenseComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_CommercialLicenseComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_CommercialLicenseComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CommercialLicenseComponent_Host0, renderType_CommercialLicenseComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_CommercialLicenseComponent0(this.viewUtils, this, 0, this._el_0);
        this._CommercialLicenseComponent_0_3 = new Wrapper_CommercialLicenseComponent();
        this.compView_0.create(this._CommercialLicenseComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._CommercialLicenseComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === CommercialLicenseComponent) && (0 === requestNodeIndex))) {
            return this._CommercialLicenseComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._CommercialLicenseComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const CommercialLicenseComponentNgFactory = new ComponentFactory('ng-component', View_CommercialLicenseComponent_Host0, CommercialLicenseComponent);
const styles_CommercialLicenseComponent = [styles$9];
var renderType_CommercialLicenseComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_CommercialLicenseComponent, {});
class View_CommercialLicenseComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CommercialLicenseComponent0, renderType_CommercialLicenseComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'End user license agreement', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'You should carefully read the following end user license agreement before installing this software. By installing, copying, or otherwise using the software, you agree to be bound by the terms of this agreement. if you do not agree to the terms of this agreement, please contact slamby at https://www.slamby.com to arrange a full refund.', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, 'This software, and any files that are delivered to you by Slamby-Semantics Ltd (referred to herein as “Slamby”). (via on-line transmission or otherwise) to "patch," update, or otherwise modify the software program, as well as any printed materials and any on-line or electronic documentation (the "Manual"), and any and all copies and derivative works of such software program and materials (collectively the "Software") are the copyrighted work of Slamby, or its suppliers and licensors (collectively referred to herein as "Licensor"). All use of the Software is governed by the terms of this End User License Agreement ("License Agreement" or "Agreement"). The Software is distributed solely for use by authorized individuals or entities according to the terms of the License Agreement. Any use, reproduction or redistribution of the Software not expressly authorized by the terms of the License Agreement is expressly prohibited.', null);
        this._text_16 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_17 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_18 = this.renderer.createText(this._el_17, 'Ownership', null);
        this._text_19 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_20 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_21 = this.renderer.createText(this._el_20, 'All title, ownership rights and intellectual property rights in and to the Software and all copies thereof (including, but not limited to, any titles, computer code, artwork, any related documentation, executable code, shared libraries, proprietary computer protocols and "applets" incorporated into the Software) are owned or expressly licensed by Licensor. The Software is protected by the copyright laws of Hungary, international copyright treaties and conventions, and other laws. All rights are reserved. The Software may contain certain licensed materials, and the licensors of those materials may enforce their rights in the event of any violation of this License Agreement.', null);
        this._text_22 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_23 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_24 = this.renderer.createText(this._el_23, 'Each license purchased for this Software allows once instance of the Software to be used. You may not use multiple instances of the Software without obtaining, in advance, a new license or licenses for the new instance or instances and/or express written permission from Slamby. You may only permanently transfer ownership of the Software and all parts thereof, and all of your rights and obligations under the License Agreement, to another individual or entity, once you have notified Slamby. In this case, Slamby will issue a license for the new individual or entity once it has been established that old instance is no longer in use.', null);
        this._text_25 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_26 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_27 = this.renderer.createText(this._el_26, 'For the specific case of license(s) purchased for redistribution of this Software as part of licensee’s products, no notification to Slamby. shall be required and the license shall automatically transfer so long as the old instance is not in use by the licensee.', null);
        this._text_28 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_29 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_30 = this.renderer.createText(this._el_29, 'Responsibilities of end user', null);
        this._text_31 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_32 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_33 = this.renderer.createText(this._el_32, 'Subject to the Grant of License hereinabove, you may NOT, in whole or in part, copy, photocopy, reproduce, translate, reverse engineer, derive source code, modify, disassemble, decompile, or create derivative works based on the Software, or remove any proprietary notices or labels on the Software, with the exception of the non-compiled source files provided with the Software, including but not limited to template files and script files, which may be modified for use on the user specified in part “Ownership” only. Failure to comply with the restrictions and limitations contained in this Section 2 shall result in immediate, automatic termination of the license granted hereunder and may subject you to civil and/or criminal liability. Notwithstanding the foregoing, you may make one (1) copy of the Software and the Manuals for archival purposes only.', null);
        this._text_34 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_35 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_36 = this.renderer.createText(this._el_35, 'Termination', null);
        this._text_37 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_38 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_39 = this.renderer.createText(this._el_38, 'This License Agreement is effective until terminated. You may terminate the License Agreement at any time by (i) removing the Software from your hard drive, and (ii) notify Licensor of your intention to terminate this License Agreement. Licensor may, at its discretion, terminate this License agreement in the event that you fail to comply with the terms and conditions contained herein. In such event, you must either take immediate action to ensure that you are compliant with this License Agreement or cease all usage of the Software within 30 days from being notified of the termination of License agreement by the Licensor. Upon termination of this Agreement for any reason, all licenses granted herein shall immediately terminate.', null);
        this._text_40 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_41 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, 'Limitation of liability', null);
        this._text_43 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_44 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_45 = this.renderer.createText(this._el_44, 'NEITHER LICENSOR NOR ITS PARENT, SUBSIDIARIES OR AFFILIATES SHALL BE LIABLE IN ANY WAY FOR LOSS OR DAMAGE OF ANY KIND RESULTING FROM THE USE OF THE SOFTWARE, INCLUDING, BUT NOT LIMITED TO, LOSS OF DATA, LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES OR LOSSES. FURTHER, LICENSOR SHALL NOT BE LIABLE IN ANY WAY FOR THE LOSS OR DAMAGE TO PRODUCT DATA, LAYOUTS, TEMPLATES, ARTWORK, PRICING, PREDICTION, ANALYSIS AND OTHER INFORMATION STORED BY THE SOFTWARE. LICENSOR SHALL NOT BE RESPONSIBLE FOR ANY INTERRUPTIONS OF SERVICE, INCLUDING, BUT NOT LIMITED TO, ISP DISRUPTIONS, SOFTWARE OR HARDWARE FAILURES OR ANY OTHER EVENT WHICH MAY RESULT IN A LOSS OF DATA OR DISRUPTION OF SERVICE. IN NO EVENT WILL LICENSOR BE LIABLE TO YOU FOR ANY INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES. Some countries and regions do not allow the exclusion or limitation of incidental or consequential damages, so the above limitations may not apply to you.', null);
        this._text_46 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_47 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_48 = this.renderer.createText(this._el_47, 'Equitable remedies', null);
        this._text_49 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_50 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_51 = this.renderer.createText(this._el_50, 'You hereby agree that Licensor would be irreparably damaged if the terms of this License Agreement were not specifically enforced, and therefore you agree that Licensor shall be entitled, without bond, other security, or proof of damages, to appropriate equitable remedies with respect to breaches of this License Agreement, in addition to such other remedies as Licensor may otherwise have available to it under applicable laws. In the event any litigation is brought by either party in connection with this License Agreement, the prevailing party in such litigation shall be entitled to recover from the other party all the costs, attorneys\' fees and other expenses incurred by such prevailing party in the litigation.', null);
        this._text_52 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_53 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_54 = this.renderer.createText(this._el_53, 'Changes to the Agreement', null);
        this._text_55 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_56 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_57 = this.renderer.createText(this._el_56, 'Slamby reserves the right, at its sole discretion, to change, modify, add to, supplement or delete any of the terms and conditions of this License Agreement when Slamby upgrades the Software, effective upon prior notice as follows: Slamby will post notification of any such changes to this License Agreement on the Slamby.com website and will post the revised version of this License Agreement in this location, and may provide such other notice as Slamby may elect in its sole discretion, which may include by email, postal mail or pop-up screen.', null);
        this._text_58 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_59 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_60 = this.renderer.createText(this._el_59, 'If any future changes to this License Agreement are unacceptable to you or cause you to no longer be in compliance with this License Agreement, you may terminate this License Agreement in accordance with Section 3 herein. Your installation and use of any updated or modifications to the Software following notice of changes to this Agreement as described above will mean you accept any and all such changes. You may continue to use your pre-existing installation of the Software under the original License Agreement if you so notify Slamby. within 30 days of the change in the license. Slamby may change, modify, suspend, or discontinue any aspect of the Software at any time. Slamby may also impose limits on certain features or restrict your access to parts or all of the Software without notice or liability. You have no interest, monetary or otherwise, in any feature or content contained in the Software.', null);
        this._text_61 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_62 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_63 = this.renderer.createText(this._el_62, 'Miscellaneous', null);
        this._text_64 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_65 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_66 = this.renderer.createText(this._el_65, 'This License Agreement shall be deemed to have been made and executed in Hungary without regard to conflicts of law provisions, and any dispute arising hereunder shall be resolved in accordance with the law of Hungary. You agree that any claim asserted in any legal proceeding by one of the parties against the other shall be commenced and maintained in Hungary, having subject matter jurisdiction with respect to the dispute between the parties. In the event that any provision of this License Agreement shall be held by a court or other tribunal of competent jurisdiction to be unenforceable, such provision will be enforced to the maximum extent permissible, and the remaining portions of this License Agreement shall remain in full force and effect. This License Agreement constitutes and contains the entire agreement between the parties with respect to the subject matter hereof and supersedes any prior oral or written agreements.', null);
        this._text_67 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_68 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_69 = this.renderer.createText(this._el_68, 'I hereby acknowledge that I have read and understand the foregoing License Agreement and agree that the action of installing the Software is an acknowledgment of my agreement to be bound by the terms and conditions of the License Agreement contained herein.', null);
        this._text_70 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_71 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_72 = this.renderer.createText(this._el_71, '2013-2016 Slamby-Semantics Ltd. All rights reserved.', null);
        this._text_73 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_74 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._el_23,
            this._text_24,
            this._text_25,
            this._el_26,
            this._text_27,
            this._text_28,
            this._el_29,
            this._text_30,
            this._text_31,
            this._el_32,
            this._text_33,
            this._text_34,
            this._el_35,
            this._text_36,
            this._text_37,
            this._el_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._text_43,
            this._el_44,
            this._text_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._text_49,
            this._el_50,
            this._text_51,
            this._text_52,
            this._el_53,
            this._text_54,
            this._text_55,
            this._el_56,
            this._text_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._text_61,
            this._el_62,
            this._text_63,
            this._text_64,
            this._el_65,
            this._text_66,
            this._text_67,
            this._el_68,
            this._text_69,
            this._text_70,
            this._el_71,
            this._text_72,
            this._text_73,
            this._text_74
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

class Wrapper_CommercialLicenseOemComponent {
    constructor() {
        this._changed = false;
        this.context = new CommercialLicenseOemComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_CommercialLicenseOemComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_CommercialLicenseOemComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CommercialLicenseOemComponent_Host0, renderType_CommercialLicenseOemComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_CommercialLicenseOemComponent0(this.viewUtils, this, 0, this._el_0);
        this._CommercialLicenseOemComponent_0_3 = new Wrapper_CommercialLicenseOemComponent();
        this.compView_0.create(this._CommercialLicenseOemComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._CommercialLicenseOemComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === CommercialLicenseOemComponent) && (0 === requestNodeIndex))) {
            return this._CommercialLicenseOemComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._CommercialLicenseOemComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const CommercialLicenseOemComponentNgFactory = new ComponentFactory('ng-component', View_CommercialLicenseOemComponent_Host0, CommercialLicenseOemComponent);
const styles_CommercialLicenseOemComponent = [styles$9];
var renderType_CommercialLicenseOemComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_CommercialLicenseOemComponent, {});
class View_CommercialLicenseOemComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_CommercialLicenseOemComponent0, renderType_CommercialLicenseOemComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Extension to the slamby api commercial license for royalty free distribution (oem)', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_12 = this.renderer.createText(this._el_11, '1. Definitions', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, 'When used in this Agreement, the following terms shall have the respective meanings indicated, such meanings to be applicable to both the singular and plural forms of the terms defined:', null);
        this._text_16 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_17 = createRenderElement(this.renderer, this._el_6, 'ul', EMPTY_INLINE_ARRAY, null);
        this._text_18 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_19 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_20 = this.renderer.createText(this._el_19, '“We” or “Us” or “Slamby” or “Our” or the “Company” refers to Slamby-Semantics Ltd.', null);
        this._text_21 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_22 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_23 = this.renderer.createText(this._el_22, '“You” and “Your” and “User” refers to the entity and/or individual person, natural or legal, consenting to, and entering into, this Agreement.', null);
        this._text_24 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_25 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_26 = this.renderer.createText(this._el_25, '"Licensor" means Slamby.', null);
        this._text_27 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_28 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_29 = this.renderer.createText(this._el_28, '"Software" means (a) all of the contents of the files, disk(s), disk image(s), Docker containers or other media with which this Agreement is provided, including but not limited to ((i) digital images (ii) related explanatory written materials or files ("Documentation"); and (iii) fonts; and (b) upgrades, modified versions, updates, additions, and copies of the Software, if any, licensed to you by Slamby (collectively, "Updates").', null);
        this._text_30 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_31 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_32 = this.renderer.createText(this._el_31, '"Use" or "Using" means to access, install, download, copy or otherwise benefit from using the functionality of the Software.', null);
        this._text_33 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_34 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_35 = this.renderer.createText(this._el_34, '"Licensee" means You or Your Company, unless otherwise indicated.', null);
        this._text_36 = this.renderer.createText(this._el_17, '\n            ', null);
        this._el_37 = createRenderElement(this.renderer, this._el_17, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_38 = this.renderer.createText(this._el_37, '"System" means Windows OS, GNU/Linux or Mac OS X, Docker or any virtual machine.', null);
        this._text_39 = this.renderer.createText(this._el_17, '\n        ', null);
        this._text_40 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_41 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, '2. General Use', null);
        this._text_43 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_44 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_45 = this.renderer.createText(this._el_44, 'As long as the Licensee complies with the terms of this extension of End User License Agreement (the "Agreement") and the Agreement itself, the Licensor grants the Licensee a non-exclusive right to install and Use the Software for the purposes described in the Documentation under the following conditions:', null);
        this._text_46 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_47 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_48 = this.renderer.createText(this._el_47, 'The Software may be installed and used by the Licensee for business, commercial and money-earning purposes.', null);
        this._text_49 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_50 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_51 = this.renderer.createText(this._el_50, 'This License can be deployed on any number of systems.', null);
        this._text_52 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_53 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_54 = this.renderer.createText(this._el_53, 'The Software under this License may be incorporated into software/hardware projects sold by the Licensee.', null);
        this._text_55 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_56 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_57 = this.renderer.createText(this._el_56, 'The Licensee may physically or electronically distribute the Software to his manufacturing and service partners but only as an intermediary product, requiring incorporation of the Software into the software or hardware developed by the Licensee in cases when the manufacturing process involves the Licensee\'s partner\'s job to complete the project before distributing it to end-users.', null);
        this._text_58 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_59 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_60 = this.renderer.createText(this._el_59, 'The Licensee or his manufacturing and service partners may reproduce and physically or electronically distribute the Software only as an integral part of or incorporated into their software or hardware product.', null);
        this._text_61 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_62 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_63 = this.renderer.createText(this._el_62, 'This License entitles the Licensee to the unlimited redistribution of the Licensor\'s technology as a part of the Licensee\'s product.', null);
        this._text_64 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_65 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_66 = this.renderer.createText(this._el_65, 'This License is royalty-free, i.e. the Licensee does not need to pay a fee per every order of his product with the incorporated Licensor\'s technology.', null);
        this._text_67 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_68 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_69 = this.renderer.createText(this._el_68, 'This License cannot be used by the Licensee to develop a software application that would compete with products marketed by the Licensor.', null);
        this._text_70 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_71 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_72 = this.renderer.createText(this._el_71, '3. Intellectual Property Rights', null);
        this._text_73 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_74 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_75 = this.renderer.createText(this._el_74, '3.1 This License does not transmit any intellectual rights on the Software. The Software and any copies that the Licensee is authorized by the Licensor to make are the intellectual property of and are owned by the Licensor.', null);
        this._text_76 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_77 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_78 = this.renderer.createText(this._el_77, '3.2 The Software is protected by copyright, including without limitation by Copyright Law and international treaty provisions.', null);
        this._text_79 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_80 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_81 = this.renderer.createText(this._el_80, '3.3 Any copies that the Licensee is permitted to make pursuant to this Agreement must contain the same copyright and other proprietary notices that appear on or in the Software.', null);
        this._text_82 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_83 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_84 = this.renderer.createText(this._el_83, '3.4 Any information supplied by the Licensor or obtained by the Licensee, as permitted hereunder, may only be used by the Licensee for the purpose described herein and may not be disclosed to any third party or used to create any software which is substantially similar to the expression of the Software.', null);
        this._text_85 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_86 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_87 = this.renderer.createText(this._el_86, '3.5 Trademarks shall be used in accordance with accepted trademark practice, including identification of trademarks owners\' names. Trademarks can only be used to identify printed output produced by the Software and such use of any trademark does not give the Licensee any rights of ownership in that trademark.', null);
        this._text_88 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_89 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_90 = this.renderer.createText(this._el_89, 'License Transfer', null);
        this._text_91 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_92 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_93 = this.renderer.createText(this._el_92, '4.1 This License is non-transferable. The Licensee may not transfer the rights to Use the Software to third parties (another person or legal entity).', null);
        this._text_94 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_95 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_96 = this.renderer.createText(this._el_95, '4.2 The Licensee may not rent, lease, sub-license, lend or transfer any versions or copies of the Software to third parties (another person or legal entity).', null);
        this._text_97 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_98 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_99 = this.renderer.createText(this._el_98, '4.3 The Licensee may make a back-up copy of the Software, provided a backup copy is not installed or used on any system not belonging to the Licensee. The Licensee may not transfer the rights to install or use a backup copy of the Software to third parties (another person or legal entity).', null);
        this._text_100 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_101 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._text_21,
            this._el_22,
            this._text_23,
            this._text_24,
            this._el_25,
            this._text_26,
            this._text_27,
            this._el_28,
            this._text_29,
            this._text_30,
            this._el_31,
            this._text_32,
            this._text_33,
            this._el_34,
            this._text_35,
            this._text_36,
            this._el_37,
            this._text_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._text_43,
            this._el_44,
            this._text_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._text_49,
            this._el_50,
            this._text_51,
            this._text_52,
            this._el_53,
            this._text_54,
            this._text_55,
            this._el_56,
            this._text_57,
            this._text_58,
            this._el_59,
            this._text_60,
            this._text_61,
            this._el_62,
            this._text_63,
            this._text_64,
            this._el_65,
            this._text_66,
            this._text_67,
            this._el_68,
            this._text_69,
            this._text_70,
            this._el_71,
            this._text_72,
            this._text_73,
            this._el_74,
            this._text_75,
            this._text_76,
            this._el_77,
            this._text_78,
            this._text_79,
            this._el_80,
            this._text_81,
            this._text_82,
            this._el_83,
            this._text_84,
            this._text_85,
            this._el_86,
            this._text_87,
            this._text_88,
            this._el_89,
            this._text_90,
            this._text_91,
            this._el_92,
            this._text_93,
            this._text_94,
            this._el_95,
            this._text_96,
            this._text_97,
            this._el_98,
            this._text_99,
            this._text_100,
            this._text_101
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

class Wrapper_GnuAgplLicenseComponent {
    constructor() {
        this._changed = false;
        this.context = new GnuAgplLicenseComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_GnuAgplLicenseComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_GnuAgplLicenseComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_GnuAgplLicenseComponent_Host0, renderType_GnuAgplLicenseComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_GnuAgplLicenseComponent0(this.viewUtils, this, 0, this._el_0);
        this._GnuAgplLicenseComponent_0_3 = new Wrapper_GnuAgplLicenseComponent();
        this.compView_0.create(this._GnuAgplLicenseComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._GnuAgplLicenseComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === GnuAgplLicenseComponent) && (0 === requestNodeIndex))) {
            return this._GnuAgplLicenseComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._GnuAgplLicenseComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const GnuAgplLicenseComponentNgFactory = new ComponentFactory('ng-component', View_GnuAgplLicenseComponent_Host0, GnuAgplLicenseComponent);
const styles_GnuAgplLicenseComponent = [styles$9];
var renderType_GnuAgplLicenseComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_GnuAgplLicenseComponent, {});
class View_GnuAgplLicenseComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_GnuAgplLicenseComponent0, renderType_GnuAgplLicenseComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Gnu affero general public license', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'Version 3, 19 November 2007', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, 'Copyright © 2007 Free Software Foundation,\n        Inc. <', null);
        this._el_16 = createRenderElement(this.renderer, this._el_14, 'a', new InlineArray4(4, 'href', 'http://fsf.org/', 'target', '_blank'), null);
        this._text_17 = this.renderer.createText(this._el_16, 'http://fsf.org/', null);
        this._text_18 = this.renderer.createText(this._el_14, '>\n        ', null);
        this._el_19 = createRenderElement(this.renderer, this._el_14, 'br', EMPTY_INLINE_ARRAY, null);
        this._text_20 = this.renderer.createText(this._el_14, '\n        Everyone is permitted to copy and distribute verbatim copies\n        of this license document, but changing it is not allowed.', null);
        this._text_21 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_22 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._el_23 = createRenderElement(this.renderer, this._el_22, 'a', new InlineArray2(2, 'name', 'preamble'), null);
        this._text_24 = this.renderer.createText(this._el_22, 'Preamble', null);
        this._text_25 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_26 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_27 = this.renderer.createText(this._el_26, 'The GNU Affero General Public License is a free, copyleft license\n        for software and other kinds of works, specifically designed to ensure\n        cooperation with the community in the case of network server software.', null);
        this._text_28 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_29 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_30 = this.renderer.createText(this._el_29, 'The licenses for most software and other practical works are\n        designed to take away your freedom to share and change the works.  By\n        contrast, our General Public Licenses are intended to guarantee your\n        freedom to share and change all versions of a program--to make sure it\n        remains free software for all its users.', null);
        this._text_31 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_32 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_33 = this.renderer.createText(this._el_32, 'When we speak of free software, we are referring to freedom, not\n        price.  Our General Public Licenses are designed to make sure that you\n        have the freedom to distribute copies of free software (and charge for\n        them if you wish), that you receive source code or can get it if you\n        want it, that you can change the software or use pieces of it in new\n        free programs, and that you know you can do these things.', null);
        this._text_34 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_35 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_36 = this.renderer.createText(this._el_35, 'Developers that use our General Public Licenses protect your rights\n        with two steps: (1) assert copyright on the software, and (2) offer\n        you this License which gives you legal permission to copy, distribute\n        and/or modify the software.', null);
        this._text_37 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_38 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_39 = this.renderer.createText(this._el_38, 'A secondary benefit of defending all users\' freedom is that\n        improvements made in alternate versions of the program, if they\n        receive widespread use, become available for other developers to\n        incorporate.  Many developers of free software are heartened and\n        encouraged by the resulting cooperation.  However, in the case of\n        software used on network servers, this result may fail to come about.\n        The GNU General Public License permits making a modified version and\n        letting the public access it on a server without ever releasing its\n        source code to the public.', null);
        this._text_40 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_41 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_42 = this.renderer.createText(this._el_41, 'The GNU Affero General Public License is designed specifically to\n        ensure that, in such cases, the modified source code becomes available\n        to the community.  It requires the operator of a network server to\n        provide the source code of the modified version running there to the\n        users of that server.  Therefore, public use of a modified version, on\n        a publicly accessible server, gives the public access to the source\n        code of the modified version.', null);
        this._text_43 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_44 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_45 = this.renderer.createText(this._el_44, 'An older license, called the Affero General Public License and\n        published by Affero, was designed to accomplish similar goals.  This is\n        a different license, not a version of the Affero GPL, but Affero has\n        released a new version of the Affero GPL which permits relicensing under\n        this license.', null);
        this._text_46 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_47 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_48 = this.renderer.createText(this._el_47, 'The precise terms and conditions for copying, distribution and\n        modification follow.', null);
        this._text_49 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_50 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._el_51 = createRenderElement(this.renderer, this._el_50, 'a', new InlineArray2(2, 'name', 'terms'), null);
        this._text_52 = this.renderer.createText(this._el_50, 'TERMS AND CONDITIONS', null);
        this._text_53 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_54 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_55 = createRenderElement(this.renderer, this._el_54, 'a', new InlineArray2(2, 'name', 'section0'), null);
        this._text_56 = this.renderer.createText(this._el_54, '0. Definitions.', null);
        this._text_57 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_58 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_59 = this.renderer.createText(this._el_58, '"This License" refers to version 3 of the GNU Affero General Public\n        License.', null);
        this._text_60 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_61 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_62 = this.renderer.createText(this._el_61, '"Copyright" also means copyright-like laws that apply to other kinds\n        of works, such as semiconductor masks.', null);
        this._text_63 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_64 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_65 = this.renderer.createText(this._el_64, '"The Program" refers to any copyrightable work licensed under this\n        License.  Each licensee is addressed as "you".  "Licensees" and\n        "recipients" may be individuals or organizations.', null);
        this._text_66 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_67 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_68 = this.renderer.createText(this._el_67, 'To "modify" a work means to copy from or adapt all or part of the work\n        in a fashion requiring copyright permission, other than the making of an\n        exact copy.  The resulting work is called a "modified version" of the\n        earlier work or a work "based on" the earlier work.', null);
        this._text_69 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_70 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_71 = this.renderer.createText(this._el_70, 'A "covered work" means either the unmodified Program or a work based\n        on the Program.', null);
        this._text_72 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_73 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_74 = this.renderer.createText(this._el_73, 'To "propagate" a work means to do anything with it that, without\n        permission, would make you directly or secondarily liable for\n        infringement under applicable copyright law, except executing it on a\n        computer or modifying a private copy.  Propagation includes copying,\n        distribution (with or without modification), making available to the\n        public, and in some countries other activities as well.', null);
        this._text_75 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_76 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_77 = this.renderer.createText(this._el_76, 'To "convey" a work means any kind of propagation that enables other\n        parties to make or receive copies.  Mere interaction with a user through\n        a computer network, with no transfer of a copy, is not conveying.', null);
        this._text_78 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_79 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_80 = this.renderer.createText(this._el_79, 'An interactive user interface displays "Appropriate Legal Notices"\n        to the extent that it includes a convenient and prominently visible\n        feature that (1) displays an appropriate copyright notice, and (2)\n        tells the user that there is no warranty for the work (except to the\n        extent that warranties are provided), that licensees may convey the\n        work under this License, and how to view a copy of this License.  If\n        the interface presents a list of user commands or options, such as a\n        menu, a prominent item in the list meets this criterion.', null);
        this._text_81 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_82 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_83 = createRenderElement(this.renderer, this._el_82, 'a', new InlineArray2(2, 'name', 'section1'), null);
        this._text_84 = this.renderer.createText(this._el_82, '1. Source Code.', null);
        this._text_85 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_86 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_87 = this.renderer.createText(this._el_86, 'The "source code" for a work means the preferred form of the work\n        for making modifications to it.  "Object code" means any non-source\n        form of a work.', null);
        this._text_88 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_89 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_90 = this.renderer.createText(this._el_89, 'A "Standard Interface" means an interface that either is an official\n        standard defined by a recognized standards body, or, in the case of\n        interfaces specified for a particular programming language, one that\n        is widely used among developers working in that language.', null);
        this._text_91 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_92 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_93 = this.renderer.createText(this._el_92, 'The "System Libraries" of an executable work include anything, other\n        than the work as a whole, that (a) is included in the normal form of\n        packaging a Major Component, but which is not part of that Major\n        Component, and (b) serves only to enable use of the work with that\n        Major Component, or to implement a Standard Interface for which an\n        implementation is available to the public in source code form.  A\n        "Major Component", in this context, means a major essential component\n        (kernel, window system, and so on) of the specific operating system\n        (if any) on which the executable work runs, or a compiler used to\n        produce the work, or an object code interpreter used to run it.', null);
        this._text_94 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_95 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_96 = this.renderer.createText(this._el_95, 'The "Corresponding Source" for a work in object code form means all\n        the source code needed to generate, install, and (for an executable\n        work) run the object code and to modify the work, including scripts to\n        control those activities.  However, it does not include the work\'s\n        System Libraries, or general-purpose tools or generally available free\n        programs which are used unmodified in performing those activities but\n        which are not part of the work.  For example, Corresponding Source\n        includes interface definition files associated with source files for\n        the work, and the source code for shared libraries and dynamically\n        linked subprograms that the work is specifically designed to require,\n        such as by intimate data communication or control flow between those\n        subprograms and other parts of the work.', null);
        this._text_97 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_98 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_99 = this.renderer.createText(this._el_98, 'The Corresponding Source need not include anything that users\n        can regenerate automatically from other parts of the Corresponding\n        Source.', null);
        this._text_100 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_101 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_102 = this.renderer.createText(this._el_101, 'The Corresponding Source for a work in source code form is that\n        same work.', null);
        this._text_103 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_104 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_105 = createRenderElement(this.renderer, this._el_104, 'a', new InlineArray2(2, 'name', 'section2'), null);
        this._text_106 = this.renderer.createText(this._el_104, '2. Basic Permissions.', null);
        this._text_107 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_108 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_109 = this.renderer.createText(this._el_108, 'All rights granted under this License are granted for the term of\n        copyright on the Program, and are irrevocable provided the stated\n        conditions are met.  This License explicitly affirms your unlimited\n        permission to run the unmodified Program.  The output from running a\n        covered work is covered by this License only if the output, given its\n        content, constitutes a covered work.  This License acknowledges your\n        rights of fair use or other equivalent, as provided by copyright law.', null);
        this._text_110 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_111 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_112 = this.renderer.createText(this._el_111, 'You may make, run and propagate covered works that you do not\n        convey, without conditions so long as your license otherwise remains\n        in force.  You may convey covered works to others for the sole purpose\n        of having them make modifications exclusively for you, or provide you\n        with facilities for running those works, provided that you comply with\n        the terms of this License in conveying all material for which you do\n        not control copyright.  Those thus making or running the covered works\n        for you must do so exclusively on your behalf, under your direction\n        and control, on terms that prohibit them from making any copies of\n        your copyrighted material outside their relationship with you.', null);
        this._text_113 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_114 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_115 = this.renderer.createText(this._el_114, 'Conveying under any other circumstances is permitted solely under\n        the conditions stated below.  Sublicensing is not allowed; section 10\n        makes it unnecessary.', null);
        this._text_116 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_117 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_118 = createRenderElement(this.renderer, this._el_117, 'a', new InlineArray2(2, 'name', 'section3'), null);
        this._text_119 = this.renderer.createText(this._el_117, '3. Protecting Users\' Legal Rights From Anti-Circumvention Law.', null);
        this._text_120 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_121 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_122 = this.renderer.createText(this._el_121, 'No covered work shall be deemed part of an effective technological\n        measure under any applicable law fulfilling obligations under article\n        11 of the WIPO copyright treaty adopted on 20 December 1996, or\n        similar laws prohibiting or restricting circumvention of such\n        measures.', null);
        this._text_123 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_124 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_125 = this.renderer.createText(this._el_124, 'When you convey a covered work, you waive any legal power to forbid\n        circumvention of technological measures to the extent such circumvention\n        is effected by exercising rights under this License with respect to\n        the covered work, and you disclaim any intention to limit operation or\n        modification of the work as a means of enforcing, against the work\'s\n        users, your or third parties\' legal rights to forbid circumvention of\n        technological measures.', null);
        this._text_126 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_127 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_128 = createRenderElement(this.renderer, this._el_127, 'a', new InlineArray2(2, 'name', 'section4'), null);
        this._text_129 = this.renderer.createText(this._el_127, '4. Conveying Verbatim Copies.', null);
        this._text_130 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_131 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_132 = this.renderer.createText(this._el_131, 'You may convey verbatim copies of the Program\'s source code as you\n        receive it, in any medium, provided that you conspicuously and\n        appropriately publish on each copy an appropriate copyright notice;\n        keep intact all notices stating that this License and any\n        non-permissive terms added in accord with section 7 apply to the code;\n        keep intact all notices of the absence of any warranty; and give all\n        recipients a copy of this License along with the Program.', null);
        this._text_133 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_134 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_135 = this.renderer.createText(this._el_134, 'You may charge any price or no price for each copy that you convey,\n        and you may offer support or warranty protection for a fee.', null);
        this._text_136 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_137 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_138 = createRenderElement(this.renderer, this._el_137, 'a', new InlineArray2(2, 'name', 'section5'), null);
        this._text_139 = this.renderer.createText(this._el_137, '5. Conveying Modified Source Versions.', null);
        this._text_140 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_141 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_142 = this.renderer.createText(this._el_141, 'You may convey a work based on the Program, or the modifications to\n        produce it from the Program, in the form of source code under the\n        terms of section 4, provided that you also meet all of these conditions:', null);
        this._text_143 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_144 = createRenderElement(this.renderer, this._el_6, 'ul', EMPTY_INLINE_ARRAY, null);
        this._text_145 = this.renderer.createText(this._el_144, '\n\n        ', null);
        this._el_146 = createRenderElement(this.renderer, this._el_144, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_147 = this.renderer.createText(this._el_146, 'a) The work must carry prominent notices stating that you modified\n            it, and giving a relevant date.', null);
        this._text_148 = this.renderer.createText(this._el_144, '\n\n        ', null);
        this._el_149 = createRenderElement(this.renderer, this._el_144, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_150 = this.renderer.createText(this._el_149, 'b) The work must carry prominent notices stating that it is\n            released under this License and any conditions added under section\n            7.  This requirement modifies the requirement in section 4 to\n            "keep intact all notices".', null);
        this._text_151 = this.renderer.createText(this._el_144, '\n\n        ', null);
        this._el_152 = createRenderElement(this.renderer, this._el_144, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_153 = this.renderer.createText(this._el_152, 'c) You must license the entire work, as a whole, under this\n            License to anyone who comes into possession of a copy.  This\n            License will therefore apply, along with any applicable section 7\n            additional terms, to the whole of the work, and all its parts,\n            regardless of how they are packaged.  This License gives no\n            permission to license the work in any other way, but it does not\n            invalidate such permission if you have separately received it.', null);
        this._text_154 = this.renderer.createText(this._el_144, '\n\n        ', null);
        this._el_155 = createRenderElement(this.renderer, this._el_144, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_156 = this.renderer.createText(this._el_155, 'd) If the work has interactive user interfaces, each must display\n            Appropriate Legal Notices; however, if the Program has interactive\n            interfaces that do not display Appropriate Legal Notices, your\n            work need not make them do so.', null);
        this._text_157 = this.renderer.createText(this._el_144, '\n\n        ', null);
        this._text_158 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_159 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_160 = this.renderer.createText(this._el_159, 'A compilation of a covered work with other separate and independent\n        works, which are not by their nature extensions of the covered work,\n        and which are not combined with it such as to form a larger program,\n        in or on a volume of a storage or distribution medium, is called an\n        "aggregate" if the compilation and its resulting copyright are not\n        used to limit the access or legal rights of the compilation\'s users\n        beyond what the individual works permit.  Inclusion of a covered work\n        in an aggregate does not cause this License to apply to the other\n        parts of the aggregate.', null);
        this._text_161 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_162 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_163 = createRenderElement(this.renderer, this._el_162, 'a', new InlineArray2(2, 'name', 'section6'), null);
        this._text_164 = this.renderer.createText(this._el_162, '6. Conveying Non-Source Forms.', null);
        this._text_165 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_166 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_167 = this.renderer.createText(this._el_166, 'You may convey a covered work in object code form under the terms\n        of sections 4 and 5, provided that you also convey the\n        machine-readable Corresponding Source under the terms of this License,\n        in one of these ways:', null);
        this._text_168 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_169 = createRenderElement(this.renderer, this._el_6, 'ul', EMPTY_INLINE_ARRAY, null);
        this._text_170 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._el_171 = createRenderElement(this.renderer, this._el_169, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_172 = this.renderer.createText(this._el_171, 'a) Convey the object code in, or embodied in, a physical product\n            (including a physical distribution medium), accompanied by the\n            Corresponding Source fixed on a durable physical medium\n            customarily used for software interchange.', null);
        this._text_173 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._el_174 = createRenderElement(this.renderer, this._el_169, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_175 = this.renderer.createText(this._el_174, 'b) Convey the object code in, or embodied in, a physical product\n            (including a physical distribution medium), accompanied by a\n            written offer, valid for at least three years and valid for as\n            long as you offer spare parts or customer support for that product\n            model, to give anyone who possesses the object code either (1) a\n            copy of the Corresponding Source for all the software in the\n            product that is covered by this License, on a durable physical\n            medium customarily used for software interchange, for a price no\n            more than your reasonable cost of physically performing this\n            conveying of source, or (2) access to copy the\n            Corresponding Source from a network server at no charge.', null);
        this._text_176 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._el_177 = createRenderElement(this.renderer, this._el_169, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_178 = this.renderer.createText(this._el_177, 'c) Convey individual copies of the object code with a copy of the\n            written offer to provide the Corresponding Source.  This\n            alternative is allowed only occasionally and noncommercially, and\n            only if you received the object code with such an offer, in accord\n            with subsection 6b.', null);
        this._text_179 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._el_180 = createRenderElement(this.renderer, this._el_169, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_181 = this.renderer.createText(this._el_180, 'd) Convey the object code by offering access from a designated\n            place (gratis or for a charge), and offer equivalent access to the\n            Corresponding Source in the same way through the same place at no\n            further charge.  You need not require recipients to copy the\n            Corresponding Source along with the object code.  If the place to\n            copy the object code is a network server, the Corresponding Source\n            may be on a different server (operated by you or a third party)\n            that supports equivalent copying facilities, provided you maintain\n            clear directions next to the object code saying where to find the\n            Corresponding Source.  Regardless of what server hosts the\n            Corresponding Source, you remain obligated to ensure that it is\n            available for as long as needed to satisfy these requirements.', null);
        this._text_182 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._el_183 = createRenderElement(this.renderer, this._el_169, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_184 = this.renderer.createText(this._el_183, 'e) Convey the object code using peer-to-peer transmission, provided\n            you inform other peers where the object code and Corresponding\n            Source of the work are being offered to the general public at no\n            charge under subsection 6d.', null);
        this._text_185 = this.renderer.createText(this._el_169, '\n\n        ', null);
        this._text_186 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_187 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_188 = this.renderer.createText(this._el_187, 'A separable portion of the object code, whose source code is excluded\n        from the Corresponding Source as a System Library, need not be\n        included in conveying the object code work.', null);
        this._text_189 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_190 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_191 = this.renderer.createText(this._el_190, 'A "User Product" is either (1) a "consumer product", which means any\n        tangible personal property which is normally used for personal, family,\n        or household purposes, or (2) anything designed or sold for incorporation\n        into a dwelling.  In determining whether a product is a consumer product,\n        doubtful cases shall be resolved in favor of coverage.  For a particular\n        product received by a particular user, "normally used" refers to a\n        typical or common use of that class of product, regardless of the status\n        of the particular user or of the way in which the particular user\n        actually uses, or expects or is expected to use, the product.  A product\n        is a consumer product regardless of whether the product has substantial\n        commercial, industrial or non-consumer uses, unless such uses represent\n        the only significant mode of use of the product.', null);
        this._text_192 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_193 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_194 = this.renderer.createText(this._el_193, '"Installation Information" for a User Product means any methods,\n        procedures, authorization keys, or other information required to install\n        and execute modified versions of a covered work in that User Product from\n        a modified version of its Corresponding Source.  The information must\n        suffice to ensure that the continued functioning of the modified object\n        code is in no case prevented or interfered with solely because\n        modification has been made.', null);
        this._text_195 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_196 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_197 = this.renderer.createText(this._el_196, 'If you convey an object code work under this section in, or with, or\n        specifically for use in, a User Product, and the conveying occurs as\n        part of a transaction in which the right of possession and use of the\n        User Product is transferred to the recipient in perpetuity or for a\n        fixed term (regardless of how the transaction is characterized), the\n        Corresponding Source conveyed under this section must be accompanied\n        by the Installation Information.  But this requirement does not apply\n        if neither you nor any third party retains the ability to install\n        modified object code on the User Product (for example, the work has\n        been installed in ROM).', null);
        this._text_198 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_199 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_200 = this.renderer.createText(this._el_199, 'The requirement to provide Installation Information does not include a\n        requirement to continue to provide support service, warranty, or updates\n        for a work that has been modified or installed by the recipient, or for\n        the User Product in which it has been modified or installed.  Access to a\n        network may be denied when the modification itself materially and\n        adversely affects the operation of the network or violates the rules and\n        protocols for communication across the network.', null);
        this._text_201 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_202 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_203 = this.renderer.createText(this._el_202, 'Corresponding Source conveyed, and Installation Information provided,\n        in accord with this section must be in a format that is publicly\n        documented (and with an implementation available to the public in\n        source code form), and must require no special password or key for\n        unpacking, reading or copying.', null);
        this._text_204 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_205 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_206 = createRenderElement(this.renderer, this._el_205, 'a', new InlineArray2(2, 'name', 'section7'), null);
        this._text_207 = this.renderer.createText(this._el_205, '7. Additional Terms.', null);
        this._text_208 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_209 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_210 = this.renderer.createText(this._el_209, '"Additional permissions" are terms that supplement the terms of this\n        License by making exceptions from one or more of its conditions.\n        Additional permissions that are applicable to the entire Program shall\n        be treated as though they were included in this License, to the extent\n        that they are valid under applicable law.  If additional permissions\n        apply only to part of the Program, that part may be used separately\n        under those permissions, but the entire Program remains governed by\n        this License without regard to the additional permissions.', null);
        this._text_211 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_212 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_213 = this.renderer.createText(this._el_212, 'When you convey a copy of a covered work, you may at your option\n        remove any additional permissions from that copy, or from any part of\n        it.  (Additional permissions may be written to require their own\n        removal in certain cases when you modify the work.)  You may place\n        additional permissions on material, added by you to a covered work,\n        for which you have or can give appropriate copyright permission.', null);
        this._text_214 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_215 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_216 = this.renderer.createText(this._el_215, 'Notwithstanding any other provision of this License, for material you\n        add to a covered work, you may (if authorized by the copyright holders of\n        that material) supplement the terms of this License with terms:', null);
        this._text_217 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_218 = createRenderElement(this.renderer, this._el_6, 'ul', EMPTY_INLINE_ARRAY, null);
        this._text_219 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_220 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_221 = this.renderer.createText(this._el_220, 'a) Disclaiming warranty or limiting liability differently from the\n            terms of sections 15 and 16 of this License; or', null);
        this._text_222 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_223 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_224 = this.renderer.createText(this._el_223, 'b) Requiring preservation of specified reasonable legal notices or\n            author attributions in that material or in the Appropriate Legal\n            Notices displayed by works containing it; or', null);
        this._text_225 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_226 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_227 = this.renderer.createText(this._el_226, 'c) Prohibiting misrepresentation of the origin of that material, or\n            requiring that modified versions of such material be marked in\n            reasonable ways as different from the original version; or', null);
        this._text_228 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_229 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_230 = this.renderer.createText(this._el_229, 'd) Limiting the use for publicity purposes of names of licensors or\n            authors of the material; or', null);
        this._text_231 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_232 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_233 = this.renderer.createText(this._el_232, 'e) Declining to grant rights under trademark law for use of some\n            trade names, trademarks, or service marks; or', null);
        this._text_234 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._el_235 = createRenderElement(this.renderer, this._el_218, 'li', EMPTY_INLINE_ARRAY, null);
        this._text_236 = this.renderer.createText(this._el_235, 'f) Requiring indemnification of licensors and authors of that\n            material by anyone who conveys the material (or modified versions of\n            it) with contractual assumptions of liability to the recipient, for\n            any liability that these contractual assumptions directly impose on\n            those licensors and authors.', null);
        this._text_237 = this.renderer.createText(this._el_218, '\n\n        ', null);
        this._text_238 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_239 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_240 = this.renderer.createText(this._el_239, 'All other non-permissive additional terms are considered "further\n        restrictions" within the meaning of section 10.  If the Program as you\n        received it, or any part of it, contains a notice stating that it is\n        governed by this License along with a term that is a further restriction,\n        you may remove that term.  If a license document contains a further\n        restriction but permits relicensing or conveying under this License, you\n        may add to a covered work material governed by the terms of that license\n        document, provided that the further restriction does not survive such\n        relicensing or conveying.', null);
        this._text_241 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_242 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_243 = this.renderer.createText(this._el_242, 'If you add terms to a covered work in accord with this section, you\n        must place, in the relevant source files, a statement of the\n        additional terms that apply to those files, or a notice indicating\n        where to find the applicable terms.', null);
        this._text_244 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_245 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_246 = this.renderer.createText(this._el_245, 'Additional terms, permissive or non-permissive, may be stated in the\n        form of a separately written license, or stated as exceptions;\n        the above requirements apply either way.', null);
        this._text_247 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_248 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_249 = createRenderElement(this.renderer, this._el_248, 'a', new InlineArray2(2, 'name', 'section8'), null);
        this._text_250 = this.renderer.createText(this._el_248, '8. Termination.', null);
        this._text_251 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_252 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_253 = this.renderer.createText(this._el_252, 'You may not propagate or modify a covered work except as expressly\n        provided under this License.  Any attempt otherwise to propagate or\n        modify it is void, and will automatically terminate your rights under\n        this License (including any patent licenses granted under the third\n        paragraph of section 11).', null);
        this._text_254 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_255 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_256 = this.renderer.createText(this._el_255, 'However, if you cease all violation of this License, then your\n        license from a particular copyright holder is reinstated (a)\n        provisionally, unless and until the copyright holder explicitly and\n        finally terminates your license, and (b) permanently, if the copyright\n        holder fails to notify you of the violation by some reasonable means\n        prior to 60 days after the cessation.', null);
        this._text_257 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_258 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_259 = this.renderer.createText(this._el_258, 'Moreover, your license from a particular copyright holder is\n        reinstated permanently if the copyright holder notifies you of the\n        violation by some reasonable means, this is the first time you have\n        received notice of violation of this License (for any work) from that\n        copyright holder, and you cure the violation prior to 30 days after\n        your receipt of the notice.', null);
        this._text_260 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_261 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_262 = this.renderer.createText(this._el_261, 'Termination of your rights under this section does not terminate the\n        licenses of parties who have received copies or rights from you under\n        this License.  If your rights have been terminated and not permanently\n        reinstated, you do not qualify to receive new licenses for the same\n        material under section 10.', null);
        this._text_263 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_264 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_265 = createRenderElement(this.renderer, this._el_264, 'a', new InlineArray2(2, 'name', 'section9'), null);
        this._text_266 = this.renderer.createText(this._el_264, '9. Acceptance Not Required for Having Copies.', null);
        this._text_267 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_268 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_269 = this.renderer.createText(this._el_268, 'You are not required to accept this License in order to receive or\n        run a copy of the Program.  Ancillary propagation of a covered work\n        occurring solely as a consequence of using peer-to-peer transmission\n        to receive a copy likewise does not require acceptance.  However,\n        nothing other than this License grants you permission to propagate or\n        modify any covered work.  These actions infringe copyright if you do\n        not accept this License.  Therefore, by modifying or propagating a\n        covered work, you indicate your acceptance of this License to do so.', null);
        this._text_270 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_271 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_272 = createRenderElement(this.renderer, this._el_271, 'a', new InlineArray2(2, 'name', 'section10'), null);
        this._text_273 = this.renderer.createText(this._el_271, '10. Automatic Licensing of Downstream Recipients.', null);
        this._text_274 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_275 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_276 = this.renderer.createText(this._el_275, 'Each time you convey a covered work, the recipient automatically\n        receives a license from the original licensors, to run, modify and\n        propagate that work, subject to this License.  You are not responsible\n        for enforcing compliance by third parties with this License.', null);
        this._text_277 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_278 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_279 = this.renderer.createText(this._el_278, 'An "entity transaction" is a transaction transferring control of an\n        organization, or substantially all assets of one, or subdividing an\n        organization, or merging organizations.  If propagation of a covered\n        work results from an entity transaction, each party to that\n        transaction who receives a copy of the work also receives whatever\n        licenses to the work the party\'s predecessor in interest had or could\n        give under the previous paragraph, plus a right to possession of the\n        Corresponding Source of the work from the predecessor in interest, if\n        the predecessor has it or can get it with reasonable efforts.', null);
        this._text_280 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_281 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_282 = this.renderer.createText(this._el_281, 'You may not impose any further restrictions on the exercise of the\n        rights granted or affirmed under this License.  For example, you may\n        not impose a license fee, royalty, or other charge for exercise of\n        rights granted under this License, and you may not initiate litigation\n        (including a cross-claim or counterclaim in a lawsuit) alleging that\n        any patent claim is infringed by making, using, selling, offering for\n        sale, or importing the Program or any portion of it.', null);
        this._text_283 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_284 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_285 = createRenderElement(this.renderer, this._el_284, 'a', new InlineArray2(2, 'name', 'section11'), null);
        this._text_286 = this.renderer.createText(this._el_284, '11. Patents.', null);
        this._text_287 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_288 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_289 = this.renderer.createText(this._el_288, 'A "contributor" is a copyright holder who authorizes use under this\n        License of the Program or a work on which the Program is based.  The\n        work thus licensed is called the contributor\'s "contributor version".', null);
        this._text_290 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_291 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_292 = this.renderer.createText(this._el_291, 'A contributor\'s "essential patent claims" are all patent claims\n        owned or controlled by the contributor, whether already acquired or\n        hereafter acquired, that would be infringed by some manner, permitted\n        by this License, of making, using, or selling its contributor version,\n        but do not include claims that would be infringed only as a\n        consequence of further modification of the contributor version.  For\n        purposes of this definition, "control" includes the right to grant\n        patent sublicenses in a manner consistent with the requirements of\n        this License.', null);
        this._text_293 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_294 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_295 = this.renderer.createText(this._el_294, 'Each contributor grants you a non-exclusive, worldwide, royalty-free\n        patent license under the contributor\'s essential patent claims, to\n        make, use, sell, offer for sale, import and otherwise run, modify and\n        propagate the contents of its contributor version.', null);
        this._text_296 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_297 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_298 = this.renderer.createText(this._el_297, 'In the following three paragraphs, a "patent license" is any express\n        agreement or commitment, however denominated, not to enforce a patent\n        (such as an express permission to practice a patent or covenant not to\n        sue for patent infringement).  To "grant" such a patent license to a\n        party means to make such an agreement or commitment not to enforce a\n        patent against the party.', null);
        this._text_299 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_300 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_301 = this.renderer.createText(this._el_300, 'If you convey a covered work, knowingly relying on a patent license,\n        and the Corresponding Source of the work is not available for anyone\n        to copy, free of charge and under the terms of this License, through a\n        publicly available network server or other readily accessible means,\n        then you must either (1) cause the Corresponding Source to be so\n        available, or (2) arrange to deprive yourself of the benefit of the\n        patent license for this particular work, or (3) arrange, in a manner\n        consistent with the requirements of this License, to extend the patent\n        license to downstream recipients.  "Knowingly relying" means you have\n        actual knowledge that, but for the patent license, your conveying the\n        covered work in a country, or your recipient\'s use of the covered work\n        in a country, would infringe one or more identifiable patents in that\n        country that you have reason to believe are valid.', null);
        this._text_302 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_303 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_304 = this.renderer.createText(this._el_303, 'If, pursuant to or in connection with a single transaction or\n        arrangement, you convey, or propagate by procuring conveyance of, a\n        covered work, and grant a patent license to some of the parties\n        receiving the covered work authorizing them to use, propagate, modify\n        or convey a specific copy of the covered work, then the patent license\n        you grant is automatically extended to all recipients of the covered\n        work and works based on it.', null);
        this._text_305 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_306 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_307 = this.renderer.createText(this._el_306, 'A patent license is "discriminatory" if it does not include within\n        the scope of its coverage, prohibits the exercise of, or is\n        conditioned on the non-exercise of one or more of the rights that are\n        specifically granted under this License.  You may not convey a covered\n        work if you are a party to an arrangement with a third party that is\n        in the business of distributing software, under which you make payment\n        to the third party based on the extent of your activity of conveying\n        the work, and under which the third party grants, to any of the\n        parties who would receive the covered work from you, a discriminatory\n        patent license (a) in connection with copies of the covered work\n        conveyed by you (or copies made from those copies), or (b) primarily\n        for and in connection with specific products or compilations that\n        contain the covered work, unless you entered into that arrangement,\n        or that patent license was granted, prior to 28 March 2007.', null);
        this._text_308 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_309 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_310 = this.renderer.createText(this._el_309, 'Nothing in this License shall be construed as excluding or limiting\n        any implied license or other defenses to infringement that may\n        otherwise be available to you under applicable patent law.', null);
        this._text_311 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_312 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_313 = createRenderElement(this.renderer, this._el_312, 'a', new InlineArray2(2, 'name', 'section12'), null);
        this._text_314 = this.renderer.createText(this._el_312, '12. No Surrender of Others\' Freedom.', null);
        this._text_315 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_316 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_317 = this.renderer.createText(this._el_316, 'If conditions are imposed on you (whether by court order, agreement or\n        otherwise) that contradict the conditions of this License, they do not\n        excuse you from the conditions of this License.  If you cannot convey a\n        covered work so as to satisfy simultaneously your obligations under this\n        License and any other pertinent obligations, then as a consequence you may\n        not convey it at all.  For example, if you agree to terms that obligate you\n        to collect a royalty for further conveying from those to whom you convey\n        the Program, the only way you could satisfy both those terms and this\n        License would be to refrain entirely from conveying the Program.', null);
        this._text_318 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_319 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_320 = createRenderElement(this.renderer, this._el_319, 'a', new InlineArray2(2, 'name', 'section13'), null);
        this._text_321 = this.renderer.createText(this._el_319, '13. Remote Network Interaction; Use with the GNU General Public License.', null);
        this._text_322 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_323 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_324 = this.renderer.createText(this._el_323, 'Notwithstanding any other provision of this License, if you modify the\n        Program, your modified version must prominently offer all users\n        interacting with it remotely through a computer network (if your version\n        supports such interaction) an opportunity to receive the Corresponding\n        Source of your version by providing access to the Corresponding Source\n        from a network server at no charge, through some standard or customary\n        means of facilitating copying of software.  This Corresponding Source\n        shall include the Corresponding Source for any work covered by version 3\n        of the GNU General Public License that is incorporated pursuant to the\n        following paragraph.', null);
        this._text_325 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_326 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_327 = this.renderer.createText(this._el_326, 'Notwithstanding any other provision of this License, you have permission\n        to link or combine any covered work with a work licensed under version 3\n        of the GNU General Public License into a single combined work, and to\n        convey the resulting work.  The terms of this License will continue to\n        apply to the part which is the covered work, but the work with which it is\n        combined will remain governed by version 3 of the GNU General Public\n        License.', null);
        this._text_328 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_329 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_330 = createRenderElement(this.renderer, this._el_329, 'a', new InlineArray2(2, 'name', 'section14'), null);
        this._text_331 = this.renderer.createText(this._el_329, '14. Revised Versions of this License.', null);
        this._text_332 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_333 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_334 = this.renderer.createText(this._el_333, 'The Free Software Foundation may publish revised and/or new versions of\n        the GNU Affero General Public License from time to time.  Such new\n        versions will be similar in spirit to the present version, but may differ\n        in detail to address new problems or concerns.', null);
        this._text_335 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_336 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_337 = this.renderer.createText(this._el_336, 'Each version is given a distinguishing version number.  If the\n        Program specifies that a certain numbered version of the GNU Affero\n        General Public License "or any later version" applies to it, you have\n        the option of following the terms and conditions either of that\n        numbered version or of any later version published by the Free\n        Software Foundation.  If the Program does not specify a version number\n        of the GNU Affero General Public License, you may choose any version\n        ever published by the Free Software Foundation.', null);
        this._text_338 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_339 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_340 = this.renderer.createText(this._el_339, 'If the Program specifies that a proxy can decide which future\n        versions of the GNU Affero General Public License can be used, that\n        proxy\'s public statement of acceptance of a version permanently\n        authorizes you to choose that version for the Program.', null);
        this._text_341 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_342 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_343 = this.renderer.createText(this._el_342, 'Later license versions may give you additional or different\n        permissions.  However, no additional obligations are imposed on any\n        author or copyright holder as a result of your choosing to follow a\n        later version.', null);
        this._text_344 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_345 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_346 = createRenderElement(this.renderer, this._el_345, 'a', new InlineArray2(2, 'name', 'section15'), null);
        this._text_347 = this.renderer.createText(this._el_345, '15. Disclaimer of Warranty.', null);
        this._text_348 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_349 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_350 = this.renderer.createText(this._el_349, 'THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\n        APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\n        HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY\n        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\n        THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\n        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n        ALL NECESSARY SERVICING, REPAIR OR CORRECTION.', null);
        this._text_351 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_352 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_353 = createRenderElement(this.renderer, this._el_352, 'a', new InlineArray2(2, 'name', 'section16'), null);
        this._text_354 = this.renderer.createText(this._el_352, '16. Limitation of Liability.', null);
        this._text_355 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_356 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_357 = this.renderer.createText(this._el_356, 'IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n        WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\n        THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\n        GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\n        USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\n        DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\n        PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\n        EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\n        SUCH DAMAGES.', null);
        this._text_358 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_359 = createRenderElement(this.renderer, this._el_6, 'h3', EMPTY_INLINE_ARRAY, null);
        this._el_360 = createRenderElement(this.renderer, this._el_359, 'a', new InlineArray2(2, 'name', 'section17'), null);
        this._text_361 = this.renderer.createText(this._el_359, '17. Interpretation of Sections 15 and 16.', null);
        this._text_362 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_363 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_364 = this.renderer.createText(this._el_363, 'If the disclaimer of warranty and limitation of liability provided\n        above cannot be given local legal effect according to their terms,\n        reviewing courts shall apply local law that most closely approximates\n        an absolute waiver of all civil liability in connection with the\n        Program, unless a warranty or assumption of liability accompanies a\n        copy of the Program in return for a fee.', null);
        this._text_365 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_366 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_367 = this.renderer.createText(this._el_366, 'END OF TERMS AND CONDITIONS', null);
        this._text_368 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_369 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._el_370 = createRenderElement(this.renderer, this._el_369, 'a', new InlineArray2(2, 'name', 'howto'), null);
        this._text_371 = this.renderer.createText(this._el_369, 'How to Apply These Terms to Your New Programs', null);
        this._text_372 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_373 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_374 = this.renderer.createText(this._el_373, 'If you develop a new program, and you want it to be of the greatest\n        possible use to the public, the best way to achieve this is to make it\n        free software which everyone can redistribute and change under these terms.', null);
        this._text_375 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_376 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_377 = this.renderer.createText(this._el_376, 'To do so, attach the following notices to the program.  It is safest\n        to attach them to the start of each source file to most effectively\n        state the exclusion of warranty; and each file should have at least\n        the "copyright" line and a pointer to where the full notice is found.', null);
        this._text_378 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_379 = createRenderElement(this.renderer, this._el_6, 'pre', EMPTY_INLINE_ARRAY, null);
        this._text_380 = this.renderer.createText(this._el_379, '<one line to give the program\'s name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n        ', null);
        this._text_381 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_382 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_383 = this.renderer.createText(this._el_382, 'Also add information on how to contact you by electronic and paper mail.', null);
        this._text_384 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_385 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_386 = this.renderer.createText(this._el_385, 'If your software can interact with users remotely through a computer\n        network, you should also make sure that it provides a way for users to\n        get its source.  For example, if your program is a web application, its\n        interface could display a "Source" link that leads users to an archive\n        of the code.  There are many ways you could offer source, and different\n        solutions will be better for different programs; see section 13 for the\n        specific requirements.', null);
        this._text_387 = this.renderer.createText(this._el_6, '\n\n        ', null);
        this._el_388 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_389 = this.renderer.createText(this._el_388, 'You should also get your employer (if you work as a programmer) or school,\n        if any, to sign a "copyright disclaimer" for the program, if necessary.\n        For more information on this, and how to apply and follow the GNU AGPL, see\n        <', null);
        this._el_390 = createRenderElement(this.renderer, this._el_388, 'a', new InlineArray4(4, 'href', 'http://www.gnu.org/licenses/', 'target', '_blank'), null);
        this._text_391 = this.renderer.createText(this._el_390, 'http://www.gnu.org/licenses/', null);
        this._text_392 = this.renderer.createText(this._el_388, '>.', null);
        this._text_393 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_394 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._text_18,
            this._el_19,
            this._text_20,
            this._text_21,
            this._el_22,
            this._el_23,
            this._text_24,
            this._text_25,
            this._el_26,
            this._text_27,
            this._text_28,
            this._el_29,
            this._text_30,
            this._text_31,
            this._el_32,
            this._text_33,
            this._text_34,
            this._el_35,
            this._text_36,
            this._text_37,
            this._el_38,
            this._text_39,
            this._text_40,
            this._el_41,
            this._text_42,
            this._text_43,
            this._el_44,
            this._text_45,
            this._text_46,
            this._el_47,
            this._text_48,
            this._text_49,
            this._el_50,
            this._el_51,
            this._text_52,
            this._text_53,
            this._el_54,
            this._el_55,
            this._text_56,
            this._text_57,
            this._el_58,
            this._text_59,
            this._text_60,
            this._el_61,
            this._text_62,
            this._text_63,
            this._el_64,
            this._text_65,
            this._text_66,
            this._el_67,
            this._text_68,
            this._text_69,
            this._el_70,
            this._text_71,
            this._text_72,
            this._el_73,
            this._text_74,
            this._text_75,
            this._el_76,
            this._text_77,
            this._text_78,
            this._el_79,
            this._text_80,
            this._text_81,
            this._el_82,
            this._el_83,
            this._text_84,
            this._text_85,
            this._el_86,
            this._text_87,
            this._text_88,
            this._el_89,
            this._text_90,
            this._text_91,
            this._el_92,
            this._text_93,
            this._text_94,
            this._el_95,
            this._text_96,
            this._text_97,
            this._el_98,
            this._text_99,
            this._text_100,
            this._el_101,
            this._text_102,
            this._text_103,
            this._el_104,
            this._el_105,
            this._text_106,
            this._text_107,
            this._el_108,
            this._text_109,
            this._text_110,
            this._el_111,
            this._text_112,
            this._text_113,
            this._el_114,
            this._text_115,
            this._text_116,
            this._el_117,
            this._el_118,
            this._text_119,
            this._text_120,
            this._el_121,
            this._text_122,
            this._text_123,
            this._el_124,
            this._text_125,
            this._text_126,
            this._el_127,
            this._el_128,
            this._text_129,
            this._text_130,
            this._el_131,
            this._text_132,
            this._text_133,
            this._el_134,
            this._text_135,
            this._text_136,
            this._el_137,
            this._el_138,
            this._text_139,
            this._text_140,
            this._el_141,
            this._text_142,
            this._text_143,
            this._el_144,
            this._text_145,
            this._el_146,
            this._text_147,
            this._text_148,
            this._el_149,
            this._text_150,
            this._text_151,
            this._el_152,
            this._text_153,
            this._text_154,
            this._el_155,
            this._text_156,
            this._text_157,
            this._text_158,
            this._el_159,
            this._text_160,
            this._text_161,
            this._el_162,
            this._el_163,
            this._text_164,
            this._text_165,
            this._el_166,
            this._text_167,
            this._text_168,
            this._el_169,
            this._text_170,
            this._el_171,
            this._text_172,
            this._text_173,
            this._el_174,
            this._text_175,
            this._text_176,
            this._el_177,
            this._text_178,
            this._text_179,
            this._el_180,
            this._text_181,
            this._text_182,
            this._el_183,
            this._text_184,
            this._text_185,
            this._text_186,
            this._el_187,
            this._text_188,
            this._text_189,
            this._el_190,
            this._text_191,
            this._text_192,
            this._el_193,
            this._text_194,
            this._text_195,
            this._el_196,
            this._text_197,
            this._text_198,
            this._el_199,
            this._text_200,
            this._text_201,
            this._el_202,
            this._text_203,
            this._text_204,
            this._el_205,
            this._el_206,
            this._text_207,
            this._text_208,
            this._el_209,
            this._text_210,
            this._text_211,
            this._el_212,
            this._text_213,
            this._text_214,
            this._el_215,
            this._text_216,
            this._text_217,
            this._el_218,
            this._text_219,
            this._el_220,
            this._text_221,
            this._text_222,
            this._el_223,
            this._text_224,
            this._text_225,
            this._el_226,
            this._text_227,
            this._text_228,
            this._el_229,
            this._text_230,
            this._text_231,
            this._el_232,
            this._text_233,
            this._text_234,
            this._el_235,
            this._text_236,
            this._text_237,
            this._text_238,
            this._el_239,
            this._text_240,
            this._text_241,
            this._el_242,
            this._text_243,
            this._text_244,
            this._el_245,
            this._text_246,
            this._text_247,
            this._el_248,
            this._el_249,
            this._text_250,
            this._text_251,
            this._el_252,
            this._text_253,
            this._text_254,
            this._el_255,
            this._text_256,
            this._text_257,
            this._el_258,
            this._text_259,
            this._text_260,
            this._el_261,
            this._text_262,
            this._text_263,
            this._el_264,
            this._el_265,
            this._text_266,
            this._text_267,
            this._el_268,
            this._text_269,
            this._text_270,
            this._el_271,
            this._el_272,
            this._text_273,
            this._text_274,
            this._el_275,
            this._text_276,
            this._text_277,
            this._el_278,
            this._text_279,
            this._text_280,
            this._el_281,
            this._text_282,
            this._text_283,
            this._el_284,
            this._el_285,
            this._text_286,
            this._text_287,
            this._el_288,
            this._text_289,
            this._text_290,
            this._el_291,
            this._text_292,
            this._text_293,
            this._el_294,
            this._text_295,
            this._text_296,
            this._el_297,
            this._text_298,
            this._text_299,
            this._el_300,
            this._text_301,
            this._text_302,
            this._el_303,
            this._text_304,
            this._text_305,
            this._el_306,
            this._text_307,
            this._text_308,
            this._el_309,
            this._text_310,
            this._text_311,
            this._el_312,
            this._el_313,
            this._text_314,
            this._text_315,
            this._el_316,
            this._text_317,
            this._text_318,
            this._el_319,
            this._el_320,
            this._text_321,
            this._text_322,
            this._el_323,
            this._text_324,
            this._text_325,
            this._el_326,
            this._text_327,
            this._text_328,
            this._el_329,
            this._el_330,
            this._text_331,
            this._text_332,
            this._el_333,
            this._text_334,
            this._text_335,
            this._el_336,
            this._text_337,
            this._text_338,
            this._el_339,
            this._text_340,
            this._text_341,
            this._el_342,
            this._text_343,
            this._text_344,
            this._el_345,
            this._el_346,
            this._text_347,
            this._text_348,
            this._el_349,
            this._text_350,
            this._text_351,
            this._el_352,
            this._el_353,
            this._text_354,
            this._text_355,
            this._el_356,
            this._text_357,
            this._text_358,
            this._el_359,
            this._el_360,
            this._text_361,
            this._text_362,
            this._el_363,
            this._text_364,
            this._text_365,
            this._el_366,
            this._text_367,
            this._text_368,
            this._el_369,
            this._el_370,
            this._text_371,
            this._text_372,
            this._el_373,
            this._text_374,
            this._text_375,
            this._el_376,
            this._text_377,
            this._text_378,
            this._el_379,
            this._text_380,
            this._text_381,
            this._el_382,
            this._text_383,
            this._text_384,
            this._el_385,
            this._text_386,
            this._text_387,
            this._el_388,
            this._text_389,
            this._el_390,
            this._text_391,
            this._text_392,
            this._text_393,
            this._text_394
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

class Wrapper_OpenSourceLicenseComponent {
    constructor() {
        this._changed = false;
        this.context = new OpenSourceLicenseComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_OpenSourceLicenseComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_OpenSourceLicenseComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_OpenSourceLicenseComponent_Host0, renderType_OpenSourceLicenseComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_OpenSourceLicenseComponent0(this.viewUtils, this, 0, this._el_0);
        this._OpenSourceLicenseComponent_0_3 = new Wrapper_OpenSourceLicenseComponent();
        this.compView_0.create(this._OpenSourceLicenseComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._OpenSourceLicenseComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === OpenSourceLicenseComponent) && (0 === requestNodeIndex))) {
            return this._OpenSourceLicenseComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._OpenSourceLicenseComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const OpenSourceLicenseComponentNgFactory = new ComponentFactory('ng-component', View_OpenSourceLicenseComponent_Host0, OpenSourceLicenseComponent);
const styles_OpenSourceLicenseComponent = [styles$9];
var renderType_OpenSourceLicenseComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_OpenSourceLicenseComponent, {});
class View_OpenSourceLicenseComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_OpenSourceLicenseComponent0, renderType_OpenSourceLicenseComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n\n', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'legalMenu', EMPTY_INLINE_ARRAY, null);
        this.compView_4 = new View_LegalMenuComponent0(this.viewUtils, this, 4, this._el_4);
        this._LegalMenuComponent_4_3 = new Wrapper_LegalMenuComponent();
        this.compView_4.create(this._LegalMenuComponent_4_3.context);
        this._text_5 = this.renderer.createText(this._el_2, '\n    ', null);
        this._el_6 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'body'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_8 = createRenderElement(this.renderer, this._el_6, 'h1', EMPTY_INLINE_ARRAY, null);
        this._text_9 = this.renderer.createText(this._el_8, 'Slamby API open-source software license', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_11 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_12 = this.renderer.createText(this._el_11, 'Slamby API is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License.', null);
        this._text_13 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_15 = this.renderer.createText(this._el_14, 'This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.', null);
        this._text_16 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_17 = createRenderElement(this.renderer, this._el_6, 'p', EMPTY_INLINE_ARRAY, null);
        this._text_18 = this.renderer.createText(this._el_17, 'You should have received a copy of the GNU Affero General Public License along with this program. If not, see http://www.gnu.org/licenses/agpl-3.0.html.', null);
        this._text_19 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_20 = createRenderElement(this.renderer, this._el_6, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_21 = this.renderer.createText(this._el_20, 'Commercial license', null);
        this._text_22 = this.renderer.createText(this._el_6, '\n        ', null);
        this._el_23 = createRenderElement(this.renderer, this._el_6, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_24 = this.renderer.createText(this._el_23, 'In addition to this license, Slamby API is offered under a commercial license. You can learn more about this option by contacting us at sales@slamby.com.', null);
        this._text_25 = this.renderer.createText(this._el_6, '\n    ', null);
        this._text_26 = this.renderer.createText(this._el_2, '\n', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._el_11,
            this._text_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._text_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._el_23,
            this._text_24,
            this._text_25,
            this._text_26
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === LegalMenuComponent) && (4 === requestNodeIndex))) {
            return this._LegalMenuComponent_4_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._LegalMenuComponent_4_3.ngDoCheck(this, this._el_4, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
        this.compView_4.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this.compView_4.destroy();
    }
}

const styles$10 = ['section.qa[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px}@media (min-width: 992px){section.qa[_ngcontent-%COMP%]   .item[_ngcontent-%COMP%]{float:left;width:50%}}'];

class Wrapper_SupportComponent {
    constructor() {
        this._changed = false;
        this.context = new SupportComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_SupportComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_SupportComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_SupportComponent_Host0, renderType_SupportComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'ng-component', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_SupportComponent0(this.viewUtils, this, 0, this._el_0);
        this._SupportComponent_0_3 = new Wrapper_SupportComponent();
        this.compView_0.create(this._SupportComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._SupportComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === SupportComponent) && (0 === requestNodeIndex))) {
            return this._SupportComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._SupportComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const SupportComponentNgFactory = new ComponentFactory('ng-component', View_SupportComponent_Host0, SupportComponent);
const styles_SupportComponent = [styles$10];
class View_SupportComponent1 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_SupportComponent1, renderType_SupportComponent, ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_5 = UNINITIALIZED;
        this._expr_6 = UNINITIALIZED;
    }
    createInternal(rootSelector) {
        this._el_0 = createRenderElement(this.renderer, null, 'div', new InlineArray2(2, 'class', 'item'), null);
        this._el_1 = createRenderElement(this.renderer, this._el_0, 'h2', EMPTY_INLINE_ARRAY, null);
        this._text_2 = this.renderer.createText(this._el_1, '', null);
        this._el_3 = createRenderElement(this.renderer, this._el_0, 'p', new InlineArray2(2, 'class', 'lead'), null);
        this._text_4 = this.renderer.createText(this._el_3, '', null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4
        ]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_5 = inlineInterpolate(1, '', this.context.$implicit.question, '');
        if (checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            this.renderer.setText(this._text_2, currVal_5);
            this._expr_5 = currVal_5;
        }
        const currVal_6 = inlineInterpolate(1, '', this.context.$implicit.answer, '');
        if (checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setText(this._text_4, currVal_6);
            this._expr_6 = currVal_6;
        }
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
var renderType_SupportComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_SupportComponent, {});
class View_SupportComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_SupportComponent0, renderType_SupportComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'pm-header', EMPTY_INLINE_ARRAY, null);
        this.compView_0 = new View_HeaderComponent0(this.viewUtils, this, 0, this._el_0);
        this._HeaderComponent_0_3 = new Wrapper_HeaderComponent();
        this.compView_0.create(this._HeaderComponent_0_3.context);
        this._el_1 = createRenderElement(this.renderer, parentRenderNode, 'section', new InlineArray2(2, 'class', 'qa'), null);
        this._el_2 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_3 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._el_4 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'col-md-12'), null);
        this._el_5 = createRenderElement(this.renderer, this._el_4, 'h2', new InlineArray2(2, 'class', 'page-header'), null);
        this._text_6 = this.renderer.createText(this._el_5, 'Frequently asked questions', null);
        this._el_7 = createRenderElement(this.renderer, this._el_3, 'div', new InlineArray2(2, 'class', 'col-md-6'), null);
        this._el_8 = createRenderElement(this.renderer, this._el_7, 'input', new InlineArray8(6, 'class', 'form-control', 'placeholder', 'Search for faq', 'type', 'search'), null);
        this._el_9 = createRenderElement(this.renderer, this._el_1, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._el_10 = createRenderElement(this.renderer, this._el_9, 'div', new InlineArray2(2, 'class', 'row'), null);
        this._anchor_11 = this.renderer.createTemplateAnchor(this._el_10, null);
        this._vc_11 = new ViewContainer(11, 10, this, this._anchor_11);
        this._TemplateRef_11_5 = new TemplateRef_(this, 11, this._anchor_11);
        this._NgFor_11_6 = new Wrapper_NgFor(this._vc_11.vcRef, this._TemplateRef_11_5, this.parentView.injectorGet(IterableDiffers, this.parentIndex), this.ref);
        var disposable_0 = subscribeToRenderElement(this, this._el_8, new InlineArray2(2, 'keyup', null), this.eventHandler(this.handleEvent_8));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._el_1,
            this._el_2,
            this._el_3,
            this._el_4,
            this._el_5,
            this._text_6,
            this._el_7,
            this._el_8,
            this._el_9,
            this._el_10,
            this._anchor_11
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === HeaderComponent) && (0 === requestNodeIndex))) {
            return this._HeaderComponent_0_3.context;
        }
        if (((token === TemplateRef) && (11 === requestNodeIndex))) {
            return this._TemplateRef_11_5;
        }
        if (((token === NgFor) && (11 === requestNodeIndex))) {
            return this._NgFor_11_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._HeaderComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        const currVal_11_0_0 = this.context.faqResult;
        this._NgFor_11_6.check_ngForOf(currVal_11_0_0, throwOnChange, false);
        this._NgFor_11_6.ngDoCheck(this, this._anchor_11, throwOnChange);
        this._vc_11.detectChangesInNestedViews(throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this._vc_11.destroyNestedViews();
        this.compView_0.destroy();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 11)) {
            return new View_SupportComponent1(this.viewUtils, this, 11, this._anchor_11, this._vc_11);
        }
        return null;
    }
    handleEvent_8(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'keyup')) {
            const pd_sub_0 = (this.context.search(this._el_8.value) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}

class Wrapper_RouterOutlet {
    constructor(p0, p1, p2, p3) {
        this._changed = false;
        this.context = new RouterOutlet(p0, p1, p2, p3);
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.activateEvents.subscribe(_eventHandler.bind(view, 'activate')));
        }
        if (emit1) {
            (this.subscription1 = this.context.deactivateEvents.subscribe(_eventHandler.bind(view, 'deactivate')));
        }
    }
}

const styles$11 = ['.footer[_ngcontent-%COMP%]{margin-left:-15px;margin-right:-15px}.footer[_ngcontent-%COMP%]:before, .footer[_ngcontent-%COMP%]:after{content:" ";display:table}.footer[_ngcontent-%COMP%]:after{clear:both}.footer[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;padding-top:15px;margin-top:30px;color:grey;font-weight:100}@media (min-width: 768px){.footer[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{float:left;width:100%}}.footer[_ngcontent-%COMP%]   .links[_ngcontent-%COMP%]{position:relative;min-height:1px;padding-left:15px;padding-right:15px;margin-top:5px}@media (min-width: 768px){.footer[_ngcontent-%COMP%]   .links[_ngcontent-%COMP%]{float:left;width:100%}}.footer[_ngcontent-%COMP%]   .links[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{display:inline-block;text-decoration:none;margin:0px 15px 0px 0px;font-weight:100}.footer[_ngcontent-%COMP%]   .sla-external-link[_ngcontent-%COMP%]{padding-left:3px;font-size:10px}'];

class Wrapper_FooterComponent {
    constructor() {
        this._changed = false;
        this.context = new FooterComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_FooterComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_FooterComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_FooterComponent_Host0, renderType_FooterComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'pm-footer', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_FooterComponent0(this.viewUtils, this, 0, this._el_0);
        this._FooterComponent_0_3 = new Wrapper_FooterComponent();
        this.compView_0.create(this._FooterComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._FooterComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === FooterComponent) && (0 === requestNodeIndex))) {
            return this._FooterComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._FooterComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const FooterComponentNgFactory = new ComponentFactory('pm-footer', View_FooterComponent_Host0, FooterComponent);
const styles_FooterComponent = [styles$11];
var renderType_FooterComponent = createRenderComponentType('', 0, ViewEncapsulation.Emulated, styles_FooterComponent, {});
class View_FooterComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_FooterComponent0, renderType_FooterComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
        this._arr_36 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_37 = pureProxy1((p0) => {
            return [p0];
        });
        this._arr_38 = pureProxy1((p0) => {
            return [p0];
        });
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'div', new InlineArray2(2, 'class', 'container'), null);
        this._text_1 = this.renderer.createText(this._el_0, '\n    ', null);
        this._el_2 = createRenderElement(this.renderer, this._el_0, 'div', new InlineArray2(2, 'class', 'footer'), null);
        this._text_3 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_4 = createRenderElement(this.renderer, this._el_2, 'div', new InlineArray2(2, 'class', 'message'), null);
        this._text_5 = this.renderer.createText(this._el_4, 'Slamby 2016', null);
        this._text_6 = this.renderer.createText(this._el_2, '\n        ', null);
        this._el_7 = createRenderElement(this.renderer, this._el_2, 'ul', new InlineArray2(2, 'class', 'links'), null);
        this._text_8 = this.renderer.createText(this._el_7, '\n            ', null);
        this._el_9 = createRenderElement(this.renderer, this._el_7, 'li', EMPTY_INLINE_ARRAY, null);
        this._el_10 = createRenderElement(this.renderer, this._el_9, 'a', new InlineArray4(4, 'href', 'https://github.com/slamby', 'target', '_blank'), null);
        this._text_11 = this.renderer.createText(this._el_10, 'Github ', null);
        this._el_12 = createRenderElement(this.renderer, this._el_10, 'i', new InlineArray4(4, 'aria-hidden', 'true', 'class', 'fa fa-external-link sla-external-link'), null);
        this._text_13 = this.renderer.createText(this._el_7, '\n            ', null);
        this._el_14 = createRenderElement(this.renderer, this._el_7, 'li', EMPTY_INLINE_ARRAY, null);
        this._el_15 = createRenderElement(this.renderer, this._el_14, 'a', new InlineArray4(4, 'href', 'https://developers.slamby.com', 'target', '_blank'), null);
        this._text_16 = this.renderer.createText(this._el_15, 'Slamby Developers ', null);
        this._el_17 = createRenderElement(this.renderer, this._el_15, 'i', new InlineArray4(4, 'aria-hidden', 'true', 'class', 'fa fa-external-link sla-external-link'), null);
        this._text_18 = this.renderer.createText(this._el_7, '\n            ', null);
        this._el_19 = createRenderElement(this.renderer, this._el_7, 'li', EMPTY_INLINE_ARRAY, null);
        this._el_20 = createRenderElement(this.renderer, this._el_19, 'a', EMPTY_INLINE_ARRAY, null);
        this._RouterLinkWithHref_20_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_21 = this.renderer.createText(this._el_20, 'Partners', null);
        this._text_22 = this.renderer.createText(this._el_7, '\n            ', null);
        this._el_23 = createRenderElement(this.renderer, this._el_7, 'li', EMPTY_INLINE_ARRAY, null);
        this._el_24 = createRenderElement(this.renderer, this._el_23, 'a', EMPTY_INLINE_ARRAY, null);
        this._RouterLinkWithHref_24_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_25 = this.renderer.createText(this._el_24, 'Company', null);
        this._text_26 = this.renderer.createText(this._el_7, '\n            ', null);
        this._el_27 = createRenderElement(this.renderer, this._el_7, 'li', EMPTY_INLINE_ARRAY, null);
        this._el_28 = createRenderElement(this.renderer, this._el_27, 'a', EMPTY_INLINE_ARRAY, null);
        this._RouterLinkWithHref_28_3 = new Wrapper_RouterLinkWithHref(this.parentView.injectorGet(Router, this.parentIndex), this.parentView.injectorGet(ActivatedRoute, this.parentIndex), this.parentView.injectorGet(LocationStrategy, this.parentIndex));
        this._text_29 = this.renderer.createText(this._el_28, 'Legal', null);
        this._text_30 = this.renderer.createText(this._el_7, '\n        ', null);
        this._text_31 = this.renderer.createText(this._el_2, '\n    ', null);
        this._text_32 = this.renderer.createText(this._el_0, '\n', null);
        var disposable_0 = subscribeToRenderElement(this, this._el_20, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_20));
        var disposable_1 = subscribeToRenderElement(this, this._el_24, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_24));
        var disposable_2 = subscribeToRenderElement(this, this._el_28, new InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_28));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._el_4,
            this._text_5,
            this._text_6,
            this._el_7,
            this._text_8,
            this._el_9,
            this._el_10,
            this._text_11,
            this._el_12,
            this._text_13,
            this._el_14,
            this._el_15,
            this._text_16,
            this._el_17,
            this._text_18,
            this._el_19,
            this._el_20,
            this._text_21,
            this._text_22,
            this._el_23,
            this._el_24,
            this._text_25,
            this._text_26,
            this._el_27,
            this._el_28,
            this._text_29,
            this._text_30,
            this._text_31,
            this._text_32
        ]), [
            disposable_0,
            disposable_1,
            disposable_2
        ]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === RouterLinkWithHref) && ((20 <= requestNodeIndex) && (requestNodeIndex <= 21)))) {
            return this._RouterLinkWithHref_20_3.context;
        }
        if (((token === RouterLinkWithHref) && ((24 <= requestNodeIndex) && (requestNodeIndex <= 25)))) {
            return this._RouterLinkWithHref_24_3.context;
        }
        if (((token === RouterLinkWithHref) && ((28 <= requestNodeIndex) && (requestNodeIndex <= 29)))) {
            return this._RouterLinkWithHref_28_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_20_0_0 = this._arr_36('/partners');
        this._RouterLinkWithHref_20_3.check_routerLink(currVal_20_0_0, throwOnChange, false);
        this._RouterLinkWithHref_20_3.ngDoCheck(this, this._el_20, throwOnChange);
        const currVal_24_0_0 = this._arr_37('/company');
        this._RouterLinkWithHref_24_3.check_routerLink(currVal_24_0_0, throwOnChange, false);
        this._RouterLinkWithHref_24_3.ngDoCheck(this, this._el_24, throwOnChange);
        const currVal_28_0_0 = this._arr_38('/legal');
        this._RouterLinkWithHref_28_3.check_routerLink(currVal_28_0_0, throwOnChange, false);
        this._RouterLinkWithHref_28_3.ngDoCheck(this, this._el_28, throwOnChange);
        this._RouterLinkWithHref_20_3.checkHost(this, this, this._el_20, throwOnChange);
        this._RouterLinkWithHref_24_3.checkHost(this, this, this._el_24, throwOnChange);
        this._RouterLinkWithHref_28_3.checkHost(this, this, this._el_28, throwOnChange);
    }
    destroyInternal() {
        this._RouterLinkWithHref_20_3.ngOnDestroy();
        this._RouterLinkWithHref_24_3.ngOnDestroy();
        this._RouterLinkWithHref_28_3.ngOnDestroy();
    }
    handleEvent_20(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_20_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_24(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_24_3.handleEvent(eventName, $event) && result);
        return result;
    }
    handleEvent_28(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._RouterLinkWithHref_28_3.handleEvent(eventName, $event) && result);
        return result;
    }
}

class Wrapper_AppComponent {
    constructor() {
        this._changed = false;
        this.context = new AppComponent();
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_AppComponent_Host = createRenderComponentType('', 0, ViewEncapsulation.None, [], {});
class View_AppComponent_Host0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_AppComponent_Host0, renderType_AppComponent_Host, ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = selectOrCreateRenderHostElement(this.renderer, 'pm-app', EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_AppComponent0(this.viewUtils, this, 0, this._el_0);
        this._AppComponent_0_3 = new Wrapper_AppComponent();
        this.compView_0.create(this._AppComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new ComponentRef_(0, this, this._el_0, this._AppComponent_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === AppComponent) && (0 === requestNodeIndex))) {
            return this._AppComponent_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._AppComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
const AppComponentNgFactory = new ComponentFactory('pm-app', View_AppComponent_Host0, AppComponent);
const styles_AppComponent = [];
var renderType_AppComponent = createRenderComponentType('', 0, ViewEncapsulation.None, styles_AppComponent, {});
class View_AppComponent0 extends AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_AppComponent0, renderType_AppComponent, ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._el_0 = createRenderElement(this.renderer, parentRenderNode, 'router-outlet', EMPTY_INLINE_ARRAY, null);
        this._vc_0 = new ViewContainer(0, null, this, this._el_0);
        this._RouterOutlet_0_5 = new Wrapper_RouterOutlet(this.parentView.injectorGet(RouterOutletMap, this.parentIndex), this._vc_0.vcRef, this.parentView.injectorGet(ComponentFactoryResolver, this.parentIndex), null);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_2 = createRenderElement(this.renderer, parentRenderNode, 'pm-footer', EMPTY_INLINE_ARRAY, null);
        this.compView_2 = new View_FooterComponent0(this.viewUtils, this, 2, this._el_2);
        this._FooterComponent_2_3 = new Wrapper_FooterComponent();
        this.compView_2.create(this._FooterComponent_2_3.context);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === RouterOutlet) && (0 === requestNodeIndex))) {
            return this._RouterOutlet_0_5.context;
        }
        if (((token === FooterComponent) && (2 === requestNodeIndex))) {
            return this._FooterComponent_2_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._RouterOutlet_0_5.ngDoCheck(this, this._el_0, throwOnChange);
        this._FooterComponent_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        this._vc_0.detectChangesInNestedViews(throwOnChange);
        this.compView_2.internalDetectChanges(throwOnChange);
    }
    destroyInternal() {
        this._vc_0.destroyNestedViews();
        this.compView_2.destroy();
        this._RouterOutlet_0_5.ngOnDestroy();
    }
}

class AppModuleInjector extends NgModuleInjector {
    constructor(parent) {
        super(parent, [
            HomeComponentNgFactory,
            InsightComponentNgFactory,
            PricingComponentNgFactory,
            NotFoundPageComponentNgFactory,
            ThankYouComponentNgFactory,
            GettingStartedComponentNgFactory,
            PartnersComponentNgFactory,
            CompanyComponentNgFactory,
            LegalComponentNgFactory,
            PrivacyPolicyComponentNgFactory,
            CommercialLicenseComponentNgFactory,
            CommercialLicenseOemComponentNgFactory,
            GnuAgplLicenseComponentNgFactory,
            OpenSourceLicenseComponentNgFactory,
            SupportComponentNgFactory,
            AppComponentNgFactory
        ], [AppComponentNgFactory]);
    }
    get _LOCALE_ID_6() {
        if ((this.__LOCALE_ID_6 == null)) {
            (this.__LOCALE_ID_6 = _localeFactory(this.parent.get(LOCALE_ID, null)));
        }
        return this.__LOCALE_ID_6;
    }
    get _NgLocalization_7() {
        if ((this.__NgLocalization_7 == null)) {
            (this.__NgLocalization_7 = new NgLocaleLocalization(this._LOCALE_ID_6));
        }
        return this.__NgLocalization_7;
    }
    get _ApplicationRef_12() {
        if ((this.__ApplicationRef_12 == null)) {
            (this.__ApplicationRef_12 = this._ApplicationRef__11);
        }
        return this.__ApplicationRef_12;
    }
    get _Compiler_13() {
        if ((this.__Compiler_13 == null)) {
            (this.__Compiler_13 = new Compiler());
        }
        return this.__Compiler_13;
    }
    get _APP_ID_14() {
        if ((this.__APP_ID_14 == null)) {
            (this.__APP_ID_14 = _appIdRandomProviderFactory());
        }
        return this.__APP_ID_14;
    }
    get _DOCUMENT_15() {
        if ((this.__DOCUMENT_15 == null)) {
            (this.__DOCUMENT_15 = _document());
        }
        return this.__DOCUMENT_15;
    }
    get _HAMMER_GESTURE_CONFIG_16() {
        if ((this.__HAMMER_GESTURE_CONFIG_16 == null)) {
            (this.__HAMMER_GESTURE_CONFIG_16 = new HammerGestureConfig());
        }
        return this.__HAMMER_GESTURE_CONFIG_16;
    }
    get _EVENT_MANAGER_PLUGINS_17() {
        if ((this.__EVENT_MANAGER_PLUGINS_17 == null)) {
            (this.__EVENT_MANAGER_PLUGINS_17 = [
                new DomEventsPlugin(),
                new KeyEventsPlugin(),
                new HammerGesturesPlugin(this._HAMMER_GESTURE_CONFIG_16)
            ]);
        }
        return this.__EVENT_MANAGER_PLUGINS_17;
    }
    get _EventManager_18() {
        if ((this.__EventManager_18 == null)) {
            (this.__EventManager_18 = new EventManager(this._EVENT_MANAGER_PLUGINS_17, this.parent.get(NgZone)));
        }
        return this.__EventManager_18;
    }
    get _DomSharedStylesHost_19() {
        if ((this.__DomSharedStylesHost_19 == null)) {
            (this.__DomSharedStylesHost_19 = new DomSharedStylesHost(this._DOCUMENT_15));
        }
        return this.__DomSharedStylesHost_19;
    }
    get _AnimationDriver_20() {
        if ((this.__AnimationDriver_20 == null)) {
            (this.__AnimationDriver_20 = _resolveDefaultAnimationDriver());
        }
        return this.__AnimationDriver_20;
    }
    get _DomRootRenderer_21() {
        if ((this.__DomRootRenderer_21 == null)) {
            (this.__DomRootRenderer_21 = new DomRootRenderer_(this._DOCUMENT_15, this._EventManager_18, this._DomSharedStylesHost_19, this._AnimationDriver_20, this._APP_ID_14));
        }
        return this.__DomRootRenderer_21;
    }
    get _NgProbeToken_22() {
        if ((this.__NgProbeToken_22 == null)) {
            (this.__NgProbeToken_22 = [routerNgProbeToken()]);
        }
        return this.__NgProbeToken_22;
    }
    get _RootRenderer_23() {
        if ((this.__RootRenderer_23 == null)) {
            (this.__RootRenderer_23 = _createConditionalRootRenderer(this._DomRootRenderer_21, this.parent.get(NgProbeToken$1, null), this._NgProbeToken_22));
        }
        return this.__RootRenderer_23;
    }
    get _DomSanitizer_24() {
        if ((this.__DomSanitizer_24 == null)) {
            (this.__DomSanitizer_24 = new DomSanitizerImpl());
        }
        return this.__DomSanitizer_24;
    }
    get _Sanitizer_25() {
        if ((this.__Sanitizer_25 == null)) {
            (this.__Sanitizer_25 = this._DomSanitizer_24);
        }
        return this.__Sanitizer_25;
    }
    get _AnimationQueue_26() {
        if ((this.__AnimationQueue_26 == null)) {
            (this.__AnimationQueue_26 = new AnimationQueue(this.parent.get(NgZone)));
        }
        return this.__AnimationQueue_26;
    }
    get _ViewUtils_27() {
        if ((this.__ViewUtils_27 == null)) {
            (this.__ViewUtils_27 = new ViewUtils(this._RootRenderer_23, this._Sanitizer_25, this._AnimationQueue_26));
        }
        return this.__ViewUtils_27;
    }
    get _IterableDiffers_28() {
        if ((this.__IterableDiffers_28 == null)) {
            (this.__IterableDiffers_28 = _iterableDiffersFactory());
        }
        return this.__IterableDiffers_28;
    }
    get _KeyValueDiffers_29() {
        if ((this.__KeyValueDiffers_29 == null)) {
            (this.__KeyValueDiffers_29 = _keyValueDiffersFactory());
        }
        return this.__KeyValueDiffers_29;
    }
    get _SharedStylesHost_30() {
        if ((this.__SharedStylesHost_30 == null)) {
            (this.__SharedStylesHost_30 = this._DomSharedStylesHost_19);
        }
        return this.__SharedStylesHost_30;
    }
    get _Title_31() {
        if ((this.__Title_31 == null)) {
            (this.__Title_31 = new Title());
        }
        return this.__Title_31;
    }
    get _ROUTER_CONFIGURATION_32() {
        if ((this.__ROUTER_CONFIGURATION_32 == null)) {
            (this.__ROUTER_CONFIGURATION_32 = {});
        }
        return this.__ROUTER_CONFIGURATION_32;
    }
    get _LocationStrategy_33() {
        if ((this.__LocationStrategy_33 == null)) {
            (this.__LocationStrategy_33 = provideLocationStrategy(this.parent.get(PlatformLocation), this.parent.get(APP_BASE_HREF, null), this._ROUTER_CONFIGURATION_32));
        }
        return this.__LocationStrategy_33;
    }
    get _Location_34() {
        if ((this.__Location_34 == null)) {
            (this.__Location_34 = new Location(this._LocationStrategy_33));
        }
        return this.__Location_34;
    }
    get _UrlSerializer_35() {
        if ((this.__UrlSerializer_35 == null)) {
            (this.__UrlSerializer_35 = new DefaultUrlSerializer());
        }
        return this.__UrlSerializer_35;
    }
    get _RouterOutletMap_36() {
        if ((this.__RouterOutletMap_36 == null)) {
            (this.__RouterOutletMap_36 = new RouterOutletMap());
        }
        return this.__RouterOutletMap_36;
    }
    get _NgModuleFactoryLoader_37() {
        if ((this.__NgModuleFactoryLoader_37 == null)) {
            (this.__NgModuleFactoryLoader_37 = new SystemJsNgModuleLoader(this._Compiler_13, this.parent.get(SystemJsNgModuleLoaderConfig, null)));
        }
        return this.__NgModuleFactoryLoader_37;
    }
    get _ROUTES_38() {
        if ((this.__ROUTES_38 == null)) {
            (this.__ROUTES_38 = [[
                    {
                        path: '',
                        component: HomeComponent,
                        pathMatch: 'full'
                    },
                    {
                        path: 'home',
                        component: HomeComponent,
                        pathMatch: 'full'
                    },
                    {
                        path: 'insight',
                        component: InsightComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Insight' } }
                    },
                    {
                        path: 'pricing',
                        component: PricingComponent,
                        pathMatch: 'full',
                        data: { meta: {
                                title: 'Pricing',
                                description: 'Slamby pricing, on-premise, SaaS, core-based, open-source.'
                            }
                        }
                    },
                    {
                        path: '404',
                        component: NotFoundPageComponent,
                        pathMatch: 'full',
                        data: { meta: {
                                title: 'Page not found',
                                description: 'The requested page is not found.'
                            }
                        }
                    },
                    {
                        path: 'thank-you',
                        component: ThankYouComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Thank You' } }
                    },
                    {
                        path: 'getting-started',
                        component: GettingStartedComponent,
                        pathMatch: 'full',
                        data: { meta: {
                                title: 'Getting started',
                                description: 'Quick tutorial about Slamby install steps, pricing, licenses, support, SDKs, related softwares and Slamby Insight.'
                            }
                        }
                    },
                    {
                        path: 'partners',
                        component: PartnersComponent,
                        pathMatch: 'full',
                        data: { meta: {
                                title: 'Partners',
                                description: 'Slamby partners who helped a lot to us.'
                            }
                        }
                    },
                    {
                        path: 'company',
                        component: CompanyComponent,
                        pathMatch: 'full',
                        data: { meta: {
                                title: 'Company',
                                description: 'We love what we do, if you need more information about Slamby, just contact us anytime at hello@slamby.com'
                            }
                        }
                    },
                    {
                        path: 'legal',
                        component: LegalComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Legal' } }
                    },
                    {
                        path: 'legal/privacy-policy',
                        component: PrivacyPolicyComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Privacy policy' } }
                    },
                    {
                        path: 'legal/commercial-license',
                        component: CommercialLicenseComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Commercial license' } }
                    },
                    {
                        path: 'legal/commercial-license-oem',
                        component: CommercialLicenseOemComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Commercial license for OEMs' } }
                    },
                    {
                        path: 'legal/gnu-agpl-license',
                        component: GnuAgplLicenseComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'GNU AGPL V3 license' } }
                    },
                    {
                        path: 'legal/open-source-license',
                        component: OpenSourceLicenseComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Open-source license' } }
                    },
                    {
                        path: 'support',
                        component: SupportComponent,
                        pathMatch: 'full',
                        data: { meta: { title: 'Support' } }
                    },
                    {
                        path: '**',
                        redirectTo: '/404'
                    }
                ]
            ]);
        }
        return this.__ROUTES_38;
    }
    get _Router_39() {
        if ((this.__Router_39 == null)) {
            (this.__Router_39 = setupRouter(this._ApplicationRef_12, this._UrlSerializer_35, this._RouterOutletMap_36, this._Location_34, this, this._NgModuleFactoryLoader_37, this._Compiler_13, this._ROUTES_38, this._ROUTER_CONFIGURATION_32, this.parent.get(UrlHandlingStrategy, null), this.parent.get(RouteReuseStrategy, null)));
        }
        return this.__Router_39;
    }
    get _ActivatedRoute_40() {
        if ((this.__ActivatedRoute_40 == null)) {
            (this.__ActivatedRoute_40 = rootRoute(this._Router_39));
        }
        return this.__ActivatedRoute_40;
    }
    get _PreloadAllModules_44() {
        if ((this.__PreloadAllModules_44 == null)) {
            (this.__PreloadAllModules_44 = new PreloadAllModules());
        }
        return this.__PreloadAllModules_44;
    }
    get _ROUTER_INITIALIZER_45() {
        if ((this.__ROUTER_INITIALIZER_45 == null)) {
            (this.__ROUTER_INITIALIZER_45 = initialRouterNavigation(this._Router_39, this._ApplicationRef_12, this._RouterPreloader_43, this._ROUTER_CONFIGURATION_32));
        }
        return this.__ROUTER_INITIALIZER_45;
    }
    get _APP_BOOTSTRAP_LISTENER_46() {
        if ((this.__APP_BOOTSTRAP_LISTENER_46 == null)) {
            (this.__APP_BOOTSTRAP_LISTENER_46 = [this._ROUTER_INITIALIZER_45]);
        }
        return this.__APP_BOOTSTRAP_LISTENER_46;
    }
    createInternal() {
        this._CommonModule_0 = new CommonModule();
        this._ApplicationModule_1 = new ApplicationModule();
        this._BrowserModule_2 = new BrowserModule(this.parent.get(BrowserModule, null));
        this._ROUTER_FORROOT_GUARD_3 = provideForRootGuard(this.parent.get(Router, null));
        this._RouterModule_4 = new RouterModule(this._ROUTER_FORROOT_GUARD_3);
        this._AppModule_5 = new AppModule();
        this._ErrorHandler_8 = errorHandler();
        this._ApplicationInitStatus_9 = new ApplicationInitStatus(this.parent.get(APP_INITIALIZER, null));
        this._Testability_10 = new Testability(this.parent.get(NgZone));
        this._ApplicationRef__11 = new ApplicationRef_(this.parent.get(NgZone), this.parent.get(Console), this, this._ErrorHandler_8, this, this._ApplicationInitStatus_9, this.parent.get(TestabilityRegistry, null), this._Testability_10);
        this._NoPreloading_41 = new NoPreloading();
        this._PreloadingStrategy_42 = this._NoPreloading_41;
        this._RouterPreloader_43 = new RouterPreloader(this._Router_39, this._NgModuleFactoryLoader_37, this._Compiler_13, this, this._PreloadingStrategy_42);
        return this._AppModule_5;
    }
    getInternal(token, notFoundResult) {
        if ((token === CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === ApplicationModule)) {
            return this._ApplicationModule_1;
        }
        if ((token === BrowserModule)) {
            return this._BrowserModule_2;
        }
        if ((token === ROUTER_FORROOT_GUARD)) {
            return this._ROUTER_FORROOT_GUARD_3;
        }
        if ((token === RouterModule)) {
            return this._RouterModule_4;
        }
        if ((token === AppModule)) {
            return this._AppModule_5;
        }
        if ((token === LOCALE_ID)) {
            return this._LOCALE_ID_6;
        }
        if ((token === NgLocalization)) {
            return this._NgLocalization_7;
        }
        if ((token === ErrorHandler)) {
            return this._ErrorHandler_8;
        }
        if ((token === ApplicationInitStatus)) {
            return this._ApplicationInitStatus_9;
        }
        if ((token === Testability)) {
            return this._Testability_10;
        }
        if ((token === ApplicationRef_)) {
            return this._ApplicationRef__11;
        }
        if ((token === ApplicationRef)) {
            return this._ApplicationRef_12;
        }
        if ((token === Compiler)) {
            return this._Compiler_13;
        }
        if ((token === APP_ID)) {
            return this._APP_ID_14;
        }
        if ((token === DOCUMENT)) {
            return this._DOCUMENT_15;
        }
        if ((token === HAMMER_GESTURE_CONFIG)) {
            return this._HAMMER_GESTURE_CONFIG_16;
        }
        if ((token === EVENT_MANAGER_PLUGINS)) {
            return this._EVENT_MANAGER_PLUGINS_17;
        }
        if ((token === EventManager)) {
            return this._EventManager_18;
        }
        if ((token === DomSharedStylesHost)) {
            return this._DomSharedStylesHost_19;
        }
        if ((token === AnimationDriver)) {
            return this._AnimationDriver_20;
        }
        if ((token === DomRootRenderer)) {
            return this._DomRootRenderer_21;
        }
        if ((token === NgProbeToken)) {
            return this._NgProbeToken_22;
        }
        if ((token === RootRenderer)) {
            return this._RootRenderer_23;
        }
        if ((token === DomSanitizer)) {
            return this._DomSanitizer_24;
        }
        if ((token === Sanitizer)) {
            return this._Sanitizer_25;
        }
        if ((token === AnimationQueue)) {
            return this._AnimationQueue_26;
        }
        if ((token === ViewUtils)) {
            return this._ViewUtils_27;
        }
        if ((token === IterableDiffers)) {
            return this._IterableDiffers_28;
        }
        if ((token === KeyValueDiffers)) {
            return this._KeyValueDiffers_29;
        }
        if ((token === SharedStylesHost)) {
            return this._SharedStylesHost_30;
        }
        if ((token === Title)) {
            return this._Title_31;
        }
        if ((token === ROUTER_CONFIGURATION)) {
            return this._ROUTER_CONFIGURATION_32;
        }
        if ((token === LocationStrategy)) {
            return this._LocationStrategy_33;
        }
        if ((token === Location)) {
            return this._Location_34;
        }
        if ((token === UrlSerializer)) {
            return this._UrlSerializer_35;
        }
        if ((token === RouterOutletMap)) {
            return this._RouterOutletMap_36;
        }
        if ((token === NgModuleFactoryLoader)) {
            return this._NgModuleFactoryLoader_37;
        }
        if ((token === ROUTES)) {
            return this._ROUTES_38;
        }
        if ((token === Router)) {
            return this._Router_39;
        }
        if ((token === ActivatedRoute)) {
            return this._ActivatedRoute_40;
        }
        if ((token === NoPreloading)) {
            return this._NoPreloading_41;
        }
        if ((token === PreloadingStrategy)) {
            return this._PreloadingStrategy_42;
        }
        if ((token === RouterPreloader)) {
            return this._RouterPreloader_43;
        }
        if ((token === PreloadAllModules)) {
            return this._PreloadAllModules_44;
        }
        if ((token === ROUTER_INITIALIZER)) {
            return this._ROUTER_INITIALIZER_45;
        }
        if ((token === APP_BOOTSTRAP_LISTENER)) {
            return this._APP_BOOTSTRAP_LISTENER_46;
        }
        return notFoundResult;
    }
    destroyInternal() {
        this._ApplicationRef__11.ngOnDestroy();
        this._RouterPreloader_43.ngOnDestroy();
    }
}
const AppModuleNgFactory = new NgModuleFactory(AppModuleInjector, AppModule);

enableProdMode();
platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);

}());
